name: Fuzz VAmPI with WuppieFuzz, EvoMaster, RESTler, and Schemathesis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  evomaster:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start VAmPI Container
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      - name: Initialize VAmPI Database
        run: curl -s http://localhost:5000/createdb

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '11'

      - name: Download EvoMaster
        run: |
          curl -L -o evomaster.jar https://github.com/EMResearch/EvoMaster/releases/download/v3.4.0/evomaster.jar

      - name: Run EvoMaster in Blackbox Mode
        run: |
          java -jar evomaster.jar \
            --blackBox true \
            --bbSwaggerUrl services/vampi/openapi_specs/openapi3.yml \
            --outputFormat PYTHON_UNITTEST \
            --maxTime 60s \
            --outputFolder generated_tests \
            --ratePerMinute 60

      - name: Upload EvoMaster Results
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: generated_tests

  wuppiefuzz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start VAmPI Container (Vulnerable Mode)
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      - name: Initialize VAmPI Database
        run: curl -s http://localhost:5000/createdb

      - name: Set up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Clone WuppieFuzz Repository
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release

      - name: Generate Initial Corpus for Fuzzing
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz output-corpus --openapi-spec ../services/vampi/openapi_specs/openapi3.yml corpus_directory

      - name: Run WuppieFuzz Fuzzing Campaign
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz fuzz \
            --report \
            --log-level info \
            --initial-corpus corpus_directory \
            --timeout 60 \
            ../services/vampi/openapi_specs/openapi3.yml

      - name: Upload Fuzzing Report
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-report
          path: WuppieFuzz/reports/

  restler:
    runs-on: ubuntu-latest
    env:
      BASE_DIR: ${{ github.workspace }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare Environment
        run: |
          mkdir -p $BASE_DIR/services/restler/output
          chmod -R 777 $BASE_DIR/services/restler/output
          echo "=== Initial output directory structure ==="
          ls -la $BASE_DIR/services/restler/output

      - name: Fix script permissions
        run: |
          chmod +x services/restler/config/run-restler.sh
          chmod +x services/restler/config/*.sh  # Ensure all scripts are executable

      - name: Run RESTler and VAmPI
        run: |
          cd services/restler
          docker compose -f docker-compose.restler.yml up --abort-on-container-exit
          echo "=== Listing output directory structure ==="
          ls -R $BASE_DIR/services/restler/output || true
          echo "=== Detailed output directory listing ==="
          find $BASE_DIR/services/restler/output -type f -exec ls -l {} \; || true

      - name: Check Container Logs
        if: always()
        run: |
          docker compose -f services/restler/docker-compose.restler.yml logs vampi || true
          docker compose -f services/restler/docker-compose.restler.yml logs restler || true
          docker compose -f services/restler/docker-compose.restler.yml logs init-vampi || true

      - name: Upload RESTler Test Results
        uses: actions/upload-artifact@v4
        with:
          name: restler-test-results
          path: ${{ github.workspace }}/services/restler/output/Test/

      - name: Upload RESTler Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: restler-coverage-report
          path: |
            ${{ github.workspace }}/services/restler/output/**/coverage_failures_to_investigate.txt
          if-no-files-found: warn

      - name: Upload RESTler FuzzLean Results
        uses: actions/upload-artifact@v4
        with:
          name: restler-fuzzlean-results
          path: ${{ github.workspace }}/services/restler/output/FuzzLean/

      - name: Upload RESTler Fuzz Results
        uses: actions/upload-artifact@v4
        with:
          name: restler-fuzz-results
          path: ${{ github.workspace }}/services/restler/output/Fuzz/
