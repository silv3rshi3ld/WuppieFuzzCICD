# Stage 1: Build RESTler from source
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS builder

# Install required tools
RUN apt-get update && apt-get install -y python3 python3-pip git dos2unix tree

# Clone the official RESTler repository from GitHub
RUN git clone https://github.com/microsoft/restler-fuzzer.git /restler-fuzzer

WORKDIR /restler-fuzzer

# Build RESTler using the provided build script and verify the output
RUN set -e && \
    python3 build-restler.py --dest_dir /restler_bin && \
    if [ ! -d "/restler_bin" ]; then \
        echo "Error: /restler_bin directory was not created" && \
        exit 1; \
    fi && \
    if [ ! -f "/restler_bin/restler.py" ]; then \
        echo "Error: restler.py was not created" && \
        exit 1; \
    fi && \
    echo "=== RESTler bin contents ===" && \
    ls -la /restler_bin && \
    echo "=== RESTler bin Python files ===" && \
    find /restler_bin -name "*.py" && \
    echo "=== RESTler bin executables ===" && \
    find /restler_bin -type f -executable

# Stage 2: Create a lean runtime image
FROM mcr.microsoft.com/dotnet/aspnet:8.0

# Install Python and required packages
RUN apt-get update && apt-get install -y python3 dos2unix tree && rm -rf /var/lib/apt/lists/*

# Copy the entire RESTler directory from builder
COPY --from=builder /restler_bin /RESTler

# Create necessary directories for mounted volumes
RUN mkdir -p /RESTler/openapi-specs /RESTler/config /RESTler/results

# Set execute permissions on RESTler binaries and verify the installation
RUN set -e && \
    chmod -R 755 /RESTler && \
    find /RESTler -type f -name "*.py" -exec chmod 755 {} \; && \
    if [ ! -f "/RESTler/restler.py" ]; then \
        echo "Error: restler.py is missing in the final image" && \
        exit 1; \
    fi && \
    echo "=== RESTler contents ===" && \
    ls -la /RESTler && \
    echo "=== RESTler Python files ===" && \
    find /RESTler -name "*.py" && \
    echo "=== RESTler executables ===" && \
    find /RESTler -type f -executable

# Precompile python modules in the engine directory
RUN python3 -m compileall -b /RESTler/engine

# Copy the entrypoint script into the image
COPY services/restler/config/entrypoint.sh /entrypoint.sh

# Convert line endings and set permissions
RUN dos2unix /entrypoint.sh && \
    chmod 755 /entrypoint.sh

# Set the working directory
WORKDIR /RESTler

# Set the default entrypoint to our script
ENTRYPOINT ["/entrypoint.sh"]
