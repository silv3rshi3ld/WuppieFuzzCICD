# Stage 1: Build RESTler from source
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS builder

# Install required tools and dependencies
RUN apt-get update && \
    apt-get install -y \
    python3 \
    python3-pip \
    git \
    dos2unix \
    tree \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies with --break-system-packages flag
RUN pip3 install --break-system-packages requests applicationinsights pytest

# Clone a specific version of RESTler that we know works
RUN git clone https://github.com/microsoft/restler-fuzzer.git /restler-fuzzer && \
    cd /restler-fuzzer && \
    git checkout v9.1.0  # Using a stable release version

WORKDIR /restler-fuzzer

# Build RESTler using the provided build script
RUN mkdir -p /restler_bin && \
    python3 ./build-restler.py --dest_dir /restler_bin && \
    # Verify the build output
    if [ ! -d "/restler_bin" ]; then \
        echo "Error: /restler_bin directory was not created" && \
        exit 1; \
    fi && \
    # List all files to help with debugging
    echo "=== RESTler bin contents ===" && \
    ls -la /restler_bin && \
    echo "=== Python files in source ===" && \
    find . -name "*.py" && \
    echo "=== Contents of /restler_bin ===" && \
    find /restler_bin -type f

# Stage 2: Create a lean runtime image
FROM mcr.microsoft.com/dotnet/aspnet:6.0

# Install Python and required packages
RUN apt-get update && \
    apt-get install -y \
    python3 \
    python3-pip \
    dos2unix \
    tree \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies with --break-system-packages flag
RUN pip3 install --break-system-packages requests applicationinsights

# Create necessary directories for mounted volumes
RUN mkdir -p /RESTler/openapi-specs /RESTler/config /RESTler/results

# Copy ALL the built RESTler files from builder, including Restler.dll
COPY --from=builder /restler_bin/* /RESTler/

# Copy the Python engine files from the correct path
COPY --from=builder /restler-fuzzer/restler/engine /RESTler/engine

# Set execute permissions and verify installation
RUN chmod -R 755 /RESTler && \
    find /RESTler -type f -name "*.py" -exec chmod 755 {} \; && \
    echo "=== RESTler contents ===" && \
    ls -la /RESTler && \
    echo "=== RESTler Python files ===" && \
    find /RESTler -name "*.py" && \
    echo "=== RESTler executables ===" && \
    find /RESTler -type f -executable

# Precompile python modules in the engine directory
RUN python3 -m compileall -b /RESTler/engine

# Copy the entrypoint script
COPY services/restler/config/entrypoint.sh /entrypoint.sh

# Convert line endings and set permissions
RUN dos2unix /entrypoint.sh && \
    chmod 755 /entrypoint.sh

# Set the working directory
WORKDIR /RESTler

# Set the default entrypoint to our script
ENTRYPOINT ["/entrypoint.sh"]
