window.RestlerendpointsChunk0 = [
  {
    "path": "/users/v1/L5EEU7bJSmg_XSwXV1CWZ44mlHxphgF4uA9RK",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /users/v1/L5+EEU7bJSmg_XSwXV(*<1C'<#WZ4.#4:ml.Hxph`g\"F4uA9RK HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:47:44 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 44734\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unrecognized token: \"'\"\n[SQL: SELECT * FROM users WHERE username = 'L5+EEU7bJSmg_XSwXV(*<1C'<']\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>OperationalError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unrecognized token: &#34;&#39;&#34;\n[SQL: SELECT * FROM users WHERE username = &#39;L5+EEU7bJSmg_XSwXV(*&lt;1C&#39;&lt;&#39;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196426804976\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426805120\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196426802528\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426803104\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426802672\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426801952\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426801664\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426802960\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426802816\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426801520\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426802384\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/validation.py\"</cite>,\n      line <em class=\"line\">399</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>for param in self.parameters.get(&#39;formData&#39;, []):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = self.validate_formdata_parameter(param[&#34;name&#34;], param, request)</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if error:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>raise BadRequestProblem(detail=error)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return function(request)\n<span class=\"ws\">            </span>       ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426802096\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426803248\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/users.py\"</cite>,\n      line <em class=\"line\">46</em>,\n      in <code class=\"function\">get_by_username</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>}</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>return Response(json.dumps(responseObject), 200, mimetype=&#34;application/json&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def get_by_username(username):</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>if User.get_user(username):\n<span class=\"ws\">    </span>   ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return Response(str(User.get_user(username)), 200, mimetype=&#34;application/json&#34;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return Response(error_message_helper(&#34;User not found&#34;), 404, mimetype=&#34;application/json&#34;)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426801808\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">73</em>,\n      in <code class=\"function\">get_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def get_user(username):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if vuln:  # SQLi Injection</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>user_query = f&#34;SELECT * FROM users WHERE username = &#39;{username}&#39;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>query = db.session.execute(text(user_query))\n<span class=\"ws\">            </span>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>ret = query.fetchone()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if ret:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>fin_query = &#39;{&#34;username&#34;: &#34;%s&#34;, &#34;email&#34;: &#34;%s&#34;}&#39; % (ret[1], ret[3])</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>fin_query = None</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426802240\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">709</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.execute(\n<span class=\"ws\">        </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>params=params,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>bind_arguments=bind_arguments,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>_parent_execute_state=_parent_execute_state,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426803536\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">2229</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>:return: a :class:`_engine.Result` object.</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._execute_internal(\n<span class=\"ws\">        </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>bind_arguments=bind_arguments,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>_parent_execute_state=_parent_execute_state,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426803680\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">2133</em>,\n      in <code class=\"function\">_execute_internal</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>bind_arguments,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>conn,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>result = conn.execute(\n<span class=\"ws\">            </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>statement, params or {}, execution_options=execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if _scalar_result:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return result.scalar()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426803824\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426803968\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426804112\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426804256\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426804400\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426804544\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426804688\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426804832\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unrecognized token: &#34;&#39;&#34;\n[SQL: SELECT * FROM users WHERE username = &#39;L5+EEU7bJSmg_XSwXV(*&lt;1C&#39;&lt;&#39;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.OperationalError: unrecognized token: &#34;&#39;&#34;\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/validation.py&#34;, line 399, in wrapper\n    return function(request)\n           ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/users.py&#34;, line 46, in get_by_username\n    if User.get_user(username):\n       ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/models/user_model.py&#34;, line 73, in get_user\n    query = db.session.execute(text(user_query))\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 709, in execute\n    return self._proxied.execute(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 2229, in execute\n    return self._execute_internal(\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 2133, in _execute_internal\n    result = conn.execute(\n             ^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unrecognized token: &#34;&#39;&#34;\n[SQL: SELECT * FROM users WHERE username = &#39;L5+EEU7bJSmg_XSwXV(*&lt;1C&#39;&lt;&#39;]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.OperationalError: unrecognized token: \"'\"\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/validation.py\", line 399, in wrapper\n    return function(request)\n           ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/users.py\", line 46, in get_by_username\n    if User.get_user(username):\n       ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/vampi/models/user_model.py\", line 73, in get_user\n    query = db.session.execute(text(user_query))\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 709, in execute\n    return self._proxied.execute(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 2229, in execute\n    return self._execute_internal(\n           ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 2133, in _execute_internal\n    result = conn.execute(\n             ^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) unrecognized token: \"'\"\n[SQL: SELECT * FROM users WHERE username = 'L5+EEU7bJSmg_XSwXV(*<1C'<']\n(Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n\n-->\n"
  },
  {
    "path": "/createdb",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /createdb HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:47:49 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 63111\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle15', 'secret for bookTitle15', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>IntegrityError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle15&#39;, &#39;secret for bookTitle15&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196425013216\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425013360\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196436518672\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196436517808\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196441611792\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196441613376\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196441613088\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196441613952\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196441613664\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196441612800\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196441612512\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196441612224\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/main.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">populate_db</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from app import vuln</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def populate_db():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.drop_all()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.create_all()</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>User.init_db_users()\n<span class=\"ws\">    </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response_text = &#39;{ &#34;message&#34;: &#34;Database populated.&#34; }&#39;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response = Response(response_text, 200, mimetype=&#39;application/json&#39;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def basic():</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196441611936\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">101</em>,\n      in <code class=\"function\">init_db_users</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def init_db_users():</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name1&#34;, &#34;pass1&#34;, &#34;mail1@mail.com&#34;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426809152\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">register_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def register_user(username, password, email, admin=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user = User(username=username, password=password, email=email, admin=admin)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>randomint = str(randrange(100))</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user.books = [Book(book_title=&#34;bookTitle&#34; + randomint, secret_content=&#34;secret for bookTitle&#34; + randomint)]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>db.session.add(new_user)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>db.session.commit()\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def delete_user(username):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>done = User.query.filter_by(username=username).delete()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.session.commit()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426809008\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">538</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.commit()\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def connection(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>execution_options: Optional[_ExecuteOptions] = None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426803392\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1903</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>trans = self._transaction</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if trans is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>trans = self._autobegin_t()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>trans.commit(_to_root=True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def prepare(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>If no transaction is in progress, this method raises an</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196426808864\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425007456\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425007312\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1218</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>SessionTransactionState.CLOSED,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self._prepare_impl()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if self._parent is None or self.nested:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for conn, trans, should_commit, autoclose in set(</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._connections.values()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425007744\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425007600\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425007888\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1193</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not self.session._flushing:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for _flush_guard in range(100):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if self.session._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>break</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self.session.flush()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc.FlushError(</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;creating new objects?&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425008032\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4140</em>,\n      in <code class=\"function\">flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._flushing = True</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._flush(objects)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._flushing = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>util.warn(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425008176\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4276</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>transaction.commit()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>with util.safe_reraise():\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>transaction.rollback(_capture_exception=True)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def bulk_save_objects(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>objects: Iterable[object],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425008320\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\"</cite>,\n      line <em class=\"line\">147</em>,\n      in <code class=\"function\">__exit__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span># see #2703 for notes</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if type_ is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>assert exc_value is not None</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise exc_value.with_traceback(exc_tb)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>assert value is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise value.with_traceback(traceback)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425009616\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4237</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._warn_on_events = True</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>flush_context.execute()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._warn_on_events = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.dispatch.after_flush(self, flush_context)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425009760\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">467</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>while set_:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n = set_.pop()</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n.execute_aggregate(self, set_)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rec.execute(self)\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_flush_changes(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>flush().</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425009904\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">644</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>assert mapper is mapper.base_mapper</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def execute(self, uow):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>util.preloaded.orm_persistence.save_obj(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425010048\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">93</em>,\n      in <code class=\"function\">save_obj</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>update,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>_emit_insert_statements(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>base_mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uowtransaction,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>insert,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425011920\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">1188</em>,\n      in <code class=\"function\">_emit_insert_statements</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>statement.values(value_params),</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>result = connection.execute(\n<span class=\"ws\">                        </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425012064\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425012208\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425012352\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425012496\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425012640\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425012784\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425012928\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425013072\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle15&#39;, &#39;secret for bookTitle15&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/main.py&#34;, line 9, in populate_db\n    User.init_db_users()\n  File &#34;/vampi/models/user_model.py&#34;, line 101, in init_db_users\n    User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n  File &#34;/vampi/models/user_model.py&#34;, line 89, in register_user\n    db.session.commit()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1903, in commit\n    trans.commit(_to_root=True)\n  File &#34;&lt;string&gt;&#34;, line 2, in commit\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1218, in commit\n    self._prepare_impl()\n  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1193, in _prepare_impl\n    self.session.flush()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4140, in flush\n    self._flush(objects)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4276, in _flush\n    with util.safe_reraise():\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4237, in _flush\n    flush_context.execute()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 467, in execute\n    rec.execute(self)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj\n    _emit_insert_statements(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle15&#39;, &#39;secret for bookTitle15&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/main.py\", line 9, in populate_db\n    User.init_db_users()\n  File \"/vampi/models/user_model.py\", line 101, in init_db_users\n    User.register_user(\"admin\", \"pass1\", \"admin@mail.com\", True)\n  File \"/vampi/models/user_model.py\", line 89, in register_user\n    db.session.commit()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1903, in commit\n    trans.commit(_to_root=True)\n  File \"<string>\", line 2, in commit\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1218, in commit\n    self._prepare_impl()\n  File \"<string>\", line 2, in _prepare_impl\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1193, in _prepare_impl\n    self.session.flush()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4140, in flush\n    self._flush(objects)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4276, in _flush\n    with util.safe_reraise():\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\", line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4237, in _flush\n    flush_context.execute()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 467, in execute\n    rec.execute(self)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 93, in save_obj\n    _emit_insert_statements(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle15', 'secret for bookTitle15', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n\n-->\n"
  },
  {
    "path": "/createdb",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /createdb HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:47:52 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 63111\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle53', 'secret for bookTitle53', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>IntegrityError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle53&#39;, &#39;secret for bookTitle53&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196425018688\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425018832\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196425013648\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425014224\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425014080\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425015232\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425014656\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425013504\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425014800\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425013792\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425014944\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425014512\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/main.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">populate_db</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from app import vuln</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def populate_db():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.drop_all()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.create_all()</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>User.init_db_users()\n<span class=\"ws\">    </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response_text = &#39;{ &#34;message&#34;: &#34;Database populated.&#34; }&#39;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response = Response(response_text, 200, mimetype=&#39;application/json&#39;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def basic():</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425013936\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">101</em>,\n      in <code class=\"function\">init_db_users</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def init_db_users():</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name1&#34;, &#34;pass1&#34;, &#34;mail1@mail.com&#34;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425015088\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">register_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def register_user(username, password, email, admin=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user = User(username=username, password=password, email=email, admin=admin)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>randomint = str(randrange(100))</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user.books = [Book(book_title=&#34;bookTitle&#34; + randomint, secret_content=&#34;secret for bookTitle&#34; + randomint)]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>db.session.add(new_user)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>db.session.commit()\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def delete_user(username):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>done = User.query.filter_by(username=username).delete()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.session.commit()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425015376\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">538</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.commit()\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def connection(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>execution_options: Optional[_ExecuteOptions] = None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425014368\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1903</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>trans = self._transaction</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if trans is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>trans = self._autobegin_t()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>trans.commit(_to_root=True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def prepare(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>If no transaction is in progress, this method raises an</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425015520\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425015664\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425015808\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1218</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>SessionTransactionState.CLOSED,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self._prepare_impl()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if self._parent is None or self.nested:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for conn, trans, should_commit, autoclose in set(</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._connections.values()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425015952\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425016096\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425016240\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1193</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not self.session._flushing:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for _flush_guard in range(100):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if self.session._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>break</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self.session.flush()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc.FlushError(</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;creating new objects?&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425016384\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4140</em>,\n      in <code class=\"function\">flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._flushing = True</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._flush(objects)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._flushing = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>util.warn(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425016528\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4276</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>transaction.commit()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>with util.safe_reraise():\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>transaction.rollback(_capture_exception=True)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def bulk_save_objects(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>objects: Iterable[object],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425016672\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\"</cite>,\n      line <em class=\"line\">147</em>,\n      in <code class=\"function\">__exit__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span># see #2703 for notes</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if type_ is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>assert exc_value is not None</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise exc_value.with_traceback(exc_tb)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>assert value is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise value.with_traceback(traceback)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425016816\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4237</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._warn_on_events = True</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>flush_context.execute()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._warn_on_events = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.dispatch.after_flush(self, flush_context)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425016960\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">467</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>while set_:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n = set_.pop()</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n.execute_aggregate(self, set_)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rec.execute(self)\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_flush_changes(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>flush().</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425017104\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">644</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>assert mapper is mapper.base_mapper</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def execute(self, uow):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>util.preloaded.orm_persistence.save_obj(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425017248\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">93</em>,\n      in <code class=\"function\">save_obj</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>update,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>_emit_insert_statements(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>base_mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uowtransaction,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>insert,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425017392\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">1188</em>,\n      in <code class=\"function\">_emit_insert_statements</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>statement.values(value_params),</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>result = connection.execute(\n<span class=\"ws\">                        </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425017536\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425017680\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425017824\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425017968\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425018112\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425018256\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425018400\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425018544\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle53&#39;, &#39;secret for bookTitle53&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/main.py&#34;, line 9, in populate_db\n    User.init_db_users()\n  File &#34;/vampi/models/user_model.py&#34;, line 101, in init_db_users\n    User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n  File &#34;/vampi/models/user_model.py&#34;, line 89, in register_user\n    db.session.commit()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1903, in commit\n    trans.commit(_to_root=True)\n  File &#34;&lt;string&gt;&#34;, line 2, in commit\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1218, in commit\n    self._prepare_impl()\n  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1193, in _prepare_impl\n    self.session.flush()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4140, in flush\n    self._flush(objects)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4276, in _flush\n    with util.safe_reraise():\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4237, in _flush\n    flush_context.execute()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 467, in execute\n    rec.execute(self)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj\n    _emit_insert_statements(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle53&#39;, &#39;secret for bookTitle53&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/main.py\", line 9, in populate_db\n    User.init_db_users()\n  File \"/vampi/models/user_model.py\", line 101, in init_db_users\n    User.register_user(\"admin\", \"pass1\", \"admin@mail.com\", True)\n  File \"/vampi/models/user_model.py\", line 89, in register_user\n    db.session.commit()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1903, in commit\n    trans.commit(_to_root=True)\n  File \"<string>\", line 2, in commit\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1218, in commit\n    self._prepare_impl()\n  File \"<string>\", line 2, in _prepare_impl\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1193, in _prepare_impl\n    self.session.flush()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4140, in flush\n    self._flush(objects)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4276, in _flush\n    with util.safe_reraise():\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\", line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4237, in _flush\n    flush_context.execute()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 467, in execute\n    rec.execute(self)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 93, in save_obj\n    _emit_insert_statements(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle53', 'secret for bookTitle53', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n\n-->\n"
  },
  {
    "path": "/users/v1/register",
    "http_method": "POST",
    "status_code": 200,
    "type": "hit",
    "request_details": "POST /users/v1/register HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\nContent-Type: application/json\r\n\r\n{\n    \"username\":\"name1\",\n    \"password\":\"pass1\",\n    \"email\":\"user@tempmail.com\"}\r\n",
    "response_data": "HTTP/1.1 200 OK\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:47:55 GMT\r\nContent-Type: application/json\r\nContent-Length: 69\r\nConnection: close\r\n\r\n{ \"status\": \"fail\", \"message\": \"User already exists. Please Log in.\"}"
  },
  {
    "path": "/users/v1",
    "http_method": "GET",
    "status_code": 200,
    "type": "hit",
    "request_details": "GET /users/v1 HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 200 OK\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:47:55 GMT\r\nContent-Type: application/json\r\nContent-Length: 236\r\nConnection: close\r\n\r\n{\n  \"users\": [\n    {\n      \"email\": \"mail1@mail.com\",\n      \"username\": \"name1\"\n    },\n    {\n      \"email\": \"mail2@mail.com\",\n      \"username\": \"name2\"\n    },\n    {\n      \"email\": \"admin@mail.com\",\n      \"username\": \"admin\"\n    }\n  ]\n}\n"
  },
  {
    "path": "/createdb",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /createdb HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:47:55 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 63111\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle14', 'secret for bookTitle14', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>IntegrityError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle14&#39;, &#39;secret for bookTitle14&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196430844336\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430844480\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196425022864\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425022720\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425023008\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425023152\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425023296\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430839872\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430840016\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430840160\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430840304\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430840448\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/main.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">populate_db</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from app import vuln</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def populate_db():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.drop_all()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.create_all()</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>User.init_db_users()\n<span class=\"ws\">    </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response_text = &#39;{ &#34;message&#34;: &#34;Database populated.&#34; }&#39;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response = Response(response_text, 200, mimetype=&#39;application/json&#39;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def basic():</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430840592\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">101</em>,\n      in <code class=\"function\">init_db_users</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def init_db_users():</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name1&#34;, &#34;pass1&#34;, &#34;mail1@mail.com&#34;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430840736\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">register_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def register_user(username, password, email, admin=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user = User(username=username, password=password, email=email, admin=admin)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>randomint = str(randrange(100))</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user.books = [Book(book_title=&#34;bookTitle&#34; + randomint, secret_content=&#34;secret for bookTitle&#34; + randomint)]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>db.session.add(new_user)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>db.session.commit()\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def delete_user(username):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>done = User.query.filter_by(username=username).delete()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.session.commit()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430840880\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">538</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.commit()\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def connection(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>execution_options: Optional[_ExecuteOptions] = None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430841024\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1903</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>trans = self._transaction</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if trans is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>trans = self._autobegin_t()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>trans.commit(_to_root=True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def prepare(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>If no transaction is in progress, this method raises an</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430841168\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430841312\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430841456\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1218</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>SessionTransactionState.CLOSED,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self._prepare_impl()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if self._parent is None or self.nested:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for conn, trans, should_commit, autoclose in set(</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._connections.values()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430841600\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430841744\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430841888\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1193</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not self.session._flushing:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for _flush_guard in range(100):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if self.session._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>break</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self.session.flush()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc.FlushError(</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;creating new objects?&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430842032\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4140</em>,\n      in <code class=\"function\">flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._flushing = True</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._flush(objects)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._flushing = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>util.warn(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430842176\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4276</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>transaction.commit()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>with util.safe_reraise():\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>transaction.rollback(_capture_exception=True)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def bulk_save_objects(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>objects: Iterable[object],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430842320\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\"</cite>,\n      line <em class=\"line\">147</em>,\n      in <code class=\"function\">__exit__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span># see #2703 for notes</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if type_ is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>assert exc_value is not None</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise exc_value.with_traceback(exc_tb)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>assert value is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise value.with_traceback(traceback)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430842464\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4237</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._warn_on_events = True</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>flush_context.execute()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._warn_on_events = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.dispatch.after_flush(self, flush_context)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430842608\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">467</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>while set_:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n = set_.pop()</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n.execute_aggregate(self, set_)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rec.execute(self)\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_flush_changes(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>flush().</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430842752\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">644</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>assert mapper is mapper.base_mapper</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def execute(self, uow):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>util.preloaded.orm_persistence.save_obj(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430842896\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">93</em>,\n      in <code class=\"function\">save_obj</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>update,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>_emit_insert_statements(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>base_mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uowtransaction,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>insert,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430843040\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">1188</em>,\n      in <code class=\"function\">_emit_insert_statements</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>statement.values(value_params),</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>result = connection.execute(\n<span class=\"ws\">                        </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430843184\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430843328\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430843472\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430843616\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430843760\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430843904\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430844048\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430844192\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle14&#39;, &#39;secret for bookTitle14&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/main.py&#34;, line 9, in populate_db\n    User.init_db_users()\n  File &#34;/vampi/models/user_model.py&#34;, line 101, in init_db_users\n    User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n  File &#34;/vampi/models/user_model.py&#34;, line 89, in register_user\n    db.session.commit()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1903, in commit\n    trans.commit(_to_root=True)\n  File &#34;&lt;string&gt;&#34;, line 2, in commit\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1218, in commit\n    self._prepare_impl()\n  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1193, in _prepare_impl\n    self.session.flush()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4140, in flush\n    self._flush(objects)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4276, in _flush\n    with util.safe_reraise():\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4237, in _flush\n    flush_context.execute()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 467, in execute\n    rec.execute(self)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj\n    _emit_insert_statements(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle14&#39;, &#39;secret for bookTitle14&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/main.py\", line 9, in populate_db\n    User.init_db_users()\n  File \"/vampi/models/user_model.py\", line 101, in init_db_users\n    User.register_user(\"admin\", \"pass1\", \"admin@mail.com\", True)\n  File \"/vampi/models/user_model.py\", line 89, in register_user\n    db.session.commit()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1903, in commit\n    trans.commit(_to_root=True)\n  File \"<string>\", line 2, in commit\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1218, in commit\n    self._prepare_impl()\n  File \"<string>\", line 2, in _prepare_impl\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1193, in _prepare_impl\n    self.session.flush()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4140, in flush\n    self._flush(objects)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4276, in _flush\n    with util.safe_reraise():\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\", line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4237, in _flush\n    flush_context.execute()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 467, in execute\n    rec.execute(self)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 93, in save_obj\n    _emit_insert_statements(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle14', 'secret for bookTitle14', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n\n-->\n"
  },
  {
    "path": "/createdb",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /createdb HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:47:58 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 63111\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle11', 'secret for bookTitle11', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>IntegrityError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle11&#39;, &#39;secret for bookTitle11&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196430849808\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430849952\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196430844624\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430844768\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430845200\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430845056\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430844912\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430845344\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430845488\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430845632\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430845776\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430845920\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/main.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">populate_db</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from app import vuln</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def populate_db():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.drop_all()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.create_all()</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>User.init_db_users()\n<span class=\"ws\">    </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response_text = &#39;{ &#34;message&#34;: &#34;Database populated.&#34; }&#39;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response = Response(response_text, 200, mimetype=&#39;application/json&#39;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def basic():</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430846064\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">101</em>,\n      in <code class=\"function\">init_db_users</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def init_db_users():</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name1&#34;, &#34;pass1&#34;, &#34;mail1@mail.com&#34;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430846208\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">register_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def register_user(username, password, email, admin=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user = User(username=username, password=password, email=email, admin=admin)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>randomint = str(randrange(100))</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user.books = [Book(book_title=&#34;bookTitle&#34; + randomint, secret_content=&#34;secret for bookTitle&#34; + randomint)]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>db.session.add(new_user)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>db.session.commit()\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def delete_user(username):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>done = User.query.filter_by(username=username).delete()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.session.commit()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430846352\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">538</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.commit()\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def connection(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>execution_options: Optional[_ExecuteOptions] = None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430846496\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1903</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>trans = self._transaction</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if trans is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>trans = self._autobegin_t()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>trans.commit(_to_root=True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def prepare(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>If no transaction is in progress, this method raises an</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430846640\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430846784\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430846928\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1218</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>SessionTransactionState.CLOSED,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self._prepare_impl()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if self._parent is None or self.nested:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for conn, trans, should_commit, autoclose in set(</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._connections.values()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430847072\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430847216\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430847360\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1193</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not self.session._flushing:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for _flush_guard in range(100):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if self.session._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>break</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self.session.flush()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc.FlushError(</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;creating new objects?&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430847504\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4140</em>,\n      in <code class=\"function\">flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._flushing = True</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._flush(objects)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._flushing = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>util.warn(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430847648\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4276</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>transaction.commit()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>with util.safe_reraise():\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>transaction.rollback(_capture_exception=True)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def bulk_save_objects(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>objects: Iterable[object],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430847792\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\"</cite>,\n      line <em class=\"line\">147</em>,\n      in <code class=\"function\">__exit__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span># see #2703 for notes</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if type_ is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>assert exc_value is not None</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise exc_value.with_traceback(exc_tb)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>assert value is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise value.with_traceback(traceback)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430847936\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4237</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._warn_on_events = True</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>flush_context.execute()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._warn_on_events = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.dispatch.after_flush(self, flush_context)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430848080\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">467</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>while set_:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n = set_.pop()</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n.execute_aggregate(self, set_)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rec.execute(self)\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_flush_changes(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>flush().</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430848224\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">644</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>assert mapper is mapper.base_mapper</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def execute(self, uow):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>util.preloaded.orm_persistence.save_obj(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430848368\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">93</em>,\n      in <code class=\"function\">save_obj</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>update,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>_emit_insert_statements(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>base_mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uowtransaction,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>insert,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430848512\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">1188</em>,\n      in <code class=\"function\">_emit_insert_statements</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>statement.values(value_params),</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>result = connection.execute(\n<span class=\"ws\">                        </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430848656\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430848800\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430848944\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430849088\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430849232\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430849376\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430849520\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430849664\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle11&#39;, &#39;secret for bookTitle11&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/main.py&#34;, line 9, in populate_db\n    User.init_db_users()\n  File &#34;/vampi/models/user_model.py&#34;, line 101, in init_db_users\n    User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n  File &#34;/vampi/models/user_model.py&#34;, line 89, in register_user\n    db.session.commit()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1903, in commit\n    trans.commit(_to_root=True)\n  File &#34;&lt;string&gt;&#34;, line 2, in commit\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1218, in commit\n    self._prepare_impl()\n  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1193, in _prepare_impl\n    self.session.flush()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4140, in flush\n    self._flush(objects)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4276, in _flush\n    with util.safe_reraise():\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4237, in _flush\n    flush_context.execute()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 467, in execute\n    rec.execute(self)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj\n    _emit_insert_statements(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle11&#39;, &#39;secret for bookTitle11&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/main.py\", line 9, in populate_db\n    User.init_db_users()\n  File \"/vampi/models/user_model.py\", line 101, in init_db_users\n    User.register_user(\"admin\", \"pass1\", \"admin@mail.com\", True)\n  File \"/vampi/models/user_model.py\", line 89, in register_user\n    db.session.commit()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1903, in commit\n    trans.commit(_to_root=True)\n  File \"<string>\", line 2, in commit\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1218, in commit\n    self._prepare_impl()\n  File \"<string>\", line 2, in _prepare_impl\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1193, in _prepare_impl\n    self.session.flush()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4140, in flush\n    self._flush(objects)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4276, in _flush\n    with util.safe_reraise():\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\", line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4237, in _flush\n    flush_context.execute()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 467, in execute\n    rec.execute(self)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 93, in save_obj\n    _emit_insert_statements(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle11', 'secret for bookTitle11', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n\n-->\n"
  },
  {
    "path": "/users/v1/name1",
    "http_method": "GET",
    "status_code": 200,
    "type": "hit",
    "request_details": "GET /users/v1/name1 HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 200 OK\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:48:00 GMT\r\nContent-Type: application/json\r\nContent-Length: 48\r\nConnection: close\r\n\r\n{\"username\": \"name1\", \"email\": \"mail1@mail.com\"}"
  },
  {
    "path": "/createdb",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /createdb HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:48:00 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 63111\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle68', 'secret for bookTitle68', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>IntegrityError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle68&#39;, &#39;secret for bookTitle68&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196430855280\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430855424\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196430850240\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430850096\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430850528\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430850384\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430850672\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430850816\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430850960\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430851104\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430851248\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430851392\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/main.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">populate_db</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from app import vuln</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def populate_db():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.drop_all()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.create_all()</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>User.init_db_users()\n<span class=\"ws\">    </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response_text = &#39;{ &#34;message&#34;: &#34;Database populated.&#34; }&#39;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response = Response(response_text, 200, mimetype=&#39;application/json&#39;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def basic():</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430851536\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">101</em>,\n      in <code class=\"function\">init_db_users</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def init_db_users():</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name1&#34;, &#34;pass1&#34;, &#34;mail1@mail.com&#34;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430851680\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">register_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def register_user(username, password, email, admin=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user = User(username=username, password=password, email=email, admin=admin)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>randomint = str(randrange(100))</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user.books = [Book(book_title=&#34;bookTitle&#34; + randomint, secret_content=&#34;secret for bookTitle&#34; + randomint)]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>db.session.add(new_user)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>db.session.commit()\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def delete_user(username):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>done = User.query.filter_by(username=username).delete()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.session.commit()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430851824\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">538</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.commit()\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def connection(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>execution_options: Optional[_ExecuteOptions] = None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430851968\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1903</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>trans = self._transaction</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if trans is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>trans = self._autobegin_t()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>trans.commit(_to_root=True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def prepare(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>If no transaction is in progress, this method raises an</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430852112\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430852256\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430852400\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1218</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>SessionTransactionState.CLOSED,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self._prepare_impl()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if self._parent is None or self.nested:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for conn, trans, should_commit, autoclose in set(</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._connections.values()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430852544\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430852688\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430852832\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1193</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not self.session._flushing:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for _flush_guard in range(100):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if self.session._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>break</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self.session.flush()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc.FlushError(</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;creating new objects?&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430852976\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4140</em>,\n      in <code class=\"function\">flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._flushing = True</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._flush(objects)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._flushing = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>util.warn(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430853120\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4276</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>transaction.commit()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>with util.safe_reraise():\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>transaction.rollback(_capture_exception=True)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def bulk_save_objects(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>objects: Iterable[object],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430853264\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\"</cite>,\n      line <em class=\"line\">147</em>,\n      in <code class=\"function\">__exit__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span># see #2703 for notes</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if type_ is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>assert exc_value is not None</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise exc_value.with_traceback(exc_tb)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>assert value is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise value.with_traceback(traceback)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430853408\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4237</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._warn_on_events = True</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>flush_context.execute()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._warn_on_events = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.dispatch.after_flush(self, flush_context)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430853552\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">467</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>while set_:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n = set_.pop()</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n.execute_aggregate(self, set_)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rec.execute(self)\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_flush_changes(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>flush().</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430853696\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">644</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>assert mapper is mapper.base_mapper</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def execute(self, uow):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>util.preloaded.orm_persistence.save_obj(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430853840\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">93</em>,\n      in <code class=\"function\">save_obj</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>update,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>_emit_insert_statements(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>base_mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uowtransaction,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>insert,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430853984\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">1188</em>,\n      in <code class=\"function\">_emit_insert_statements</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>statement.values(value_params),</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>result = connection.execute(\n<span class=\"ws\">                        </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430854128\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430854272\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430854416\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430854560\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430854704\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430854848\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430854992\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430855136\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle68&#39;, &#39;secret for bookTitle68&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/main.py&#34;, line 9, in populate_db\n    User.init_db_users()\n  File &#34;/vampi/models/user_model.py&#34;, line 101, in init_db_users\n    User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n  File &#34;/vampi/models/user_model.py&#34;, line 89, in register_user\n    db.session.commit()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1903, in commit\n    trans.commit(_to_root=True)\n  File &#34;&lt;string&gt;&#34;, line 2, in commit\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1218, in commit\n    self._prepare_impl()\n  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1193, in _prepare_impl\n    self.session.flush()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4140, in flush\n    self._flush(objects)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4276, in _flush\n    with util.safe_reraise():\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4237, in _flush\n    flush_context.execute()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 467, in execute\n    rec.execute(self)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj\n    _emit_insert_statements(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle68&#39;, &#39;secret for bookTitle68&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/main.py\", line 9, in populate_db\n    User.init_db_users()\n  File \"/vampi/models/user_model.py\", line 101, in init_db_users\n    User.register_user(\"admin\", \"pass1\", \"admin@mail.com\", True)\n  File \"/vampi/models/user_model.py\", line 89, in register_user\n    db.session.commit()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1903, in commit\n    trans.commit(_to_root=True)\n  File \"<string>\", line 2, in commit\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1218, in commit\n    self._prepare_impl()\n  File \"<string>\", line 2, in _prepare_impl\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1193, in _prepare_impl\n    self.session.flush()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4140, in flush\n    self._flush(objects)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4276, in _flush\n    with util.safe_reraise():\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\", line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4237, in _flush\n    flush_context.execute()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 467, in execute\n    rec.execute(self)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 93, in save_obj\n    _emit_insert_statements(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle68', 'secret for bookTitle68', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n\n-->\n"
  },
  {
    "path": "/createdb",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /createdb HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:48:12 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 63111\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle16', 'secret for bookTitle16', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>IntegrityError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle16&#39;, &#39;secret for bookTitle16&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196429713984\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429714128\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196430855712\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430855568\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196430856000\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196436519392\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429709376\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429709520\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429709664\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429709808\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429709952\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429710096\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/main.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">populate_db</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from app import vuln</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def populate_db():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.drop_all()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.create_all()</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>User.init_db_users()\n<span class=\"ws\">    </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response_text = &#39;{ &#34;message&#34;: &#34;Database populated.&#34; }&#39;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response = Response(response_text, 200, mimetype=&#39;application/json&#39;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def basic():</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429710240\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">101</em>,\n      in <code class=\"function\">init_db_users</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def init_db_users():</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name1&#34;, &#34;pass1&#34;, &#34;mail1@mail.com&#34;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429710384\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">register_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def register_user(username, password, email, admin=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user = User(username=username, password=password, email=email, admin=admin)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>randomint = str(randrange(100))</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user.books = [Book(book_title=&#34;bookTitle&#34; + randomint, secret_content=&#34;secret for bookTitle&#34; + randomint)]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>db.session.add(new_user)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>db.session.commit()\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def delete_user(username):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>done = User.query.filter_by(username=username).delete()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.session.commit()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429710528\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">538</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.commit()\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def connection(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>execution_options: Optional[_ExecuteOptions] = None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429710672\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1903</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>trans = self._transaction</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if trans is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>trans = self._autobegin_t()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>trans.commit(_to_root=True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def prepare(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>If no transaction is in progress, this method raises an</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429710816\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429710960\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429711104\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1218</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>SessionTransactionState.CLOSED,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self._prepare_impl()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if self._parent is None or self.nested:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for conn, trans, should_commit, autoclose in set(</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._connections.values()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429711248\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429711392\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429711536\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1193</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not self.session._flushing:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for _flush_guard in range(100):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if self.session._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>break</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self.session.flush()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc.FlushError(</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;creating new objects?&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429711680\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4140</em>,\n      in <code class=\"function\">flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._flushing = True</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._flush(objects)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._flushing = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>util.warn(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429711824\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4276</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>transaction.commit()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>with util.safe_reraise():\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>transaction.rollback(_capture_exception=True)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def bulk_save_objects(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>objects: Iterable[object],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429711968\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\"</cite>,\n      line <em class=\"line\">147</em>,\n      in <code class=\"function\">__exit__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span># see #2703 for notes</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if type_ is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>assert exc_value is not None</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise exc_value.with_traceback(exc_tb)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>assert value is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise value.with_traceback(traceback)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429712112\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4237</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._warn_on_events = True</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>flush_context.execute()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._warn_on_events = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.dispatch.after_flush(self, flush_context)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429712256\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">467</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>while set_:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n = set_.pop()</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n.execute_aggregate(self, set_)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rec.execute(self)\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_flush_changes(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>flush().</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429712400\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">644</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>assert mapper is mapper.base_mapper</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def execute(self, uow):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>util.preloaded.orm_persistence.save_obj(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429712544\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">93</em>,\n      in <code class=\"function\">save_obj</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>update,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>_emit_insert_statements(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>base_mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uowtransaction,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>insert,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429712688\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">1188</em>,\n      in <code class=\"function\">_emit_insert_statements</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>statement.values(value_params),</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>result = connection.execute(\n<span class=\"ws\">                        </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429712832\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429712976\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429713120\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429713264\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429713408\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429713552\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429713696\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429713840\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle16&#39;, &#39;secret for bookTitle16&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/main.py&#34;, line 9, in populate_db\n    User.init_db_users()\n  File &#34;/vampi/models/user_model.py&#34;, line 101, in init_db_users\n    User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n  File &#34;/vampi/models/user_model.py&#34;, line 89, in register_user\n    db.session.commit()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1903, in commit\n    trans.commit(_to_root=True)\n  File &#34;&lt;string&gt;&#34;, line 2, in commit\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1218, in commit\n    self._prepare_impl()\n  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1193, in _prepare_impl\n    self.session.flush()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4140, in flush\n    self._flush(objects)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4276, in _flush\n    with util.safe_reraise():\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4237, in _flush\n    flush_context.execute()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 467, in execute\n    rec.execute(self)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj\n    _emit_insert_statements(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle16&#39;, &#39;secret for bookTitle16&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/main.py\", line 9, in populate_db\n    User.init_db_users()\n  File \"/vampi/models/user_model.py\", line 101, in init_db_users\n    User.register_user(\"admin\", \"pass1\", \"admin@mail.com\", True)\n  File \"/vampi/models/user_model.py\", line 89, in register_user\n    db.session.commit()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1903, in commit\n    trans.commit(_to_root=True)\n  File \"<string>\", line 2, in commit\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1218, in commit\n    self._prepare_impl()\n  File \"<string>\", line 2, in _prepare_impl\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1193, in _prepare_impl\n    self.session.flush()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4140, in flush\n    self._flush(objects)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4276, in _flush\n    with util.safe_reraise():\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\", line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4237, in _flush\n    flush_context.execute()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 467, in execute\n    rec.execute(self)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 93, in save_obj\n    _emit_insert_statements(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle16', 'secret for bookTitle16', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n\n-->\n"
  },
  {
    "path": "/createdb",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /createdb HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:48:20 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 63111\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle74', 'secret for bookTitle74', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>IntegrityError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle74&#39;, &#39;secret for bookTitle74&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196429723056\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429723200\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196429718304\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429718160\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429718016\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429717872\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429718448\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429718592\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429718736\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429718880\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429719024\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429719168\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/main.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">populate_db</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from app import vuln</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def populate_db():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.drop_all()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.create_all()</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>User.init_db_users()\n<span class=\"ws\">    </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response_text = &#39;{ &#34;message&#34;: &#34;Database populated.&#34; }&#39;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response = Response(response_text, 200, mimetype=&#39;application/json&#39;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def basic():</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429719312\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">101</em>,\n      in <code class=\"function\">init_db_users</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def init_db_users():</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name1&#34;, &#34;pass1&#34;, &#34;mail1@mail.com&#34;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429719456\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">register_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def register_user(username, password, email, admin=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user = User(username=username, password=password, email=email, admin=admin)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>randomint = str(randrange(100))</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user.books = [Book(book_title=&#34;bookTitle&#34; + randomint, secret_content=&#34;secret for bookTitle&#34; + randomint)]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>db.session.add(new_user)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>db.session.commit()\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def delete_user(username):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>done = User.query.filter_by(username=username).delete()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.session.commit()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429719600\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">538</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.commit()\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def connection(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>execution_options: Optional[_ExecuteOptions] = None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429719744\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1903</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>trans = self._transaction</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if trans is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>trans = self._autobegin_t()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>trans.commit(_to_root=True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def prepare(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>If no transaction is in progress, this method raises an</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429719888\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429720032\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429720176\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1218</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>SessionTransactionState.CLOSED,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self._prepare_impl()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if self._parent is None or self.nested:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for conn, trans, should_commit, autoclose in set(</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._connections.values()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429720320\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429720464\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429720608\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1193</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not self.session._flushing:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for _flush_guard in range(100):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if self.session._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>break</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self.session.flush()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc.FlushError(</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;creating new objects?&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429720752\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4140</em>,\n      in <code class=\"function\">flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._flushing = True</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._flush(objects)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._flushing = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>util.warn(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429720896\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4276</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>transaction.commit()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>with util.safe_reraise():\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>transaction.rollback(_capture_exception=True)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def bulk_save_objects(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>objects: Iterable[object],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429721040\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\"</cite>,\n      line <em class=\"line\">147</em>,\n      in <code class=\"function\">__exit__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span># see #2703 for notes</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if type_ is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>assert exc_value is not None</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise exc_value.with_traceback(exc_tb)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>assert value is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise value.with_traceback(traceback)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429721184\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4237</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._warn_on_events = True</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>flush_context.execute()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._warn_on_events = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.dispatch.after_flush(self, flush_context)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429721328\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">467</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>while set_:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n = set_.pop()</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n.execute_aggregate(self, set_)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rec.execute(self)\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_flush_changes(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>flush().</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429721472\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">644</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>assert mapper is mapper.base_mapper</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def execute(self, uow):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>util.preloaded.orm_persistence.save_obj(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429721616\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">93</em>,\n      in <code class=\"function\">save_obj</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>update,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>_emit_insert_statements(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>base_mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uowtransaction,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>insert,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429721760\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">1188</em>,\n      in <code class=\"function\">_emit_insert_statements</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>statement.values(value_params),</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>result = connection.execute(\n<span class=\"ws\">                        </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429721904\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429722048\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429722192\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429722336\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429722480\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429722624\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429722768\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196429722912\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle74&#39;, &#39;secret for bookTitle74&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/main.py&#34;, line 9, in populate_db\n    User.init_db_users()\n  File &#34;/vampi/models/user_model.py&#34;, line 101, in init_db_users\n    User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n  File &#34;/vampi/models/user_model.py&#34;, line 89, in register_user\n    db.session.commit()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1903, in commit\n    trans.commit(_to_root=True)\n  File &#34;&lt;string&gt;&#34;, line 2, in commit\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1218, in commit\n    self._prepare_impl()\n  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1193, in _prepare_impl\n    self.session.flush()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4140, in flush\n    self._flush(objects)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4276, in _flush\n    with util.safe_reraise():\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4237, in _flush\n    flush_context.execute()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 467, in execute\n    rec.execute(self)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj\n    _emit_insert_statements(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle74&#39;, &#39;secret for bookTitle74&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/main.py\", line 9, in populate_db\n    User.init_db_users()\n  File \"/vampi/models/user_model.py\", line 101, in init_db_users\n    User.register_user(\"admin\", \"pass1\", \"admin@mail.com\", True)\n  File \"/vampi/models/user_model.py\", line 89, in register_user\n    db.session.commit()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1903, in commit\n    trans.commit(_to_root=True)\n  File \"<string>\", line 2, in commit\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1218, in commit\n    self._prepare_impl()\n  File \"<string>\", line 2, in _prepare_impl\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1193, in _prepare_impl\n    self.session.flush()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4140, in flush\n    self._flush(objects)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4276, in _flush\n    with util.safe_reraise():\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\", line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4237, in _flush\n    flush_context.execute()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 467, in execute\n    rec.execute(self)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 93, in save_obj\n    _emit_insert_statements(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle74', 'secret for bookTitle74', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n\n-->\n"
  },
  {
    "path": "/users/v1/login",
    "http_method": "POST",
    "status_code": 200,
    "type": "hit",
    "request_details": "POST /users/v1/login HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\nContent-Type: application/json\r\n\r\n{\n    \"username\":\"name1\",\n    \"password\":\"pass1\"}\r\n",
    "response_data": "HTTP/1.1 200 OK\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:48:26 GMT\r\nContent-Type: application/json\r\nContent-Length: 224\r\nConnection: close\r\n\r\n{\"auth_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3Mzk5NzI5NjYsImlhdCI6MTczOTk3MjkwNiwic3ViIjoibmFtZTEifQ.CtuD-HSR29l6Ln5egUSm1k6jTcQSbKb-7MdSvzcnEDA\", \"message\": \"Successfully logged in.\", \"status\": \"success\"}"
  },
  {
    "path": "/createdb",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /createdb HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:48:26 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 63188\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle63', 'secret for bookTitle63', 2)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>IntegrityError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle63&#39;, &#39;secret for bookTitle63&#39;, 2)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196422983904\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422984048\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196422979296\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422979152\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422978720\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422978864\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422979440\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422979584\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422979008\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422979728\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422979872\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422980016\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/main.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">populate_db</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from app import vuln</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def populate_db():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.drop_all()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.create_all()</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>User.init_db_users()\n<span class=\"ws\">    </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response_text = &#39;{ &#34;message&#34;: &#34;Database populated.&#34; }&#39;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response = Response(response_text, 200, mimetype=&#39;application/json&#39;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def basic():</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422980160\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">100</em>,\n      in <code class=\"function\">init_db_users</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">        </span>return done</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def init_db_users():</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name1&#34;, &#34;pass1&#34;, &#34;mail1@mail.com&#34;, False)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422980304\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">register_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def register_user(username, password, email, admin=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user = User(username=username, password=password, email=email, admin=admin)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>randomint = str(randrange(100))</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user.books = [Book(book_title=&#34;bookTitle&#34; + randomint, secret_content=&#34;secret for bookTitle&#34; + randomint)]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>db.session.add(new_user)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>db.session.commit()\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def delete_user(username):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>done = User.query.filter_by(username=username).delete()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.session.commit()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422980448\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">538</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.commit()\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def connection(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>execution_options: Optional[_ExecuteOptions] = None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422980592\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1903</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>trans = self._transaction</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if trans is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>trans = self._autobegin_t()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>trans.commit(_to_root=True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def prepare(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>If no transaction is in progress, this method raises an</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422980736\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422980880\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422981024\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1218</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>SessionTransactionState.CLOSED,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self._prepare_impl()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if self._parent is None or self.nested:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for conn, trans, should_commit, autoclose in set(</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._connections.values()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422981168\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422981312\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422981456\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1193</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not self.session._flushing:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for _flush_guard in range(100):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if self.session._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>break</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self.session.flush()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc.FlushError(</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;creating new objects?&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422981600\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4140</em>,\n      in <code class=\"function\">flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._flushing = True</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._flush(objects)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._flushing = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>util.warn(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422981744\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4276</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>transaction.commit()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>with util.safe_reraise():\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>transaction.rollback(_capture_exception=True)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def bulk_save_objects(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>objects: Iterable[object],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422981888\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\"</cite>,\n      line <em class=\"line\">147</em>,\n      in <code class=\"function\">__exit__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span># see #2703 for notes</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if type_ is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>assert exc_value is not None</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise exc_value.with_traceback(exc_tb)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>assert value is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise value.with_traceback(traceback)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422982032\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4237</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._warn_on_events = True</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>flush_context.execute()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._warn_on_events = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.dispatch.after_flush(self, flush_context)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422982176\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">467</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>while set_:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n = set_.pop()</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n.execute_aggregate(self, set_)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rec.execute(self)\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_flush_changes(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>flush().</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422982320\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">644</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>assert mapper is mapper.base_mapper</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def execute(self, uow):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>util.preloaded.orm_persistence.save_obj(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422982464\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">93</em>,\n      in <code class=\"function\">save_obj</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>update,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>_emit_insert_statements(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>base_mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uowtransaction,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>insert,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422982608\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">1188</em>,\n      in <code class=\"function\">_emit_insert_statements</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>statement.values(value_params),</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>result = connection.execute(\n<span class=\"ws\">                        </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422982752\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422982896\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422983040\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422983184\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422983328\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422983472\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422983616\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422983760\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle63&#39;, &#39;secret for bookTitle63&#39;, 2)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/main.py&#34;, line 9, in populate_db\n    User.init_db_users()\n  File &#34;/vampi/models/user_model.py&#34;, line 100, in init_db_users\n    User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)\n  File &#34;/vampi/models/user_model.py&#34;, line 89, in register_user\n    db.session.commit()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1903, in commit\n    trans.commit(_to_root=True)\n  File &#34;&lt;string&gt;&#34;, line 2, in commit\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1218, in commit\n    self._prepare_impl()\n  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1193, in _prepare_impl\n    self.session.flush()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4140, in flush\n    self._flush(objects)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4276, in _flush\n    with util.safe_reraise():\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4237, in _flush\n    flush_context.execute()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 467, in execute\n    rec.execute(self)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj\n    _emit_insert_statements(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle63&#39;, &#39;secret for bookTitle63&#39;, 2)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/main.py\", line 9, in populate_db\n    User.init_db_users()\n  File \"/vampi/models/user_model.py\", line 100, in init_db_users\n    User.register_user(\"name2\", \"pass2\", \"mail2@mail.com\", False)\n  File \"/vampi/models/user_model.py\", line 89, in register_user\n    db.session.commit()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1903, in commit\n    trans.commit(_to_root=True)\n  File \"<string>\", line 2, in commit\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1218, in commit\n    self._prepare_impl()\n  File \"<string>\", line 2, in _prepare_impl\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1193, in _prepare_impl\n    self.session.flush()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4140, in flush\n    self._flush(objects)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4276, in _flush\n    with util.safe_reraise():\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\", line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4237, in _flush\n    flush_context.execute()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 467, in execute\n    rec.execute(self)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 93, in save_obj\n    _emit_insert_statements(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle63', 'secret for bookTitle63', 2)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n\n-->\n"
  },
  {
    "path": "/createdb",
    "http_method": "GET",
    "status_code": 500,
    "type": "miss",
    "request_details": "GET /createdb HTTP/1.1\r\nAccept: application/json\r\nHost: vampi:5000\r\n\r\n",
    "response_data": "HTTP/1.1 500 INTERNAL SERVER ERROR\r\nServer: Werkzeug/2.2.3 Python/3.11.11\r\nDate: Wed, 19 Feb 2025 13:48:41 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 63111\r\nConnection: close\r\n\r\n<!doctype html>\n<html lang=en>\n  <head>\n    <title>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle31', 'secret for bookTitle31', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"FU5yuWDTfzBSUZ4huHzF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>IntegrityError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle31&#39;, &#39;secret for bookTitle31&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-140196425501712\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425501856\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n\n<li><div class=\"exc-divider\">The above exception was the direct cause of the following exception:</div>\n<li><div class=\"frame\" id=\"frame-140196430855856\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422990096\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422990528\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422989808\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)\n<span class=\"ws\">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422990240\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()\n<span class=\"ws\">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422990672\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/flask/app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422989952\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\"</cite>,\n      line <em class=\"line\">68</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:  # pragma: no cover</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>@functools.wraps(function)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>def wrapper(*args, **kwargs):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>request = self.api.get_request(*args, **kwargs)</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = function(request)\n<span class=\"ws\">                </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>return self.api.get_response(response, self.mimetype, request)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422990816\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\"</cite>,\n      line <em class=\"line\">149</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>form = coerce_dict(request.form)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.query = self.resolve_query(query)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.path_params = self.resolve_path(path_params)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request.form = self.resolve_form(form)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>response = function(request)\n<span class=\"ws\">            </span>           ^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return wrapper</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422990384\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\"</cite>,\n      line <em class=\"line\">120</em>,\n      in <code class=\"function\">wrapper</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># attempt to provide the request context to the function</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if pass_context_arg_name and (has_kwargs or pass_context_arg_name in arguments):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>kwargs[pass_context_arg_name] = request.context</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return function(**kwargs)\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return wrapper</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422991104\">\n  <h4>File <cite class=\"filename\">\"/vampi/api_views/main.py\"</cite>,\n      line <em class=\"line\">9</em>,\n      in <code class=\"function\">populate_db</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span>from app import vuln</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span>def populate_db():</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.drop_all()</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>db.create_all()</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>User.init_db_users()\n<span class=\"ws\">    </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response_text = &#39;{ &#34;message&#34;: &#34;Database populated.&#34; }&#39;</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>response = Response(response_text, 200, mimetype=&#39;application/json&#39;)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>return response</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\"></span>def basic():</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422990960\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">101</em>,\n      in <code class=\"function\">init_db_users</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def init_db_users():</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name1&#34;, &#34;pass1&#34;, &#34;mail1@mail.com&#34;, False)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>User.register_user(&#34;name2&#34;, &#34;pass2&#34;, &#34;mail2@mail.com&#34;, False)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422991248\">\n  <h4>File <cite class=\"filename\">\"/vampi/models/user_model.py\"</cite>,\n      line <em class=\"line\">89</em>,\n      in <code class=\"function\">register_user</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>def register_user(username, password, email, admin=False):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user = User(username=username, password=password, email=email, admin=admin)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>randomint = str(randrange(100))</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>new_user.books = [Book(book_title=&#34;bookTitle&#34; + randomint, secret_content=&#34;secret for bookTitle&#34; + randomint)]</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>db.session.add(new_user)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>db.session.commit()\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>@staticmethod</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def delete_user(username):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>done = User.query.filter_by(username=username).delete()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.session.commit()</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422991392\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\"</cite>,\n      line <em class=\"line\">538</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>:ref:`asyncio_orm_avoid_lazyloads`</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;  # noqa: E501</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self._proxied.commit()\n<span class=\"ws\">        </span>       ^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def connection(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>bind_arguments: Optional[_BindArguments] = None,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>execution_options: Optional[_ExecuteOptions] = None,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422991536\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1903</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>trans = self._transaction</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if trans is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>trans = self._autobegin_t()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>trans.commit(_to_root=True)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def prepare(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Prepare the current transaction in progress for two phase commit.</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>If no transaction is in progress, this method raises an</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196422991680\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425498688\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425498832\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1218</em>,\n      in <code class=\"function\">commit</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>SessionTransactionState.CLOSED,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def commit(self, _to_root: bool = False) -&gt; None:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._state is not SessionTransactionState.PREPARED:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>with self._expect_state(SessionTransactionState.PREPARED):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self._prepare_impl()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>if self._parent is None or self.nested:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>for conn, trans, should_commit, autoclose in set(</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._connections.values()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>):</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425498976\">\n  <h4>File <cite class=\"filename\">\"&lt;string&gt;\"</cite>,\n      line <em class=\"line\">2</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source \"></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425499120\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\"</cite>,\n      line <em class=\"line\">137</em>,\n      in <code class=\"function\">_go</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._current_fn = fn</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._next_state = _StateChangeStates.CHANGE_IN_PROGRESS</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>ret_value = fn(self, *arg, **kw)\n<span class=\"ws\">                </span>            ^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>if self._state is expect_state:</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>return ret_value</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425499264\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">1193</em>,\n      in <code class=\"function\">_prepare_impl</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if not self.session._flushing:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for _flush_guard in range(100):</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if self.session._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>break</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>self.session.flush()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc.FlushError(</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;Over 100 subsequent flushes have occurred within &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;session.commit() - is an after_flush() hook &#34;</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>&#34;creating new objects?&#34;</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425499408\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4140</em>,\n      in <code class=\"function\">flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self._is_clean():</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._flushing = True</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._flush(objects)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._flushing = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _flush_warning(self, method: Any) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>util.warn(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425499552\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4276</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>self.dispatch.after_flush_postexec(self, flush_context)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>transaction.commit()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>with util.safe_reraise():\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>transaction.rollback(_capture_exception=True)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def bulk_save_objects(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>objects: Iterable[object],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425499696\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\"</cite>,\n      line <em class=\"line\">147</em>,\n      in <code class=\"function\">__exit__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span># see #2703 for notes</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if type_ is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>exc_type, exc_value, exc_tb = self._exc_info</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>assert exc_value is not None</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>raise exc_value.with_traceback(exc_tb)\n<span class=\"ws\">            </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self._exc_info = None  # remove potential circular references</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>assert value is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise value.with_traceback(traceback)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425499840\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\"</cite>,\n      line <em class=\"line\">4237</em>,\n      in <code class=\"function\">_flush</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>flush_context.transaction = transaction = self._autobegin_t()._begin()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>self._warn_on_events = True</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>flush_context.execute()\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self._warn_on_events = False</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.dispatch.after_flush(self, flush_context)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425499984\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">467</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                </span>while set_:</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n = set_.pop()</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>n.execute_aggregate(self, set_)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for rec in topological.sort(self.dependencies, postsort_actions):</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rec.execute(self)\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_flush_changes(self) -&gt; None:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Mark processed objects as clean / deleted after a successful</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>flush().</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425500128\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\"</cite>,\n      line <em class=\"line\">644</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>self.sort_key = (&#34;SaveUpdateAll&#34;, mapper._sort_key)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>assert mapper is mapper.base_mapper</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>@util.preload_module(&#34;sqlalchemy.orm.persistence&#34;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def execute(self, uow):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>util.preloaded.orm_persistence.save_obj(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>self.mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow.states_for_mapper_hierarchy(self.mapper, False, False),</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uow,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425500272\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">93</em>,\n      in <code class=\"function\">save_obj</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>update,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>_emit_insert_statements(\n<span class=\"ws\">        </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>base_mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>uowtransaction,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>mapper,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>table,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>insert,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425500416\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\"</cite>,\n      line <em class=\"line\">1188</em>,\n      in <code class=\"function\">_emit_insert_statements</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>statement.values(value_params),</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">                    </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">                        </span>result = connection.execute(\n<span class=\"ws\">                        </span>         </pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>statement,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>params,</pre>\n<pre class=\"line after\"><span class=\"ws\">                            </span>execution_options=execution_options,</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425500560\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1414</em>,\n      in <code class=\"function\">execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>meth = statement._execute_on_connection</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except AttributeError as err:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(statement) from err</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return meth(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>execution_options or NO_OPTIONS,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425500704\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\"</cite>,\n      line <em class=\"line\">489</em>,\n      in <code class=\"function\">_execute_on_connection</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>execution_options: CoreExecuteOptionsParameter,</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>) -&gt; Result[Any]:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>if self.supports_execution:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if TYPE_CHECKING:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert isinstance(self, Executable)</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return connection._execute_clauseelement(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self, distilled_params, execution_options</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>raise exc.ObjectNotExecutableError(self)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425500848\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1638</em>,\n      in <code class=\"function\">_execute_clauseelement</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>column_keys=keys,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>for_executemany=for_executemany,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>schema_translate_map=schema_translate_map,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>linting=self.dialect.compiler_linting | compiler.WARN_LINTING,</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>)</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>ret = self._execute_context(\n<span class=\"ws\">        </span>      </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>dialect.execution_ctx_cls._init_compiled,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>compiled_sql,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>distilled_parameters,</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>execution_options,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425500992\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1842</em>,\n      in <code class=\"function\">_execute_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>return self._exec_insertmany_context(</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>dialect,</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>else:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>return self._exec_single_context(\n<span class=\"ws\">            </span>       </pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>dialect, context, statement, parameters</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def _exec_single_context(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425501136\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1983</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>context.post_exec()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>result = context._setup_result_proxy()</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except BaseException as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>self._handle_dbapi_exception(\n<span class=\"ws\">            </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>e, str_statement, effective_parameters, cursor, context</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return result</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425501280\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">2325</em>,\n      in <code class=\"function\">_handle_dbapi_exception</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if newraise:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>raise newraise.with_traceback(exc_info[2]) from e</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>elif should_wrap:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>assert sqlalchemy_exception is not None</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n<span class=\"ws\">                </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>assert exc_info[1] is not None</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise exc_info[1].with_traceback(exc_info[2])</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>del self._reentrant_error</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425501424\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\"</cite>,\n      line <em class=\"line\">1964</em>,\n      in <code class=\"function\">_exec_single_context</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">                            </span>context,</pre>\n<pre class=\"line before\"><span class=\"ws\">                        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>evt_handled = True</pre>\n<pre class=\"line before\"><span class=\"ws\">                            </span>break</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>if not evt_handled:</pre>\n<pre class=\"line current\"><span class=\"ws\">                    </span>self.dialect.do_execute(\n<span class=\"ws\">                    </span>^</pre>\n<pre class=\"line after\"><span class=\"ws\">                        </span>cursor, str_statement, effective_parameters, context</pre>\n<pre class=\"line after\"><span class=\"ws\">                    </span>)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>if self._has_events or self.engine._has_events:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>self.dispatch.after_cursor_execute(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-140196425501568\">\n  <h4>File <cite class=\"filename\">\"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\"</cite>,\n      line <em class=\"line\">747</em>,\n      in <code class=\"function\">do_execute</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_executemany(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>cursor.executemany(statement, parameters)</pre>\n<pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>def do_execute(self, cursor, statement, parameters, context=None):</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>cursor.execute(statement, parameters)\n<span class=\"ws\">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def do_execute_no_params(self, cursor, statement, context=None):</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>cursor.execute(statement)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def is_disconnect(self, e, connection, cursor):</pre></div>\n</div>\n</ul>\n  <blockquote>sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle31&#39;, &#39;secret for bookTitle31&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/flask/app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py&#34;, line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py&#34;, line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py&#34;, line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &#34;/vampi/api_views/main.py&#34;, line 9, in populate_db\n    User.init_db_users()\n  File &#34;/vampi/models/user_model.py&#34;, line 101, in init_db_users\n    User.register_user(&#34;admin&#34;, &#34;pass1&#34;, &#34;admin@mail.com&#34;, True)\n  File &#34;/vampi/models/user_model.py&#34;, line 89, in register_user\n    db.session.commit()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py&#34;, line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1903, in commit\n    trans.commit(_to_root=True)\n  File &#34;&lt;string&gt;&#34;, line 2, in commit\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1218, in commit\n    self._prepare_impl()\n  File &#34;&lt;string&gt;&#34;, line 2, in _prepare_impl\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py&#34;, line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 1193, in _prepare_impl\n    self.session.flush()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4140, in flush\n    self._flush(objects)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4276, in _flush\n    with util.safe_reraise():\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py&#34;, line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py&#34;, line 4237, in _flush\n    flush_context.execute()\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 467, in execute\n    rec.execute(self)\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py&#34;, line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 93, in save_obj\n    _emit_insert_statements(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py&#34;, line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1414, in execute\n    return meth(\n           ^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py&#34;, line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py&#34;, line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File &#34;/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py&#34;, line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: (&#39;bookTitle31&#39;, &#39;secret for bookTitle31&#39;, 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlite3.IntegrityError: UNIQUE constraint failed: books.book_title\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n               ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n         ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/flask/app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/decorator.py\", line 68, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/uri_parsing.py\", line 149, in wrapper\n    response = function(request)\n               ^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/connexion/decorators/parameter.py\", line 120, in wrapper\n    return function(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File \"/vampi/api_views/main.py\", line 9, in populate_db\n    User.init_db_users()\n  File \"/vampi/models/user_model.py\", line 101, in init_db_users\n    User.register_user(\"admin\", \"pass1\", \"admin@mail.com\", True)\n  File \"/vampi/models/user_model.py\", line 89, in register_user\n    db.session.commit()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/scoping.py\", line 538, in commit\n    return self._proxied.commit()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1903, in commit\n    trans.commit(_to_root=True)\n  File \"<string>\", line 2, in commit\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1218, in commit\n    self._prepare_impl()\n  File \"<string>\", line 2, in _prepare_impl\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/state_changes.py\", line 137, in _go\n    ret_value = fn(self, *arg, **kw)\n                ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 1193, in _prepare_impl\n    self.session.flush()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4140, in flush\n    self._flush(objects)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4276, in _flush\n    with util.safe_reraise():\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py\", line 147, in __exit__\n    raise exc_value.with_traceback(exc_tb)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/session.py\", line 4237, in _flush\n    flush_context.execute()\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 467, in execute\n    rec.execute(self)\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/unitofwork.py\", line 644, in execute\n    util.preloaded.orm_persistence.save_obj(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 93, in save_obj\n    _emit_insert_statements(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/orm/persistence.py\", line 1188, in _emit_insert_statements\n    result = connection.execute(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1414, in execute\n    return meth(\n           ^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/sql/elements.py\", line 489, in _execute_on_connection\n    return connection._execute_clauseelement(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1638, in _execute_clauseelement\n    ret = self._execute_context(\n          ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1842, in _execute_context\n    return self._exec_single_context(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1983, in _exec_single_context\n    self._handle_dbapi_exception(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 2325, in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py\", line 1964, in _exec_single_context\n    self.dialect.do_execute(\n  File \"/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py\", line 747, in do_execute\n    cursor.execute(statement, parameters)\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: books.book_title\n[SQL: INSERT INTO books (book_title, secret_content, user_id) VALUES (?, ?, ?)]\n[parameters: ('bookTitle31', 'secret for bookTitle31', 3)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)\n\n\n-->\n"
  }
];