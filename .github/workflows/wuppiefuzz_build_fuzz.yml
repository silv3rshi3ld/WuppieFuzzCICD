name: WuppieFuzz Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_fuzz:
    runs-on: self-hosted  # Use 'ubuntu-latest' if you don't have a self-hosted runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to v4-beta for Node.js 20 support

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          # Update package lists and install Docker Compose
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version  # Verify the installation

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Use Docker Buildx for advanced multi-platform builds

      # Step 4: Build and run services with Docker Compose
      - name: Build and run services with Docker Compose
        env:
          # Use secrets stored in GitHub to provide secure access to SMTP credentials
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
        run: |
          # Build and start the Docker services defined in the Docker Compose file
          docker-compose up -d --build

      # Step 5: Wait for services to start
      - name: Wait for services to start
        run: sleep 15  # Wait for 15 seconds to allow services to initialize

      # Step 6: Test API Connectivity
      - name: Test API Connectivity
        run: |
          # Test if the API service is running by sending a HEAD request
          curl -I http://localhost:3001

      # Step 7: Install Rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable # Use the stable Rust toolchain for building WuppieFuzz

      # Step 8: Install dependencies for WuppieFuzz
      - name: Install dependencies for WuppieFuzz
        run: |
          # Update package lists and install necessary dependencies for building WuppieFuzz
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      # Step 9: Clone WuppieFuzz repository
      - name: Clone WuppieFuzz repository
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git # Clone the WuppieFuzz Git repository

      # Step 10: Build WuppieFuzz
      - name: Build WuppieFuzz
        run: |
          # Build WuppieFuzz in release mode
          cd WuppieFuzz
          cargo build --release
          cd ..

      # Step 11: Add WuppieFuzz to PATH
      - name: Add WuppieFuzz to PATH
        run: |
          # Add the WuppieFuzz binary to the system PATH for easy execution
          echo "${{ github.workspace }}/WuppieFuzz/target/release" >> $GITHUB_PATH

      # Step 12: Generate initial corpus
      - name: Generate initial corpus
        run: wuppiefuzz output-corpus --openapi-spec openapi.yaml corpus_directory # Generate an initial fuzzing corpus

      # Step 13: Run WuppieFuzz fuzzing
      - name: Run WuppieFuzz
        env:
          RUST_BACKTRACE: 1 # Enable backtrace for debugging any errors
        run: |
          # Run the WuppieFuzz fuzzer with the specified parameters
          wuppiefuzz fuzz --report --log-level info --initial-corpus corpus_directory \
          --timeout 700 openapi.yaml

      # Step 14: Upload WuppieFuzz report
      - name: Upload WuppieFuzz report
        uses: actions/upload-artifact@v4  # Upload the generated report as an artifact
        with:
          name: wuppiefuzz-report
          path: reports/

      # Step 15: Upload report.db artifact
      - name: Upload report.db
        uses: actions/upload-artifact@v4 # Upload the report database as an artifact for later analysis
        with:
          name: report-db
          path: reports/report.db

      # Step 16: Set up Grafana with SQLite plugin using Docker Compose
      - name: Set up Grafana
        run: |
          # Create a Docker Compose file to set up Grafana with the SQLite data source plugin
          cat <<EOF > docker-compose-grafana.yml
          version: '3'
          services:
            grafana:
              image: grafana/grafana:latest
              ports:
                - "3000:3000" # Expose Grafana on port 3000
              volumes:
                - ./reports/report.db:/var/lib/grafana/data/report.db # Mount the report.db file for Grafana to access
                - ./grafana.ini:/etc/grafana/grafana.ini # Use a custom Grafana configuration
              environment:
                - GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }} # Set Grafana admin password securely
                - GF_INSTALL_PLUGINS=grafana-sqlite-datasource # Install the SQLite plugin for Grafana
          EOF

          # Start Grafana using Docker Compose
          docker-compose -f docker-compose-grafana.yml up -d

      # Step 17: Wait for Grafana to start
      - name: Wait for Grafana to start
        run: sleep 15 # Wait for 15 seconds to ensure Grafana is ready

      # Step 18: Provision Grafana dashboards
      - name: Provision Grafana dashboards
        run: |
          # Copy the pre-configured dashboards and data source settings into the Grafana container
          docker cp dashboards.yaml grafana:/etc/grafana/provisioning/dashboards/
          docker cp datasources.yaml grafana:/etc/grafana/provisioning/datasources/

      # Step 19: Stop and remove Docker containers
      - name: Stop and remove Docker containers
        if: always() # Always run this step, even if previous steps fail
        run: docker-compose down # Stop and remove all running Docker containers
