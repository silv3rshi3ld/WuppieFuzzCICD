name: WuppieFuzz CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_fuzz:
    runs-on: self-hosted  # Gebruik 'ubuntu-latest' als je geen self-hosted runner hebt

    steps:
      # Stap 1: Checkout de repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Stap 2: Installeer Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version

      # Stap 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Stap 4: Build en run services met Docker Compose
      - name: Build and run services with Docker Compose
        env:
          SMTP_USER: 'dummy_user'
          SMTP_PASS: 'dummy_pass'
          SMTP_HOST: 'smtp.example.com'
          SMTP_PORT: '587'
        run: |
          docker-compose up -d --build

      # Stap 5: Wacht tot services zijn gestart
      - name: Wait for services to start
        run: sleep 15

      # Stap 6: Test API-connectiviteit
      - name: Test API Connectivity
        run: |
          curl -I http://localhost:3001

      # Stap 7: Installeer Rust toolchain
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Stap 8: Installeer afhankelijkheden voor WuppieFuzz
      - name: Install dependencies for WuppieFuzz
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      # Stap 9: Clone WuppieFuzz repository
      - name: Clone WuppieFuzz repository
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      # Stap 10: Build WuppieFuzz
      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release
          cd ..

      # Stap 11: Voeg WuppieFuzz toe aan PATH
      - name: Add WuppieFuzz to PATH
        run: echo "${{ github.workspace }}/WuppieFuzz/target/release" >> $GITHUB_PATH

      # Stap 12: Genereer initiÃ«le corpus
      - name: Generate initial corpus
        run: wuppiefuzz output-corpus --openapi-spec openapi.yaml corpus_directory

      # Stap 13: Voer WuppieFuzz fuzzing uit
      - name: Run WuppieFuzz
        env:
          RUST_BACKTRACE: 1
        run: |
          wuppiefuzz fuzz --report --log-level info --initial-corpus corpus_directory \
          --timeout 300 openapi.yaml

      # Stap 14: Upload WuppieFuzz rapport
      - name: Upload WuppieFuzz report
        uses: actions/upload-artifact@v3
        with:
          name: wuppiefuzz-report
          path: reports/

      # Stap 15: Stop en verwijder Docker containers
      - name: Stop and remove Docker containers
        if: always()
        run: docker-compose down
