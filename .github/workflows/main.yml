name: WuppieFuzz CI Pipeline

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main  # Trigger the workflow on pull request to the main branch

jobs:
  build_and_fuzz:
    runs-on: self-hosted  # Use the self-hosted

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3  # Check out the repository code

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'  # Use Node.js version 14

      # Step 3: Install MongoDB
      - name: Install MongoDB
        uses: supercharge/mongodb-github-action@1.8.0
        with:
          mongodb-version: '5.0'  # Use MongoDB version 5.0

      # Step 4: Build and run the server
      - name: Build and run the server
        env:
          # Use dummy SMTP credentials or set actual credentials in repository secrets
          SMTP_USER: 'dummy_user'
          SMTP_PASS: 'dummy_pass'
          SMTP_HOST: 'smtp.example.com'
          SMTP_PORT: '587'
        run: |
          cd server
          npm install
          npm install migrate-mongo --save-dev
          # Set up SMTP credentials
          echo "smtp_user=$SMTP_USER" > smtp_config.list
          echo "smtp_pass=$SMTP_PASS" >> smtp_config.list
          echo "smtp_host=$SMTP_HOST" >> smtp_config.list
          echo "smtp_port=$SMTP_PORT" >> smtp_config.list
          # Run database migrations
          npm run db:up
          # Start the server in the background
          nohup npm start &
          cd ..

      # Step 5: Wait for server to start
      - name: Wait for server to start
        run: sleep 15  # Wait for the server to start

      # Step 6: Install Rust toolchain
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Step 7: Clone WuppieFuzz repository
      - name: Clone WuppieFuzz repository
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      # Step 8: Build WuppieFuzz
      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release
          cd ..

      # Step 9: Add WuppieFuzz to PATH
      - name: Add WuppieFuzz to PATH
        run: echo "${{ github.workspace }}/WuppieFuzz/target/release" >> $GITHUB_PATH

      # Step 10: Prepare OpenAPI specification
      - name: Prepare OpenAPI specification
        run: |
          cp server/swagger.yaml openapi.yaml

      # Step 11: Generate initial corpus
      - name: Generate initial corpus
        run: wuppiefuzz output-corpus --openapi-spec openapi.yaml corpus_directory

      # Step 12: Run WuppieFuzz fuzzing
      - name: Run WuppieFuzz
        run: |
          wuppiefuzz fuzz --report --log-level info --initial-corpus corpus_directory --timeout 300 --openapi-spec openapi.yaml --base-url http://localhost:3001

      # Step 13: Upload WuppieFuzz report
      - name: Upload WuppieFuzz report
        uses: actions/upload-artifact@v3  # Upload the WuppieFuzz report as an artifact
        with:
          name: wuppiefuzz-report
          path: reports/

      # Step 14: Stop server and cleanup
      - name: Stop server and cleanup
        if: always()  # Ensure this step runs even if previous steps fail
        run: |
          pkill -f 'node' || true  # Stop any running Node.js processes
