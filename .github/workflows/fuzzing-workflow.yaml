name: Swarm Fuzzing Workflow

on:
  push:
    branches: [SingleWorker]
  workflow_dispatch:
    inputs:
      restler_time:
        description: 'RESTler time (hours)'
        type: number
        default: 1
      wuppie_time:
        description: 'WuppieFuzz time (mins)'
        type: number
        default: 60
      evomaster_time:
        description: 'EvoMaster time (mins)'
        type: number
        default: 10

env:
  STACK_PREFIX: fuzz-${{ github.run_id }}
  NETWORK_NAME: fuzz-net-${{ github.run_id }}
  VOLUME_NAME: results-${{ github.run_id }}
  CORPUS_DIR: ./corpus
  OPENAPI_SPEC: /openapi3.yml  # Update all references
  HOST_INTERFACE: ens18  # Explicit interface name

jobs:
  swarm_init:
    runs-on: [self-hosted, manager-runner]
    outputs:
      swarm_token: ${{ steps.get-token.outputs.token }}
      manager_ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v4
      - name: Initialize Swarm
        run: |
          # Leave if in wrong swarm
          CURRENT_SWARM=$(docker info --format '{{.Swarm.NodeID}}')
          if [ -n "$CURRENT_SWARM" ]; then
            echo "Leaving existing swarm..."
            docker swarm leave --force || true
            sleep 5
          fi

          # Initialize new swarm
          HOST_IP=$(ip -4 addr show ens18 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
          if [ -z "$HOST_IP" ]; then
            echo "ERROR: No IP found on ens18!"
            ip addr show
            exit 1
          fi

          docker swarm init \
            --advertise-addr ${HOST_IP}:2377 \
            --default-addr-pool 10.30.0.0/16

          # Verify swarm initialization
          if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q "active"; then
            echo "ERROR: Swarm initialization failed!"
            docker info
            exit 1
          fi

          # Store join tokens
          docker swarm join-token -q worker > swarm_token.txt
          echo $HOST_IP > manager_ip.txt

      - name: Extract swarm token
        id: get-token
        run: echo "token=$(cat swarm_token.txt)" >> $GITHUB_OUTPUT
      - name: Get manager IP
        id: get-ip
        run: echo "ip=$(cat manager_ip.txt)" >> $GITHUB_OUTPUT

  swarm_join:
    needs: swarm_init
    runs-on: [self-hosted, worker-runner]
    steps:
      - name: Join Swarm cluster
        run: |
          # Check if already in correct swarm
          CURRENT_MANAGER=$(docker info --format '{{.Swarm.RemoteManagers}}' | grep -o ${{ needs.swarm_init.outputs.manager_ip }} || true)
          if [ -z "$CURRENT_MANAGER" ]; then
            echo "Joining new swarm..."
            docker swarm leave --force || true
            sleep 5
            
            # Join swarm with retry
            for i in {1..3}; do
              if docker swarm join \
                --token ${{ needs.swarm_init.outputs.swarm_token }} \
                ${{ needs.swarm_init.outputs.manager_ip }}:2377; then
                break
              fi
              echo "Join attempt $i failed, retrying..."
              sleep 5
            done

            # Verify join success
            if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q "active"; then
              echo "ERROR: Failed to join swarm!"
              docker info
              exit 1
            fi
          else
            echo "Already part of correct swarm"
            # Verify connection is healthy
            if ! docker node ls &>/dev/null; then
              echo "ERROR: Node connection is unhealthy!"
              exit 1
            fi
          fi

  build_images:
    needs: [swarm_init, swarm_join]
    runs-on: [self-hosted, manager-runner]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push images
        run: |
          # Build with unified OpenAPI spec
          docker build -t ghcr.io/your-repo/vampi:latest \
            --build-arg OPENAPI_SPEC=services/vampi/openapi_specs/openapi3.yml \
            -f services/vampi/Dockerfile .
          
          # Other builds remain similar but reference unified spec
          docker build -t ghcr.io/your-repo/restler:latest -f services/restler/Dockerfile.restler .
          docker build -t ghcr.io/your-repo/evomaster:latest -f services/evomaster/Dockerfile.evomaster .
          docker build -t ghcr.io/your-repo/wuppiefuzz:latest -f services/wuppiefuzz/Dockerfile.wuppiefuzz .
          
          docker push ghcr.io/your-repo/vampi:latest
          docker push ghcr.io/your-repo/restler:latest
          docker push ghcr.io/your-repo/evomaster:latest
          docker push ghcr.io/your-repo/wuppiefuzz:latest

  prepare_environment:
    needs: build_images
    runs-on: [self-hosted, manager-runner]
    steps:
      - uses: actions/checkout@v4
      - name: Create shared resources
        run: |
          mkdir -p ${{ env.CORPUS_DIR }}
          echo "admin:admin" > ${{ env.CORPUS_DIR }}/auth.yaml
          docker config create openapi-config services/vampi/openapi_specs/openapi3.yml

  deploy_services:
    needs: [build_images, prepare_environment]
    runs-on: [self-hosted, manager-runner]
    strategy:
      matrix:
        tool: [restler, wuppiefuzz, evomaster]
    steps:
      - uses: actions/checkout@v4
      - name: Deploy service stack
        env:
          SERVICE_NAME: ${{ matrix.tool }}-fuzzer
        run: |
          # Create service with health check
          docker service create \
            --name vampi-${{ matrix.tool }} \
            --network ${{ env.NETWORK_NAME }} \
            --replicas 1 \
            --health-cmd "curl -f http://localhost:5000/health || exit 1" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 3 \
            -e vulnerable=1 \
            ghcr.io/your-repo/vampi:latest

          # Wait for VAmPI readiness
          while [ $(docker service ps vampi-${{ matrix.tool }} --format '{{.CurrentState}}' | grep Running | wc -l) -lt 1 ]; do
            sleep 5
          done

          case "${{ matrix.tool }}" in
            restler)
              docker service create \
                --name $SERVICE_NAME \
                --network ${{ env.NETWORK_NAME }} \
                --config source=openapi-config,target=/openapi3.yml \
                -e TARGET_URL=http://vampi-${{ matrix.tool }}:5000 \
                -e FUZZ_TIME_BUDGET="${{ github.event.inputs.restler_time }}" \
                -e RESTLER_TELEMETRY_OPTOUT=1 \
                --mount type=volume,src=${{ env.VOLUME_NAME }},dst=/results \
                ghcr.io/your-repo/restler:latest
              ;;

            wuppiefuzz)
              docker service create \
                --name $SERVICE_NAME \
                --network ${{ env.NETWORK_NAME }} \
                --config source=openapi-config,target=/openapi3.yml \
                -e RUST_LOG=info \
                -e AUTH_FILE=/corpus/auth.yaml \
                --mount type=volume,src=${{ env.VOLUME_NAME }},dst=/reports \
                --mount type=bind,src=${{ github.workspace }}/${{ env.CORPUS_DIR }},dst=/corpus,ro \
                ghcr.io/your-repo/wuppiefuzz:latest \
                fuzz \
                --report \
                --log-level info \
                --initial-corpus /corpus \
                --timeout ${{ github.event.inputs.wuppie_time }} \
                --authentication /corpus/auth.yaml \
                ${{ env.OPENAPI_SPEC }}
              ;;

            evomaster)
              docker service create \
                --name $SERVICE_NAME \
                --network ${{ env.NETWORK_NAME }} \
                --config source=openapi-config,target=/openapi3.yml \
                -e TARGET_URL=http://vampi-${{ matrix.tool }}:5000 \
                -e TIME_BUDGET="${{ github.event.inputs.evomaster_time }}" \
                --mount type=volume,src=${{ env.VOLUME_NAME }},dst=/results \
                ghcr.io/your-repo/evomaster:latest
              ;;
          esac

  monitor_and_collect:
    needs: deploy_services
    runs-on: [self-hosted, manager-runner]
    timeout-minutes: 120
    steps:
      - name: Wait for completion
        run: |
          for tool in restler wuppiefuzz evomaster; do
            docker service ps ${tool}-fuzzer --format '{{.CurrentState}}' | grep "Complete"
            while [ $? -ne 0 ]; do
              sleep 30
              docker service ps ${tool}-fuzzer --format '{{.CurrentState}}' | grep "Complete"
            done
          done
      - name: Package results
        run: |
          mkdir -p ./artifacts
          docker run --rm -v ${{ env.VOLUME_NAME }}:/data -v $(pwd)/artifacts:/output \
            alpine sh -c "apk add zip && zip -r /output/results-${{ github.run_id }}.zip /data"
      - uses: actions/upload-artifact@v4
        with:
          name: fuzzing-results
          path: ./artifacts/results-${{ github.run_id }}.zip

  cleanup:
    needs: monitor_and_collect
    if: always()
    runs-on: [self-hosted, manager-runner]
    steps:
      - name: Remove stack resources
        run: |
          docker service rm $(docker service ls -q --filter name=fuzz-) || true
          docker config rm openapi-config || true
          docker network rm ${{ env.NETWORK_NAME }} || true
          docker volume rm ${{ env.VOLUME_NAME }} || true
          docker swarm leave --force || true
