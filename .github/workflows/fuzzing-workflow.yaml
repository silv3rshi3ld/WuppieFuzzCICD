name: Parallel API Fuzzing

on:
  workflow_dispatch:
    inputs:
      restler_time:
        description: 'RESTler time (hours)'
        type: number
        default: 1
      wuppie_time:
        description: 'WuppieFuzz time (mins)'
        type: number
        default: 60
      evomaster_time:
        description: 'EvoMaster time (mins)'
        type: number
        default: 10

env:
  REGISTRY_PORT: 5000
  BASE_DIR: ${{ github.workspace }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup_registry:
    runs-on: self-hosted
    outputs:
      registry_name: ${{ steps.set-registry.outputs.name }}
    steps:
      - name: Configure unique registry
        id: set-registry
        run: |
          REGISTRY_NAME=registry-${{ github.run_id }}
          echo "name=$REGISTRY_NAME" >> $GITHUB_OUTPUT
          
          docker rm -f $REGISTRY_NAME || true
          docker run -d \
            -p ${{ env.REGISTRY_PORT }}:5000 \
            --name $REGISTRY_NAME \
            --rm \
            registry:2
          sleep 5

  build_images:
    needs: setup_registry
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Build and push images
        run: |
          # Build VAmPI
          docker build -t localhost:${{ env.REGISTRY_PORT }}/vampi \
            ${{ env.BASE_DIR }}/services/vampi
          docker push localhost:${{ env.REGISTRY_PORT }}/vampi

          # Build RESTler
          docker build -t localhost:${{ env.REGISTRY_PORT }}/restler \
            -f ${{ env.BASE_DIR }}/services/restler/Dockerfile.restler \
            ${{ env.BASE_DIR }}/services/restler
          docker push localhost:${{ env.REGISTRY_PORT }}/restler

          # Build EvoMaster
          docker build -t localhost:${{ env.REGISTRY_PORT }}/evomaster \
            -f ${{ env.BASE_DIR }}/services/evomaster/Dockerfile.evomaster \
            ${{ env.BASE_DIR }}/services/evomaster
          docker push localhost:${{ env.REGISTRY_PORT }}/evomaster

          # Build WuppieFuzz
          docker build -t localhost:${{ env.REGISTRY_PORT }}/wuppiefuzz \
            -f ${{ env.BASE_DIR }}/services/wuppiefuzz/Dockerfile.wuppiefuzz \
            ${{ env.BASE_DIR }}/services/wuppiefuzz
          docker push localhost:${{ env.REGISTRY_PORT }}/wuppiefuzz

  deploy_vampis:
    needs: [setup_registry, build_images]
    runs-on: self-hosted
    strategy:
      matrix:
        target: [restler, wuppiefuzz, evomaster]
    outputs:
      vamp_ip_${{ matrix.target }}: ${{ steps.get-ip.outputs.ip }}
    steps:
      - name: Create isolated network
        id: create-network
        run: |
          NETWORK_NAME=${{ matrix.target }}_network_${{ github.run_id }}
          docker network create $NETWORK_NAME
          echo "network=$NETWORK_NAME" >> $GITHUB_OUTPUT

      - name: Launch VAmPI instance
        id: launch-vampi
        run: |
          VAMPI_NAME=vampi-${{ matrix.target }}_${{ github.run_id }}
          docker run -d \
            --name $VAMPI_NAME \
            --network ${{ steps.create-network.outputs.network }} \
            -e vulnerable=1 \
            localhost:${{ env.REGISTRY_PORT }}/vampi

      - name: Verify VAmPI health
        run: |
          VAMPI_NAME=vampi-${{ matrix.target }}_${{ github.run_id }}
          for i in {1..30}; do
            if docker exec $VAMPI_NAME curl -s http://localhost:5000/health > /dev/null; then
              echo "VAmPI instance is healthy!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "VAmPI instance failed to become healthy"
              exit 1
            fi
            echo "Waiting for VAmPI... (attempt $i/30)"
            sleep 2
          done

      - name: Get container IP
        id: get-ip
        run: |
          IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' \
            vampi-${{ matrix.target }}_${{ github.run_id }})
          echo "ip=$IP" >> $GITHUB_OUTPUT

  run_fuzzers:
    needs: 
      - setup_registry
      - deploy_vampis
    runs-on: self-hosted
    strategy:
      matrix:
        fuzzer: [restler, wuppiefuzz, evomaster]
    steps:
      - uses: actions/checkout@v4

      - name: Create results directory
        run: mkdir -p fuzzing_results/${{ matrix.fuzzer }}

      - name: Run RESTler
        if: matrix.fuzzer == 'restler'
        env:
          TARGET_IP: ${{ needs.deploy_vampis.outputs.vamp_ip_restler }}
        run: |
          docker run --rm \
            --network restler_network_${{ github.run_id }} \
            -v ${{ github.workspace }}/fuzzing_results/restler:/workspace/output \
            -v ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml:/workspace/openapi3.yml:ro \
            -v ${{ env.BASE_DIR }}/services/restler/config:/workspace/config:ro \
            -e TARGET_IP=${{ env.TARGET_IP }} \
            -e TARGET_PORT=5000 \
            -e RUN_FUZZ_LEAN=true \
            -e RUN_FUZZ=true \
            -e FUZZ_LEAN_TIME_BUDGET=${{ github.event.inputs.restler_time * 0.25 }} \
            -e FUZZ_TIME_BUDGET=${{ github.event.inputs.restler_time * 0.75 }} \
            localhost:${{ env.REGISTRY_PORT }}/restler

      - name: Run WuppieFuzz
        if: matrix.fuzzer == 'wuppiefuzz'
        env:
          TARGET_URL: http://${{ needs.deploy_vampis.outputs.vamp_ip_wuppiefuzz }}:5000
        run: |
          docker run --rm \
            --network wuppiefuzz_network_${{ github.run_id }} \
            -v ${{ github.workspace }}/fuzzing_results/wuppiefuzz:/wuppiefuzz/reports \
            -v ${{ env.BASE_DIR }}/services/vampi/openapi_specs:/specs:ro \
            localhost:${{ env.REGISTRY_PORT }}/wuppiefuzz fuzz \
              --report \
              --log-level info \
              --coverage-host ${{ env.TARGET_URL }} \
              --timeout ${{ github.event.inputs.wuppie_time }} \
              /specs/openapi3.yml

      - name: Run EvoMaster
        if: matrix.fuzzer == 'evomaster'
        env:
          TARGET_URL: http://${{ needs.deploy_vampis.outputs.vamp_ip_evomaster }}:5000
          SPEC_PATH: http://${{ needs.deploy_vampis.outputs.vamp_ip_evomaster }}:5000/openapi.json
          OUTPUT_DIR: /evomaster/results
        run: |
          docker run --rm \
            --network evomaster_network_${{ github.run_id }} \
            -v ${{ github.workspace }}/fuzzing_results/evomaster:${OUTPUT_DIR} \
            -e TARGET_URL=${{ env.TARGET_URL }} \
            -e SPEC_PATH=${{ env.SPEC_PATH }} \
            -e OUTPUT_DIR=${{ env.OUTPUT_DIR }} \
            -e TIME_BUDGET=${{ github.event.inputs.evomaster_time }} \
            localhost:${{ env.REGISTRY_PORT }}/evomaster

      - name: Upload fuzzing results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.fuzzer }}-results
          path: fuzzing_results/${{ matrix.fuzzer }}

  cleanup:
    needs: 
      - setup_registry
      - deploy_vampis
      - run_fuzzers
    runs-on: self-hosted
    if: always()
    steps:
      - name: Remove all resources
        run: |
          # Remove networks
          docker network rm \
            restler_network_${{ github.run_id }} \
            wuppiefuzz_network_${{ github.run_id }} \
            evomaster_network_${{ github.run_id }} || true
          
          # Remove containers
          docker rm -f \
            vampi-restler_${{ github.run_id }} \
            vampi-wuppiefuzz_${{ github.run_id }} \
            vampi-evomaster_${{ github.run_id }} || true
          
          # Remove registry
          docker rm -f registry-${{ github.run_id }} || true
