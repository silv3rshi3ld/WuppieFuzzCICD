name: Swarm Fuzzing Workflow

on:
  push:
    branches: [SingleWorker]
  workflow_dispatch:
    inputs:
      restler_time:
        description: 'RESTler time (hours)'
        type: number
        default: 1
      wuppie_time:
        description: 'WuppieFuzz time (mins)'
        type: number
        default: 60
      evomaster_time:
        description: 'EvoMaster time (mins)'
        type: number
        default: 10

env:
  STACK_PREFIX: fuzz-${{ github.run_id }}
  RESULTS_VOLUME: results-${{ github.run_id }}
  CORPUS_DIR: ./corpus
  OPENAPI_SPEC: openapi3.yml
  BUILDX_BUILDER: github-runner-builder
  WUPPIEFUZZ_REPO: "https://github.com/TNO-S3/WuppieFuzz.git"
  GHCR_NAMESPACE: "ghcr.io/silv3rshi3ld"
  OPENAPI_CONFIG: openapi-config-${{ github.run_id }}
  RESTLER_TIME: ${{ github.event.inputs.restler_time || 1 }}
  WUPPIE_TIME: ${{ github.event.inputs.wuppie_time || 60 }}
  EVOMASTER_TIME: ${{ github.event.inputs.evomaster_time || 10 }}

permissions:
  contents: read
  packages: write
  actions: write

jobs:
  swarm_init:
    runs-on: [self-hosted, manager-runner]
    outputs:
      swarm_token: ${{ steps.get-credentials.outputs.token }}
      manager_ip: ${{ steps.get-credentials.outputs.ip }}
    steps:
      - uses: actions/checkout@v4
      - name: Initialize Swarm
        run: |
          docker swarm leave --force 2>/dev/null || true
          sleep 5
          
          # Get IP using cloud-init (works for most cloud providers)
          HOST_IP=$(cloud-init query ds.meta_data.local-ipv4 || hostname -I | awk '{print $1}')
          
          docker swarm init \
            --advertise-addr ${HOST_IP}:2377 \
            --default-addr-pool 10.30.0.0/16
          
          docker swarm join-token -q worker > swarm_token.txt
          echo $HOST_IP > manager_ip.txt
      - name: Get Swarm Credentials
        id: get-credentials
        run: |
          echo "token=$(cat swarm_token.txt)" >> $GITHUB_OUTPUT
          echo "ip=$(cat manager_ip.txt)" >> $GITHUB_OUTPUT

  swarm_join:
    needs: swarm_init
    runs-on: [self-hosted, worker-runner]
    steps:
      - name: Join Swarm Cluster
        run: |
          docker swarm leave --force 2>/dev/null || true
          docker swarm join \
            --token ${{ needs.swarm_init.outputs.swarm_token }} \
            ${{ needs.swarm_init.outputs.manager_ip }}:2377

  build_images:
    needs: [swarm_init, swarm_join]
    runs-on: [self-hosted, manager-runner]
    outputs:
      wuppie_commit: ${{ steps.wuppie-commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Setup Buildx
        run: |
          docker buildx create --name ${{ env.BUILDX_BUILDER }} --use
          docker buildx inspect --bootstrap
      
      - name: Get WuppieFuzz Commit
        id: wuppie-commit
        run: |
          COMMIT_HASH=$(git ls-remote ${{ env.WUPPIEFUZZ_REPO }} HEAD | cut -f1)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
      
      - name: Prepare OpenAPI Specs
        run: |
          mkdir -p services/{vampi,restler,evomaster}/openapi_specs
          cp services/vampi/openapi_specs/openapi3.yml services/restler/openapi_specs/
          cp services/vampi/openapi_specs/openapi3.yml services/evomaster/openapi_specs/
      
      - name: Build Images
        run: |
          # Build VAmPI
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.GHCR_NAMESPACE }}/vampi:${{ github.run_id }} \
            -t ${{ env.GHCR_NAMESPACE }}/vampi:latest \
            --build-arg OPENAPI_SPEC=openapi_specs/openapi3.yml \
            --push \
            -f services/vampi/Dockerfile \
            services/vampi

          # Build WuppieFuzz
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.GHCR_NAMESPACE }}/wuppiefuzz:${{ steps.wuppie-commit.outputs.commit_hash }} \
            -t ${{ env.GHCR_NAMESPACE }}/wuppiefuzz:latest \
            --push \
            -f services/wuppiefuzz/Dockerfile.wuppiefuzz \
            .

          # Build RESTler
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.GHCR_NAMESPACE }}/restler:latest \
            --build-arg OPENAPI_SPEC=openapi_specs/openapi3.yml \
            --push \
            -f services/restler/Dockerfile.restler \
            services/restler

          # Build EvoMaster
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.GHCR_NAMESPACE }}/evomaster:latest \
            --build-arg OPENAPI_SPEC=openapi_specs/openapi3.yml \
            --push \
            -f services/evomaster/Dockerfile.evomaster \
            services/evomaster

  deploy_stack:
    needs: build_images
    runs-on: [self-hosted, manager-runner]
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup Environment
        run: |
          # Create corpus directory and auth file
          mkdir -p ${{ env.CORPUS_DIR }}
          echo "admin:admin" > ${{ env.CORPUS_DIR }}/auth.yaml
          
          # Create Docker config with OpenAPI spec
          docker config create ${{ env.OPENAPI_CONFIG }} services/vampi/openapi_specs/openapi3.yml

      - name: Deploy Stack
        run: |
          docker stack deploy -c services/vampi/docker-compose.yaml ${{ env.STACK_PREFIX }}

  monitor_and_collect:
    needs: deploy_stack
    runs-on: [self-hosted, manager-runner]
    timeout-minutes: 120
    steps:
      - name: Monitor Services
        run: |
          for fuzzer in restler wuppiefuzz evomaster; do
            while true; do
              STATE=$(docker service ps ${{ env.STACK_PREFIX }}_${fuzzer}-fuzzer --format '{{.CurrentState}}' | head -n1)
              [[ "$STATE" == *"Complete"* ]] && break
              echo "$fuzzer status: $STATE"
              sleep 30
            done
          done

      - name: Package Results
        run: |
          mkdir -p artifacts
          docker run --rm -v ${{ env.RESULTS_VOLUME }}:/data -v $PWD/artifacts:/output \
            alpine sh -c "apk add zip && zip -r /output/results-${{ github.run_id }}.zip /data"

      - uses: actions/upload-artifact@v4
        with:
          name: fuzzing-results
          path: ./artifacts/results-${{ github.run_id }}.zip

  cleanup:
    needs: monitor_and_collect
    if: always()
    runs-on: [self-hosted, manager-runner]
    steps:
      - name: Remove Stack and Resources
        run: |
          docker stack rm ${{ env.STACK_PREFIX }}
          docker config rm ${{ env.OPENAPI_CONFIG }}
          docker volume rm ${{ env.RESULTS_VOLUME }}
          docker buildx rm ${{ env.BUILDX_BUILDER }}
          docker swarm leave --force
