name: Parallel API Fuzzing

on:
  push:
    branches: [main, SingleWorker]
  pull_request:
    branches: [main, SingleWorker]
  workflow_dispatch:
    inputs:
      restler_time:
        description: 'RESTler time (hours)'
        type: number
        default: 1
      wuppie_time:
        description: 'WuppieFuzz time (mins)'
        type: number
        default: 60
      evomaster_time:
        description: 'EvoMaster time (mins)'
        type: number
        default: 10

env:
  BASE_DIR: ${{ github.workspace }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup_registry:
    runs-on: self-hosted
    outputs:
      registry_name: ${{ steps.set-registry.outputs.name }}
      registry_port: ${{ steps.set-registry.outputs.port }}
    steps:
      - name: Configure unique registry
        id: set-registry
        run: |
          REGISTRY_NAME=registry-${{ github.run_id }}
          echo "name=$REGISTRY_NAME" >> $GITHUB_OUTPUT
          
          # Find available port using ss instead of netstat
          for port in {5000..5100}; do
            if ! ss -tuln | grep -q ":${port}\b"; then
              echo "port=$port" >> $GITHUB_OUTPUT
              docker rm -f $REGISTRY_NAME || true
              docker run -d \
                -p $port:5000 \
                --name $REGISTRY_NAME \
                --rm \
                registry:2
              sleep 5
              break
            fi
          done

  build_images:
    needs: setup_registry
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Build and push images
        run: |
          # Build VAmPI
          docker build -t localhost:${{ needs.setup_registry.outputs.registry_port }}/vampi \
            ${{ env.BASE_DIR }}/services/vampi
          docker push localhost:${{ needs.setup_registry.outputs.registry_port }}/vampi

          # Build RESTler
          docker build -t localhost:${{ needs.setup_registry.outputs.registry_port }}/restler \
            -f ${{ env.BASE_DIR }}/services/restler/Dockerfile.restler \
            ${{ env.BASE_DIR }}/services/restler
          docker push localhost:${{ needs.setup_registry.outputs.registry_port }}/restler

          # Build EvoMaster
          docker build -t localhost:${{ needs.setup_registry.outputs.registry_port }}/evomaster \
            -f ${{ env.BASE_DIR }}/services/evomaster/Dockerfile.evomaster \
            ${{ env.BASE_DIR }}/services/evomaster
          docker push localhost:${{ needs.setup_registry.outputs.registry_port }}/evomaster

          # Build WuppieFuzz
          docker build -t localhost:${{ needs.setup_registry.outputs.registry_port }}/wuppiefuzz \
            -f ${{ env.BASE_DIR }}/services/wuppiefuzz/Dockerfile.wuppiefuzz \
            ${{ env.BASE_DIR }}/services/wuppiefuzz
          docker push localhost:${{ needs.setup_registry.outputs.registry_port }}/wuppiefuzz

  deploy_restler_vampi:
    needs: [setup_registry, build_images]
    runs-on: self-hosted
    outputs:
      vampi_ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v4
      - name: Create network
        run: docker network create restler_network_${{ github.run_id }}
      - name: Deploy VAmPI
        run: |
          docker run -d \
            --name vampi-restler_${{ github.run_id }} \
            --network restler_network_${{ github.run_id }} \
            -e vulnerable=1 \
            localhost:${{ needs.setup_registry.outputs.registry_port }}/vampi
      - name: Get IP
        id: get-ip
        run: |
          IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vampi-restler_${{ github.run_id }})
          echo "ip=$IP" >> $GITHUB_OUTPUT

  deploy_wuppiefuzz_vampi:
    needs: [setup_registry, build_images]
    runs-on: self-hosted
    outputs:
      vampi_ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v4
      - name: Create network
        run: docker network create wuppiefuzz_network_${{ github.run_id }}
      - name: Deploy VAmPI
        run: |
          docker run -d \
            --name vampi-wuppiefuzz_${{ github.run_id }} \
            --network wuppiefuzz_network_${{ github.run_id }} \
            -e vulnerable=1 \
            localhost:${{ needs.setup_registry.outputs.registry_port }}/vampi
      - name: Get IP
        id: get-ip
        run: |
          IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vampi-wuppiefuzz_${{ github.run_id }})
          echo "ip=$IP" >> $GITHUB_OUTPUT

  deploy_evomaster_vampi:
    needs: [setup_registry, build_images]
    runs-on: self-hosted
    outputs:
      vampi_ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v4
      - name: Create network
        run: docker network create evomaster_network_${{ github.run_id }}
      - name: Deploy VAmPI
        run: |
          docker run -d \
            --name vampi-evomaster_${{ github.run_id }} \
            --network evomaster_network_${{ github.run_id }} \
            -e vulnerable=1 \
            localhost:${{ needs.setup_registry.outputs.registry_port }}/vampi
      - name: Get IP
        id: get-ip
        run: |
          IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vampi-evomaster_${{ github.run_id }})
          echo "ip=$IP" >> $GITHUB_OUTPUT

  run_restler:
    needs: deploy_restler_vampi
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Create results directory
        run: mkdir -p fuzzing_results/restler
      - name: Run RESTler
        env:
          TARGET_IP: ${{ needs.deploy_restler_vampi.outputs.vampi_ip }}
        run: |
          docker run --rm \
            --network restler_network_${{ github.run_id }} \
            -v ${{ github.workspace }}/fuzzing_results/restler:/workspace/output \
            -v ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml:/workspace/openapi3.yml:ro \
            -v ${{ env.BASE_DIR }}/services/restler/config:/workspace/config:ro \
            -e TARGET_IP=${{ env.TARGET_IP }} \
            -e TARGET_PORT=5000 \
            -e RUN_FUZZ_LEAN=true \
            -e RUN_FUZZ=true \
            -e FUZZ_LEAN_TIME_BUDGET="${{ github.event.inputs.restler_time }}" \
            -e FUZZ_TIME_BUDGET="${{ github.event.inputs.restler_time }}" \
            localhost:${{ needs.setup_registry.outputs.registry_port }}/restler
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: restler-results
          path: fuzzing_results/restler

  run_wuppiefuzz:
    needs: deploy_wuppiefuzz_vampi
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Create results directory
        run: mkdir -p fuzzing_results/wuppiefuzz
      - name: Run WuppieFuzz
        env:
          TARGET_URL: http://${{ needs.deploy_wuppiefuzz_vampi.outputs.vampi_ip }}:5000
        run: |
          docker run --rm \
            --network wuppiefuzz_network_${{ github.run_id }} \
            -v ${{ github.workspace }}/fuzzing_results/wuppiefuzz:/wuppiefuzz/reports \
            -v ${{ env.BASE_DIR }}/services/vampi/openapi_specs:/specs:ro \
            localhost:${{ needs.setup_registry.outputs.registry_port }}/wuppiefuzz fuzz \
              --report \
              --log-level info \
              --coverage-host ${{ env.TARGET_URL }} \
              --timeout ${{ github.event.inputs.wuppie_time }} \
              /specs/openapi3.yml
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: fuzzing_results/wuppiefuzz

  run_evomaster:
    needs: deploy_evomaster_vampi
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Create results directory
        run: mkdir -p fuzzing_results/evomaster
      - name: Run EvoMaster
        env:
          TARGET_URL: http://${{ needs.deploy_evomaster_vampi.outputs.vampi_ip }}:5000
          SPEC_PATH: http://${{ needs.deploy_evomaster_vampi.outputs.vampi_ip }}:5000/openapi.json
          OUTPUT_DIR: /evomaster/results
        run: |
          docker run --rm \
            --network evomaster_network_${{ github.run_id }} \
            -v ${{ github.workspace }}/fuzzing_results/evomaster:${OUTPUT_DIR} \
            -e TARGET_URL=${{ env.TARGET_URL }} \
            -e SPEC_PATH=${{ env.SPEC_PATH }} \
            -e OUTPUT_DIR=${{ env.OUTPUT_DIR }} \
            -e TIME_BUDGET=${{ github.event.inputs.evomaster_time }} \
            localhost:${{ needs.setup_registry.outputs.registry_port }}/evomaster
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: fuzzing_results/evomaster

  cleanup:
    needs: 
      - run_restler
      - run_wuppiefuzz
      - run_evomaster
    runs-on: self-hosted
    if: always()
    steps:
      - name: Remove all resources
        run: |
          # Remove networks
          docker network rm \
            restler_network_${{ github.run_id }} \
            wuppiefuzz_network_${{ github.run_id }} \
            evomaster_network_${{ github.run_id }} || true
          
          # Remove containers
          docker rm -f \
            vampi-restler_${{ github.run_id }} \
            vampi-wuppiefuzz_${{ github.run_id }} \
            vampi-evomaster_${{ github.run_id }} || true
          
          # Remove registry
          docker rm -f registry-${{ github.run_id }} || true
