name: Swarm Fuzzing Workflow

on:
  push:
    branches: [SingleWorker]
  workflow_dispatch:
    inputs:
      restler_time:
        description: 'RESTler time (hours)'
        type: number
        default: 1
      wuppie_time:
        description: 'WuppieFuzz time (mins)'
        type: number
        default: 60
      evomaster_time:
        description: 'EvoMaster time (mins)'
        type: number
        default: 10

env:
  STACK_PREFIX: fuzz-${{ github.run_id }}
  NETWORK_NAME: fuzz-net-${{ github.run_id }}
  VOLUME_NAME: results-${{ github.run_id }}
  CORPUS_DIR: ./corpus
  OPENAPI_SPEC: openapi3.yml
  BUILDX_BUILDER: github-runner-builder
  WUPPIEFUZZ_REPO: "https://github.com/TNO-S3/WuppieFuzz.git"
  GHCR_NAMESPACE: "ghcr.io/silv3rshi3ld"  # Corrected username with 'r'

permissions:
  contents: read
  packages: write  # Required for GHCR access
  actions: write

jobs:
  swarm_init:
    runs-on: [self-hosted, manager-runner]
    outputs:
      swarm_token: ${{ steps.get-token.outputs.token }}
      manager_ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v4
      - name: Initialize Swarm
        run: |
          CURRENT_SWARM=$(docker info --format '{{.Swarm.NodeID}}')
          if [ -n "$CURRENT_SWARM" ]; then
            docker swarm leave --force || true
            sleep 5
          fi

          HOST_IP=$(ip -4 addr show ens18 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
          docker swarm init \
            --advertise-addr ${HOST_IP}:2377 \
            --default-addr-pool 10.30.0.0/16

          docker swarm join-token -q worker > swarm_token.txt
          echo $HOST_IP > manager_ip.txt

      - name: Extract swarm token
        id: get-token
        run: echo "token=$(cat swarm_token.txt)" >> $GITHUB_OUTPUT
      - name: Get manager IP
        id: get-ip
        run: echo "ip=$(cat manager_ip.txt)" >> $GITHUB_OUTPUT

  swarm_join:
    needs: swarm_init
    runs-on: [self-hosted, worker-runner]
    steps:
      - name: Join Swarm cluster
        run: |
          CURRENT_MANAGER=$(docker info --format '{{.Swarm.RemoteManagers}}' | grep -o ${{ needs.swarm_init.outputs.manager_ip }} || true)
          if [ -z "$CURRENT_MANAGER" ]; then
            docker swarm leave --force || true
            docker swarm join \
              --token ${{ needs.swarm_init.outputs.swarm_token }} \
              ${{ needs.swarm_init.outputs.manager_ip }}:2377
          fi

  build_images:
    needs: [swarm_init, swarm_join]
    runs-on: [self-hosted, manager-runner]
    outputs:
      wuppie_commit: ${{ steps.wuppie-commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        run: |
          docker buildx create --name ${{ env.BUILDX_BUILDER }} --use
          docker buildx inspect --bootstrap
          
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}  # Use repository owner
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get WuppieFuzz commit
        id: wuppie-commit
        run: |
          COMMIT_HASH=$(git ls-remote ${{ env.WUPPIEFUZZ_REPO }} HEAD | cut -f1)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Build and Push WuppieFuzz
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.GHCR_NAMESPACE }}/wuppiefuzz:${{ steps.wuppie-commit.outputs.commit_hash }} \
            -t ${{ env.GHCR_NAMESPACE }}/wuppiefuzz:latest \
            --label "org.opencontainers.image.source=https://github.com/silv3rshi3ld/WuppieFuzzCICD" \
            --label "org.opencontainers.image.revision=${{ github.sha }}" \
            --push \
            -f services/wuppiefuzz/Dockerfile.wuppiefuzz \
            .

      - name: Prepare OpenAPI Specs
        run: |
          mkdir -p services/{restler,evomaster}/openapi_specs
          cp services/vampi/openapi_specs/openapi3.yml services/restler/openapi_specs/
          cp services/vampi/openapi_specs/openapi3.yml services/evomaster/openapi_specs/

      - name: Build and Push RESTler
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.GHCR_NAMESPACE }}/restler:latest \
            --build-arg OPENAPI_SPEC=openapi_specs/openapi3.yml \
            --push \
            -f services/restler/Dockerfile.restler \
            services/restler

      - name: Build and Push EvoMaster
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.GHCR_NAMESPACE }}/evomaster:latest \
            --build-arg OPENAPI_SPEC=openapi_specs/openapi3.yml \
            --push \
            -f services/evomaster/Dockerfile.evomaster \
            services/evomaster

  prepare_environment:
    needs: build_images
    runs-on: [self-hosted, manager-runner]
    steps:
      - uses: actions/checkout@v4
      - name: Create shared resources
        run: |
          # Create swarm network
          docker network create \
            --driver overlay \
            --attachable \
            --subnet=10.30.0.0/16 \
            ${{ env.NETWORK_NAME }} || true

          # Create other resources
          mkdir -p ${{ env.CORPUS_DIR }}
          echo "admin:admin" > ${{ env.CORPUS_DIR }}/auth.yaml
          docker config create openapi-config services/vampi/openapi_specs/openapi3.yml
          docker volume create ${{ env.VOLUME_NAME }}

  deploy_services:
    needs: [build_images, prepare_environment]
    runs-on: [self-hosted, manager-runner]
    strategy:
      matrix:
        tool: [restler, wuppiefuzz, evomaster]
    steps:
      - uses: actions/checkout@v4
      - name: Deploy service stack
        env:
          SERVICE_NAME: ${{ matrix.tool }}-fuzzer
        run: |
          # VAmPI service deployment
          docker service create \
            --name vampi-${{ matrix.tool }} \
            --network ${{ env.NETWORK_NAME }} \
            --replicas 1 \
            --health-cmd "curl -f http://localhost:5000/health || exit 1" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 3 \
            -e vulnerable=1 \
            ${{ env.GHCR_NAMESPACE }}/vampi:latest

          # Wait for VAmPI readiness
          until docker service ps vampi-${{ matrix.tool }} --format '{{.CurrentState}}' | grep -q Running; do
            sleep 5
          done

          # Fuzzer service deployment
          case "${{ matrix.tool }}" in
            restler)
              docker service create \
                --name $SERVICE_NAME \
                --network ${{ env.NETWORK_NAME }} \
                --config source=openapi-config,target=/openapi3.yml \
                -e TARGET_URL=http://vampi-${{ matrix.tool }}:5000 \
                -e FUZZ_TIME_BUDGET="${{ github.event.inputs.restler_time }}" \
                --mount type=volume,src=${{ env.VOLUME_NAME }},dst=/results \
                ${{ env.GHCR_NAMESPACE }}/restler:latest
              ;;

            wuppiefuzz)
              docker service create \
                --name $SERVICE_NAME \
                --network ${{ env.NETWORK_NAME }} \
                --config source=openapi-config,target=/openapi3.yml \
                -e RUST_LOG=info \
                -e AUTH_FILE=/corpus/auth.yaml \
                --mount type=volume,src=${{ env.VOLUME_NAME }},dst=/reports \
                --mount type=bind,src=${{ github.workspace }}/${{ env.CORPUS_DIR }},dst=/corpus,ro \
                ${{ env.GHCR_NAMESPACE }}/wuppiefuzz:${{ needs.build_images.outputs.wuppie_commit }} \
                fuzz \
                --report \
                --log-level info \
                --initial-corpus /corpus \
                --timeout ${{ github.event.inputs.wuppie_time }} \
                --authentication /corpus/auth.yaml \
                /openapi3.yml
              ;;

            evomaster)
              docker service create \
                --name $SERVICE_NAME \
                --network ${{ env.NETWORK_NAME }} \
                --config source=openapi-config,target=/openapi3.yml \
                -e TARGET_URL=http://vampi-${{ matrix.tool }}:5000 \
                -e TIME_BUDGET="${{ github.event.inputs.evomaster_time }}" \
                --mount type=volume,src=${{ env.VOLUME_NAME }},dst=/results \
                ${{ env.GHCR_NAMESPACE }}/evomaster:latest
              ;;
          esac

  monitor_and_collect:
    needs: deploy_services
    runs-on: [self-hosted, manager-runner]
    timeout-minutes: 120
    steps:
      - name: Monitor completion
        run: |
          for tool in restler wuppiefuzz evomaster; do
            while ! docker service ps ${tool}-fuzzer --format '{{.CurrentState}}' | grep -q Complete; do
              sleep 30
            done
          done
      - name: Package results
        run: |
          mkdir -p ./artifacts
          docker run --rm -v ${{ env.VOLUME_NAME }}:/data -v $(pwd)/artifacts:/output \
            alpine sh -c "apk add zip && zip -r /output/results-${{ github.run_id }}.zip /data"
      - uses: actions/upload-artifact@v4
        with:
          name: fuzzing-results
          path: ./artifacts/results-${{ github.run_id }}.zip

  cleanup:
    needs: monitor_and_collect
    if: always()
    runs-on: [self-hosted, manager-runner]
    steps:
      - name: Remove swarm resources
        run: |
          docker service rm $(docker service ls -q --filter name=fuzz-) || true
          docker config rm openapi-config || true
          docker network rm ${{ env.NETWORK_NAME }} || true
          docker volume rm ${{ env.VOLUME_NAME }} || true
          docker swarm leave --force || true
          docker buildx rm ${{ env.BUILDX_BUILDER }} || true