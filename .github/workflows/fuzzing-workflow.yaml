name: Parallel API Fuzzing

on:
  push:
    branches: [main, SingleWorker]
  pull_request:
    branches: [main, SingleWorker]
  workflow_dispatch:
    inputs:
      restler_time:
        description: 'RESTler time (hours)'
        type: number
        default: 1
      wuppie_time:
        description: 'WuppieFuzz time (mins)'
        type: number
        default: 60
      evomaster_time:
        description: 'EvoMaster time (mins)'
        type: number
        default: 10

env:
  BASE_DIR: ${{ github.workspace }}

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_images:
    runs-on: [self-hosted, manager-runner]
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        run: |
          docker build -t ghcr.io/silv3rshi3ld/vampi:latest ${{ env.BASE_DIR }}/services/vampi
          docker push ghcr.io/silv3rshi3ld/vampi:latest

          docker build -t ghcr.io/silv3rshi3ld/restler:latest \
            -f ${{ env.BASE_DIR }}/services/restler/Dockerfile.restler \
            ${{ env.BASE_DIR }}/services/restler
          docker push ghcr.io/silv3rshi3ld/restler:latest

          docker build -t ghcr.io/silv3rshi3ld/evomaster:latest \
            -f ${{ env.BASE_DIR }}/services/evomaster/Dockerfile.evomaster \
            ${{ env.BASE_DIR }}/services/evomaster
          docker push ghcr.io/silv3rshi3ld/evomaster:latest

          docker build -t ghcr.io/silv3rshi3ld/wuppiefuzz:latest \
            -f ${{ env.BASE_DIR }}/services/wuppiefuzz/Dockerfile.wuppiefuzz \
            ${{ env.BASE_DIR }}/services/wuppiefuzz
          docker push ghcr.io/silv3rshi3ld/wuppiefuzz:latest

  deploy_restler_vampi:
    needs: build_images
    runs-on: [self-hosted, manager-runner]
    outputs:
      vampi_ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old networks
        run: |
          # Remove all existing workflow networks
          docker network ls --format '{{.Name}}' | grep -E 'restler_network_|wuppiefuzz_network_|evomaster_network_' | xargs -r docker network rm || true
          docker network prune --force

      - name: Create network with unique subnet
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          # Generate unique hex value from RUN_ID
          HEX_HASH=$(echo "$RUN_ID" | sha1sum | cut -c1-4)
          DECIMAL=$(( 0x$HEX_HASH % 65536 ))  # 0-65535
          
          # For RESTler (172.17.x.0/24)
          OCTET3=$(( DECIMAL % 256 ))
          docker network create \
            --driver=bridge \
            --subnet=172.17.$OCTET3.0/24 \
            restler_network_${{ github.run_id }}

      - name: Deploy VAmPI
        run: |
          docker run -d \
            --name vampi-restler_${{ github.run_id }} \
            --network restler_network_${{ github.run_id }} \
            -e vulnerable=1 \
            ghcr.io/silv3rshi3ld/vampi:latest

      - name: Get IP
        id: get-ip
        run: |
          IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vampi-restler_${{ github.run_id }})
          echo "ip=$IP" >> $GITHUB_OUTPUT

  deploy_wuppiefuzz_vampi:
    needs: build_images
    runs-on: [self-hosted, worker-runner]
    outputs:
      vampi_ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old networks
        run: |
          # Remove all existing workflow networks
          docker network ls --format '{{.Name}}' | grep -E 'restler_network_|wuppiefuzz_network_|evomaster_network_' | xargs -r docker network rm || true
          docker network prune --force

      - name: Create network with unique subnet
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          # Generate unique hex value from RUN_ID
          HEX_HASH=$(echo "$RUN_ID" | sha1sum | cut -c1-4)
          DECIMAL=$(( 0x$HEX_HASH % 65536 ))  # 0-65535
          
          # For WuppieFuzz (10.0.x.0/24)
          OCTET3=$(( (DECIMAL + 100) % 256 ))  # Offset to avoid overlap
          docker network create \
            --driver=bridge \
            --subnet=10.0.$OCTET3.0/24 \
            wuppiefuzz_network_${{ github.run_id }}

      - name: Deploy VAmPI
        run: |
          docker run -d \
            --name vampi-wuppiefuzz_${{ github.run_id }} \
            --network wuppiefuzz_network_${{ github.run_id }} \
            -e vulnerable=1 \
            ghcr.io/silv3rshi3ld/vampi:latest

      - name: Get IP
        id: get-ip
        run: |
          IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vampi-wuppiefuzz_${{ github.run_id }})
          echo "ip=$IP" >> $GITHUB_OUTPUT

  deploy_evomaster_vampi:
    needs: build_images
    runs-on: [self-hosted, manager-runner]
    outputs:
      vampi_ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old networks
        run: |
          # Remove all existing workflow networks
          docker network ls --format '{{.Name}}' | grep -E 'restler_network_|wuppiefuzz_network_|evomaster_network_' | xargs -r docker network rm || true
          docker network prune --force

      - name: Create network with unique subnet
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          # Generate unique hex value from RUN_ID
          HEX_HASH=$(echo "$RUN_ID" | sha1sum | cut -c1-4)
          DECIMAL=$(( 0x$HEX_HASH % 65536 ))  # 0-65535
          
          # For EvoMaster (192.168.x.0/24)
          OCTET3=$(( (DECIMAL + 200) % 256 ))  # Offset to avoid overlap
          docker network create \
            --driver=bridge \
            --subnet=192.168.$OCTET3.0/24 \
            evomaster_network_${{ github.run_id }}

      - name: Deploy VAmPI
        run: |
          docker run -d \
            --name vampi-evomaster_${{ github.run_id }} \
            --network evomaster_network_${{ github.run_id }} \
            -e vulnerable=1 \
            ghcr.io/silv3rshi3ld/vampi:latest

      - name: Get IP
        id: get-ip
        run: |
          IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vampi-evomaster_${{ github.run_id }})
          echo "ip=$IP" >> $GITHUB_OUTPUT

  run_restler:
    needs: deploy_restler_vampi
    runs-on: [self-hosted, manager-runner]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create results directory
        run: mkdir -p fuzzing_results/restler

      - name: Run RESTler
        env:
          TARGET_IP: ${{ needs.deploy_restler_vampi.outputs.vampi_ip }}
        run: |
          docker run --rm \
            --network restler_network_${{ github.run_id }} \
            -v ${{ github.workspace }}/fuzzing_results/restler:/workspace/output \
            -v ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml:/workspace/openapi3.yml:ro \
            -v ${{ env.BASE_DIR }}/services/restler/config:/workspace/config:ro \
            -e TARGET_IP=${{ env.TARGET_IP }} \
            -e TARGET_PORT=5000 \
            -e RUN_FUZZ_LEAN=true \
            -e RUN_FUZZ=true \
            -e FUZZ_LEAN_TIME_BUDGET="${{ github.event.inputs.restler_time }}" \
            -e FUZZ_TIME_BUDGET="${{ github.event.inputs.restler_time }}" \
            ghcr.io/silv3rshi3ld/restler:latest

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: restler-results
          path: fuzzing_results/restler

  run_wuppiefuzz:
    needs: deploy_wuppiefuzz_vampi
    runs-on: [self-hosted, worker-runner]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create results directory
        run: mkdir -p fuzzing_results/wuppiefuzz

      - name: Create dynamic OpenAPI spec
        env:
          TARGET_IP: ${{ needs.deploy_wuppiefuzz_vampi.outputs.vampi_ip }}
        run: |
          sed "s|http://vampi:5000|http://${{ env.TARGET_IP }}:5000|g" \
            ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml \
            > ${{ github.workspace }}/openapi3-modified.yml

      - name: Create WuppieFuzz config
        run: |
          cat > ${{ github.workspace }}/wuppie-config.yml << EOF
          coverage_format: lcov
          report: true
          output_format: human-readable
          timeout: ${{ github.event.inputs.wuppie_time }}
          source_dir: "/app/src"
          EOF

      - name: Run WuppieFuzz with config
        run: |
          docker run --rm \
            --network wuppiefuzz_network_${{ github.run_id }} \
            -v ${{ github.workspace }}/fuzzing_results/wuppiefuzz:/workspace/output \
            -v ${{ github.workspace }}/openapi3-modified.yml:/workspace/openapi3.yml:ro \
            -v ${{ github.workspace }}/wuppie-config.yml:/workspace/config.yml:ro \
            -e RUST_LOG=debug \
            ghcr.io/silv3rshi3ld/wuppiefuzz:latest \
            fuzz /workspace/openapi3.yml \
            --config /workspace/config.yml \
            --timeout ${{ github.event.inputs.wuppie_time }}

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: fuzzing_results/wuppiefuzz

  run_evomaster:
    needs: deploy_evomaster_vampi
    runs-on: [self-hosted, manager-runner]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create results directory
        run: mkdir -p fuzzing_results/evomaster

      - name: Run EvoMaster
        env:
          TARGET_IP: ${{ needs.deploy_evomaster_vampi.outputs.vampi_ip }}
        run: |
          docker run --rm \
            --network evomaster_network_${{ github.run_id }} \
            -v ${{ github.workspace }}/fuzzing_results/evomaster:/evomaster/results \
            -v ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml:/evomaster/openapi3.yml:ro \
            -e TARGET_URL="http://${{ env.TARGET_IP }}:5000" \
            -e SPEC_PATH="/evomaster/openapi3.yml" \
            -e OUTPUT_DIR="/evomaster/results" \
            -e TIME_BUDGET="${{ github.event.inputs.evomaster_time }}m" \
            -e REPORT_ENABLED=true \
            -e MAX_RETRIES=60 \
            -e RETRY_INTERVAL=2 \
            -e HEALTH_ENDPOINT="/health" \
            -e SEED=42 \
            ghcr.io/silv3rshi3ld/evomaster:latest

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: fuzzing_results/evomaster

  cleanup_manager:
    needs: [run_restler, run_evomaster]
    runs-on: [self-hosted, manager-runner]
    if: always()
    steps:
      - name: Clean manager-runner resources
        run: |
          # Force remove containers
          docker rm -f vampi-restler_${{ github.run_id }} vampi-evomaster_${{ github.run_id }} || true
          
          # Force remove networks
          docker network rm restler_network_${{ github.run_id }} evomaster_network_${{ github.run_id }} || true
          
          # Remove all networks older than 5 minutes
          docker network prune --force --filter "until=5m"
          # Remove any remaining workflow networks
          docker network ls --format '{{.Name}}' | grep -E 'restler_network_|wuppiefuzz_network_|evomaster_network_' | xargs -r docker network rm || true

  cleanup_worker:
    needs: [run_wuppiefuzz]
    runs-on: [self-hosted, worker-runner]
    if: always()
    steps:
      - name: Clean worker-runner resources
        run: |
          # Force remove networks and containers
          docker network rm wuppiefuzz_network_${{ github.run_id }} || true
          docker rm -f vampi-wuppiefuzz_${{ github.run_id }} || true
          
          # Remove all networks older than 5 minutes
          docker network prune --force --filter "until=5m"
          # Remove any remaining workflow networks
          docker network ls --format '{{.Name}}' | grep -E 'restler_network_|wuppiefuzz_network_|evomaster_network_' | xargs -r docker network rm || true
