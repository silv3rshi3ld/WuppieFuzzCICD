name: Single Worker API Fuzzing

on:
  push:
    branches: [ SingleWorker ]
  pull_request:
    branches: [ SingleWorker ]

concurrency:
  group: single-worker-api-fuzzing
  cancel-in-progress: true

permissions:
  contents: read

env:
  DOCKER_NETWORK_NAME: fuzzing_network
  VAMPI_RESTLER_PORT: 5012
  VAMPI_WUPPIEFUZZ_PORT: 5022
  VAMPI_EVOMASTER_PORT: 5032
  BASE_DIR: ${{ github.workspace }}
  FUZZERS: restler wuppiefuzz evomaster

jobs:
  fuzzing:
    runs-on: [self-hosted]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check Docker Configuration
        run: |
          chmod +x scripts/check-docker.sh
          ./scripts/check-docker.sh
        shell: bash

      - name: Cleanup Previous Runs
        run: |
          echo "Starting Docker cleanup..."
          
          echo "Forcefully removing specific containers if they exist..."
          for CONTAINER in vampi-restler vampi-wuppiefuzz vampi-evomaster; do
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER}\$"; then
              sudo docker rm -f ${CONTAINER}
            fi
          done
          
          echo "Stopping all running containers..."
          sudo docker ps -q | xargs -r sudo docker stop || true
          
          echo "Removing all containers..."
          sudo docker ps -aq | xargs -r sudo docker rm -f || true
          
          echo "Removing existing Docker network..."
          sudo docker network rm ${{ env.DOCKER_NETWORK_NAME }} || true
          
          echo "Pruning unused Docker volumes..."
          sudo docker volume prune -f || true
          
          echo "Pruning unused Docker networks..."
          sudo docker network prune -f || true
          
          echo "Cleanup completed successfully."
        shell: bash

      - name: Verify Cleanup
        run: |
          echo "Verifying Docker containers are removed..."
          sudo docker ps -a
        shell: bash

      - name: Create Docker Network
        run: |
          echo "Creating Docker network: ${{ env.DOCKER_NETWORK_NAME }}..."
          if sudo docker network inspect ${{ env.DOCKER_NETWORK_NAME }} >/dev/null 2>&1; then
            echo "Network exists, removing it first..."
            sudo docker network rm ${{ env.DOCKER_NETWORK_NAME }}
          fi
          sudo docker network create ${{ env.DOCKER_NETWORK_NAME }}
          echo "Network created successfully."
        shell: bash

      - name: Start VAmPI Containers
        run: |
          echo "Starting VAmPI containers..."
          
          # Ensure no existing containers with the same names are running
          for CONTAINER in vampi-restler vampi-wuppiefuzz vampi-evomaster; do
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER}\$"; then
              echo "Removing existing container: ${CONTAINER}"
              sudo docker rm -f ${CONTAINER}
            fi
          done
          
          # Start VAmPI for RESTler
          sudo docker run -d \
            --name vampi-restler \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -p ${{ env.VAMPI_RESTLER_PORT }}:5000 \
            -e vulnerable=1 \
            vampi-vulnerable-restler:latest

          # Start VAmPI for WuppieFuzz
          sudo docker run -d \
            --name vampi-wuppiefuzz \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -p ${{ env.VAMPI_WUPPIEFUZZ_PORT }}:5000 \
            -e vulnerable=1 \
            vampi-vulnerable-wuppiefuzz:latest

          # Start VAmPI for EvoMaster
          sudo docker run -d \
            --name vampi-evomaster \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -p ${{ env.VAMPI_EVOMASTER_PORT }}:5000 \
            -e vulnerable=1 \
            vampi-vulnerable-evomaster:latest

          echo "Waiting for services to start..."
          sleep 10
        shell: bash
