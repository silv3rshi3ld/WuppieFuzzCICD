name: Single Worker API Fuzzing

on:
  push:
    branches: [ SingleWorker ]
  pull_request:
    branches: [ SingleWorker ]

permissions:
  contents: read

env:
  DOCKER_NETWORK_NAME: fuzzing_network
  VAMPI_RESTLER_PORT: 5012
  VAMPI_WUPPIEFUZZ_PORT: 5022
  VAMPI_EVOMASTER_PORT: 5032
  BASE_DIR: ${{ github.workspace }}
  FUZZERS: restler wuppiefuzz evomaster

jobs:
  fuzzing:
    runs-on: [self-hosted]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check Docker Configuration
        run: |
          chmod +x scripts/check-docker.sh
          ./scripts/check-docker.sh
        shell: bash

      - name: Cleanup Previous Runs
        run: |
          echo "Starting Docker cleanup..."
          
          echo "Disconnecting containers from network..."
          for container in $(sudo docker ps -q); do
            sudo docker network disconnect -f ${{ env.DOCKER_NETWORK_NAME }} $container 2>/dev/null || true
          done
          
          echo "Stopping all running containers..."
          sudo docker ps -q | xargs -r sudo docker stop || true
          
          echo "Removing all containers..."
          sudo docker ps -aq | xargs -r sudo docker rm -f || true
          
          echo "Removing existing Docker network..."
          sudo docker network rm ${{ env.DOCKER_NETWORK_NAME }} || true
          
          echo "Pruning unused Docker volumes..."
          sudo docker volume prune -f || true
          
          echo "Pruning unused Docker networks..."
          sudo docker network prune -f || true
          
          echo "Cleanup completed successfully."
        shell: bash

      - name: Create Docker Network
        run: |
          echo "Creating Docker network: ${{ env.DOCKER_NETWORK_NAME }}..."
          if sudo docker network inspect ${{ env.DOCKER_NETWORK_NAME }} >/dev/null 2>&1; then
            echo "Network exists, removing it first..."
            sudo docker network rm ${{ env.DOCKER_NETWORK_NAME }}
          fi
          sudo docker network create ${{ env.DOCKER_NETWORK_NAME }}
          echo "Network created successfully."
        shell: bash

      - name: Build VAmPI Images
        run: |
          echo "Building VAmPI images for each fuzzer..."
          # Build separate VAmPI instances for each fuzzer
          for FUZZER in ${{ env.FUZZERS }}; do
            sudo docker build \
              --file services/vampi/Dockerfile \
              --build-arg vulnerable=1 \
              --tag vampi-vulnerable-${FUZZER}:latest \
              services/vampi/
          done

      - name: Build Fuzzer Images
        run: |
          echo "Building fuzzer images..."
          # Build WuppieFuzz
          git clone https://github.com/TNO-S3/WuppieFuzz.git temp_wuppiefuzz
          cp -r temp_wuppiefuzz/* services/wuppiefuzz/
          sudo docker build \
            --file services/wuppiefuzz/Dockerfile.wuppiefuzz \
            --tag wuppiefuzz:latest \
            services/wuppiefuzz/
          rm -rf temp_wuppiefuzz

          # Build RESTler
          sudo docker build \
            --file services/restler/Dockerfile.restler \
            --tag restler:latest \
            services/restler/

          # Build EvoMaster
          sudo docker build \
            --file services/evomaster/Dockerfile.evomaster \
            --tag evomaster:latest \
            services/evomaster/

      - name: Start VAmPI Containers
        run: |
          echo "Starting VAmPI containers..."
          # Start VAmPI for RESTler
          sudo docker run -d \
            --name vampi-restler \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -p ${{ env.VAMPI_RESTLER_PORT }}:5000 \
            -e vulnerable=1 \
            vampi-vulnerable-restler:latest

          # Start VAmPI for WuppieFuzz
          sudo docker run -d \
            --name vampi-wuppiefuzz \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -p ${{ env.VAMPI_WUPPIEFUZZ_PORT }}:5000 \
            -e vulnerable=1 \
            vampi-vulnerable-wuppiefuzz:latest

          # Start VAmPI for EvoMaster
          sudo docker run -d \
            --name vampi-evomaster \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -p ${{ env.VAMPI_EVOMASTER_PORT }}:5000 \
            -e vulnerable=1 \
            vampi-vulnerable-evomaster:latest

          echo "Waiting for services to start..."
          sleep 10

      - name: Run Fuzzing Tests
        run: |
          echo "Starting fuzzing tests..."
          # Create volumes for results
          sudo docker volume create restler_output
          sudo docker volume create wuppiefuzz_output
          sudo docker volume create evomaster_output

          # Run RESTler
          sudo docker run --rm \
            --name restler \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -v restler_output:/results \
            -v ${{ github.workspace }}/services/vampi/openapi_specs:/workspace \
            restler:latest \
            http://vampi-restler:5000 /workspace/openapi3.yml

          # Run WuppieFuzz
          sudo docker run --rm \
            --name wuppiefuzz \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -v wuppiefuzz_output:/results \
            -v ${{ github.workspace }}/services/vampi/openapi_specs:/specs \
            wuppiefuzz:latest \
            http://vampi-wuppiefuzz:5000 /specs/openapi3.yml

          # Run EvoMaster
          sudo docker run --rm \
            --name evomaster \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -v evomaster_output:/results \
            -v ${{ github.workspace }}/services/vampi/openapi_specs:/specs \
            evomaster:latest \
            http://vampi-evomaster:5000 /specs/openapi3.yml

      - name: Collect Results
        if: success()
        run: |
          echo "Collecting fuzzing results..."
          sudo mkdir -p fuzzing_results
          
          # Copy results from each fuzzer's volume
          for FUZZER in ${{ env.FUZZERS }}; do
            sudo mkdir -p fuzzing_results/${FUZZER}
            sudo docker run --rm \
              -v ${FUZZER}_output:/results \
              -v ${{ github.workspace }}/fuzzing_results/${FUZZER}:/output \
              alpine cp -r /results/* /output/
          done
          
          # Fix permissions on results directory
          sudo chown -R $USER:$USER fuzzing_results

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-results
          path: fuzzing_results
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          echo "Starting final cleanup..."
          
          echo "Disconnecting containers from network..."
          for container in $(sudo docker ps -q); do
            sudo docker network disconnect -f ${{ env.DOCKER_NETWORK_NAME }} $container 2>/dev/null || true
          done
          
          echo "Stopping and removing all containers..."
          sudo docker ps -q | xargs -r sudo docker stop || true
          sudo docker ps -aq | xargs -r sudo docker rm -f || true
          
          echo "Removing Docker network..."
          sudo docker network rm ${{ env.DOCKER_NETWORK_NAME }} || true
          
          echo "Removing fuzzer output volumes..."
          for volume in restler_output wuppiefuzz_output evomaster_output; do
            echo "Removing volume: $volume"
            sudo docker volume rm $volume || true
          done
          
          echo "Pruning unused Docker resources..."
          sudo docker system prune -f || true
          
          echo "Cleanup completed."
        shell: bash
