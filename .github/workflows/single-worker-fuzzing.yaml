name: Single Worker API Fuzzing

on:
  push:
    branches: [ SingleWorker ]
  pull_request:
    branches: [ SingleWorker ]

concurrency:
  group: single-worker-api-fuzzing
  cancel-in-progress: true

permissions:
  contents: read

env:
  DOCKER_NETWORK_NAME: fuzzing_network
  BASE_DIR: ${{ github.workspace }}

jobs:
  restler-fuzzing:
    runs-on: ubuntu-latest
    env:
      VAMPI_PORT: 5012
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check Docker Configuration
        run: |
          chmod +x scripts/check-docker.sh
          ./scripts/check-docker.sh
        shell: bash

      - name: Create Docker Network
        run: |
          echo "Creating Docker network: ${{ env.DOCKER_NETWORK_NAME }}..."
          docker network create ${{ env.DOCKER_NETWORK_NAME }} || true
        shell: bash

      - name: Build and Start VAmPI
        run: |
          # Build VAmPI
          docker build -t vampi-vulnerable:latest \
            --build-arg PORT=${{ env.VAMPI_PORT }} \
            -f services/vampi/Dockerfile services/vampi/

          # Start VAmPI
          docker run -d \
            --name vampi \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -p ${{ env.VAMPI_PORT }}:5000 \
            -e vulnerable=1 \
            --health-cmd "curl -f http://localhost:5000/health || exit 1" \
            --health-interval 10s \
            --health-retries 3 \
            vampi-vulnerable:latest

          echo "Waiting for service to start..."
          sleep 30

          # Check container health
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' vampi)
          echo "Health status: $HEALTH_STATUS"
          
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "::error::VAmPI container is not healthy (status: $HEALTH_STATUS)"
            docker logs vampi
            exit 1
          fi
        shell: bash

      - name: Build RESTler
        run: |
          docker build -t restler-fuzzer:latest \
            -f services/restler/Dockerfile.restler services/restler/
        shell: bash

      - name: Run RESTler Tests
        run: |
          mkdir -p ${{ env.BASE_DIR }}/results/restler
          
          # Copy OpenAPI spec
          docker cp vampi:/vampi/openapi_specs/openapi3.yml ${{ env.BASE_DIR }}/openapi3.yml
          
          # Run RESTler
          docker run --rm \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -v ${{ env.BASE_DIR }}/results/restler:/results \
            -v ${{ env.BASE_DIR }}/openapi3.yml:/workspace/openapi3.yml \
            restler-fuzzer:latest \
            --target_ip vampi \
            --target_port 5000 \
            --time_budget 1h
        shell: bash

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: restler-results
          path: ${{ env.BASE_DIR }}/results/restler
          retention-days: 14

      - name: Cleanup
        if: always()
        run: |
          docker rm -f vampi || true
          docker network rm ${{ env.DOCKER_NETWORK_NAME }} || true
          docker image prune -f || true
        shell: bash

  wuppiefuzz-fuzzing:
    runs-on: ubuntu-latest
    env:
      VAMPI_PORT: 5022
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check Docker Configuration
        run: |
          chmod +x scripts/check-docker.sh
          ./scripts/check-docker.sh
        shell: bash

      - name: Create Docker Network
        run: |
          echo "Creating Docker network: ${{ env.DOCKER_NETWORK_NAME }}..."
          docker network create ${{ env.DOCKER_NETWORK_NAME }} || true
        shell: bash

      - name: Build and Start VAmPI
        run: |
          # Build VAmPI
          docker build -t vampi-vulnerable:latest \
            --build-arg PORT=${{ env.VAMPI_PORT }} \
            -f services/vampi/Dockerfile services/vampi/

          # Start VAmPI
          docker run -d \
            --name vampi \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -p ${{ env.VAMPI_PORT }}:5000 \
            -e vulnerable=1 \
            --health-cmd "curl -f http://localhost:5000/health || exit 1" \
            --health-interval 10s \
            --health-retries 3 \
            vampi-vulnerable:latest

          echo "Waiting for service to start..."
          sleep 30

          # Check container health
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' vampi)
          echo "Health status: $HEALTH_STATUS"
          
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "::error::VAmPI container is not healthy (status: $HEALTH_STATUS)"
            docker logs vampi
            exit 1
          fi
        shell: bash

      - name: Build WuppieFuzz
        run: |
          docker build -t wuppiefuzz:latest \
            -f services/wuppiefuzz/Dockerfile.wuppiefuzz services/wuppiefuzz/
        shell: bash

      - name: Run WuppieFuzz Tests
        run: |
          mkdir -p ${{ env.BASE_DIR }}/results/wuppiefuzz
          
          # Copy OpenAPI spec
          docker cp vampi:/vampi/openapi_specs/openapi3.yml ${{ env.BASE_DIR }}/openapi3.yml
          
          # Run WuppieFuzz
          docker run --rm \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -v ${{ env.BASE_DIR }}/results/wuppiefuzz:/results \
            -v ${{ env.BASE_DIR }}/openapi3.yml:/wuppiefuzz/openapi3.yml \
            wuppiefuzz:latest \
            --target http://vampi:5000 \
            --spec /wuppiefuzz/openapi3.yml \
            --duration 1h
        shell: bash

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: wuppiefuzz-results
          path: ${{ env.BASE_DIR }}/results/wuppiefuzz
          retention-days: 14

      - name: Cleanup
        if: always()
        run: |
          docker rm -f vampi || true
          docker network rm ${{ env.DOCKER_NETWORK_NAME }} || true
          docker image prune -f || true
        shell: bash

  evomaster-fuzzing:
    runs-on: ubuntu-latest
    env:
      VAMPI_PORT: 5032
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check Docker Configuration
        run: |
          chmod +x scripts/check-docker.sh
          ./scripts/check-docker.sh
        shell: bash

      - name: Create Docker Network
        run: |
          echo "Creating Docker network: ${{ env.DOCKER_NETWORK_NAME }}..."
          docker network create ${{ env.DOCKER_NETWORK_NAME }} || true
        shell: bash

      - name: Build and Start VAmPI
        run: |
          # Build VAmPI
          docker build -t vampi-vulnerable:latest \
            --build-arg PORT=${{ env.VAMPI_PORT }} \
            -f services/vampi/Dockerfile services/vampi/

          # Start VAmPI
          docker run -d \
            --name vampi \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -p ${{ env.VAMPI_PORT }}:5000 \
            -e vulnerable=1 \
            --health-cmd "curl -f http://localhost:5000/health || exit 1" \
            --health-interval 10s \
            --health-retries 3 \
            vampi-vulnerable:latest

          echo "Waiting for service to start..."
          sleep 30

          # Check container health
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' vampi)
          echo "Health status: $HEALTH_STATUS"
          
          if [ "$HEALTH_STATUS" != "healthy" ]; then
            echo "::error::VAmPI container is not healthy (status: $HEALTH_STATUS)"
            docker logs vampi
            exit 1
          fi
        shell: bash

      - name: Build EvoMaster
        run: |
          docker build -t evomaster:latest \
            -f services/evomaster/Dockerfile.evomaster services/evomaster/
        shell: bash

      - name: Run EvoMaster Tests
        run: |
          mkdir -p ${{ env.BASE_DIR }}/results/evomaster
          
          # Copy OpenAPI spec
          docker cp vampi:/vampi/openapi_specs/openapi3.yml ${{ env.BASE_DIR }}/openapi3.yml
          
          # Run EvoMaster
          docker run --rm \
            --network ${{ env.DOCKER_NETWORK_NAME }} \
            -v ${{ env.BASE_DIR }}/results/evomaster:/results \
            -v ${{ env.BASE_DIR }}/openapi3.yml:/evomaster/openapi3.yml \
            -e SPEC_PATH=/evomaster/openapi3.yml \
            -e OUTPUT_DIR=/results \
            -e TARGET_URL=http://vampi:5000 \
            -e TIME_BUDGET=1h \
            evomaster:latest
        shell: bash

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: evomaster-results
          path: ${{ env.BASE_DIR }}/results/evomaster
          retention-days: 14

      - name: Cleanup
        if: always()
        run: |
          docker rm -f vampi || true
          docker network rm ${{ env.DOCKER_NETWORK_NAME }} || true
          docker image prune -f || true
        shell: bash

  process-results:
    needs: [restler-fuzzing, wuppiefuzz-fuzzing, evomaster-fuzzing]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Results
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.BASE_DIR }}/results

      - name: Process Results
        run: |
          echo "### Fuzzing Test Summary" > summary.md
          echo "Results for each fuzzer:" >> summary.md
          
          for FUZZER in restler wuppiefuzz evomaster; do
            echo "#### $FUZZER" >> summary.md
            if [ -d "${{ env.BASE_DIR }}/results/$FUZZER-results" ]; then
              find "${{ env.BASE_DIR }}/results/$FUZZER-results" -type f -name "*.json" -exec cat {} \; | \
                jq -r '. | select(.type=="finding") | "- " + .description' >> summary.md || true
            fi
          done

      - name: Upload Summary
        uses: actions/upload-artifact@v3
        with:
          name: fuzzing-summary
          path: summary.md
          retention-days: 14
