name: Fuzz VAmPI with Multiple Tools

on:
  push:
    branches: [More-endpoints]
  pull_request:
    branches: [More-endpoints]

permissions:
  contents: read
  packages: read

jobs:
  evomaster:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Environment Variables
        run: |
          while IFS= read -r line; do
            if [[ ! "$line" =~ ^#.*$ ]] && [[ ! -z "$line" ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < targets/vampi/config.env

      - name: Start VAmPI Container
        run: |
          docker compose -f targets/vampi/docker-compose.vampi.yml up -d
          echo "Waiting for VAmPI to be ready..."
          timeout 30 bash -c 'until curl -s http://localhost:5000/health; do sleep 1; done'
          sleep 5

      - name: Initialize VAmPI Database
        run: |
          echo "Checking VAmPI container status..."
          docker ps
          echo "Attempting to initialize database..."
          curl -v http://localhost:5000/createdb

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '11'

      - name: Download EvoMaster
        run: |
          curl -L -o evomaster.jar https://github.com/EMResearch/EvoMaster/releases/download/v3.4.0/evomaster.jar

      - name: Run EvoMaster in Blackbox Mode
        run: |
          java -jar evomaster.jar \
            --blackBox true \
            --bbSwaggerUrl "${TARGET_SCHEMA}://${TARGET_HOST}:${TARGET_PORT}${TARGET_SWAGGER_PATH}" \
            --outputFormat PYTHON_UNITTEST \
            --maxTime "${FUZZING_DURATION}" \
            --outputFolder generated_tests/vampi \
            --ratePerMinute "${REQUESTS_PER_MINUTE}"

      - name: Upload EvoMaster Results
        uses: actions/upload-artifact@v4
        with:
          name: vampi-evomaster-results
          path: generated_tests/vampi

  wuppiefuzz:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Environment Variables
        run: |
          while IFS= read -r line; do
            if [[ ! "$line" =~ ^#.*$ ]] && [[ ! -z "$line" ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < targets/vampi/config.env

      - name: Start VAmPI Container
        run: |
          docker compose -f targets/vampi/docker-compose.vampi.yml up -d
          echo "Waiting for VAmPI to be ready..."
          timeout 30 bash -c 'until curl -s http://localhost:5000/health; do sleep 1; done'
          sleep 5

      - name: Initialize VAmPI Database
        run: |
          echo "Checking VAmPI container status..."
          docker ps
          echo "Attempting to initialize database..."
          curl -v http://localhost:5000/createdb

      - name: Set up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Clone WuppieFuzz Repository
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release

      - name: Run WuppieFuzz Fuzzing Campaign
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz fuzz \
            --report \
            --log-level info \
            --timeout "${FUZZING_DURATION}" \
            --target-url "${TARGET_SCHEMA}://${TARGET_HOST}:${TARGET_PORT}" \
            "${SWAGGER_FILE}"

      - name: Upload Fuzzing Report
        uses: actions/upload-artifact@v4
        with:
          name: vampi-fuzzing-report
          path: WuppieFuzz/reports/

  restler:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      BASE_DIR: ${{ github.workspace }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Environment Variables
        run: |
          while IFS= read -r line; do
            if [[ ! "$line" =~ ^#.*$ ]] && [[ ! -z "$line" ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < targets/vampi/config.env

      - name: Start VAmPI Container
        run: |
          docker compose -f targets/vampi/docker-compose.vampi.yml up -d
          echo "Waiting for VAmPI to be ready..."
          timeout 30 bash -c 'until curl -s http://localhost:5000/health; do sleep 1; done'
          sleep 5

      - name: Initialize VAmPI Database
        run: |
          echo "Checking VAmPI container status..."
          docker ps
          echo "Attempting to initialize database..."
          curl -v http://localhost:5000/createdb

      - name: Prepare Environment
        run: |
          mkdir -p "$BASE_DIR/fuzzers/restler/output"
          sudo chmod -R 777 "$BASE_DIR/fuzzers/restler/output"

      - name: Run RESTler and VAmPI
        run: |
          cd fuzzers/restler
          docker compose -f docker-compose.restler.yml up --abort-on-container-exit

      - name: Upload RESTler Results
        uses: actions/upload-artifact@v4
        with:
          name: vampi-restler-results
          path: |
            ${{ github.workspace }}/fuzzers/restler/output/Test/
            ${{ github.workspace }}/fuzzers/restler/output/FuzzLean/
            ${{ github.workspace }}/fuzzers/restler/output/Fuzz/

  schemathesis:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Environment Variables
        run: |
          while IFS= read -r line; do
            if [[ ! "$line" =~ ^#.*$ ]] && [[ ! -z "$line" ]]; then
              echo "$line" >> $GITHUB_ENV
            fi
          done < targets/vampi/config.env

      - name: Start VAmPI Container
        run: |
          docker compose -f targets/vampi/docker-compose.vampi.yml up -d
          echo "Waiting for VAmPI to be ready..."
          timeout 30 bash -c 'until curl -s http://localhost:5000/health; do sleep 1; done'
          sleep 5

      - name: Initialize VAmPI Database
        run: |
          echo "Checking VAmPI container status..."
          docker ps
          echo "Attempting to initialize database..."
          curl -v http://localhost:5000/createdb

      - name: Run Schemathesis
        run: |
          cd fuzzers/schemathesis
          docker compose -f docker-compose.schemathesis.yml up --abort-on-container-exit

      - name: Upload Schemathesis Results
        uses: actions/upload-artifact@v4
        with:
          name: vampi-schemathesis-results
          path: fuzzers/schemathesis/output