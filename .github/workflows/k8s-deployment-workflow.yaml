name: Kubernetes Deployment Workflow

on:
  push:
    branches: [ Experiment-kubernetes ]
  workflow_dispatch:
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      deployment-status: ${{ steps.verify.outputs.status }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Cache Docker images
      uses: actions/cache@v3
      with:
        path: /home/runner/.minikube/cache/images
        key: minikube-docker-images-${{ runner.os }}-${{ hashFiles('**/Dockerfile*') }}

    - name: Set up Minikube
      uses: medyagh/setup-minikube@master
      with:
        driver: docker
        kubernetes-version: stable
        cpus: 2
        memory: 4096
        addons: |
          dashboard
          metrics-server
        start: true
        
    - name: Switch to Minikube Docker env
      run: |
        eval $(minikube docker-env)
        
    - name: Build Vampi images
      run: |
        # Build Restler variant
        docker build -t vampi-vulnerable-restler:latest -f services/vampi/Dockerfile services/vampi
        
        # Build Wuppiefuzz variant
        docker build -t vampi-vulnerable-wuppiefuzz:latest -f services/vampi/Dockerfile services/vampi
        
        # Build Evomaster variant
        docker build -t vampi-vulnerable-evomaster:latest -f services/vampi/Dockerfile services/vampi

    - name: Wait for CoreDNS
      run: |
        echo "Waiting for CoreDNS to be ready..."
        kubectl -n kube-system rollout status deployment/coredns --timeout=300s
        
        # Verify DNS resolution
        kubectl run dnsutils --image=gcr.io/kubernetes-e2e-test-images/dnsutils:1.3 \
          --restart=Never --command -- sleep 3600
        kubectl wait --for=condition=ready pod/dnsutils --timeout=60s
        kubectl exec dnsutils -- nslookup kubernetes.default
        kubectl delete pod dnsutils

    - name: Cluster Debug Info
      run: |
        minikube status
        kubectl get nodes -o wide
        kubectl get pods --all-namespaces
        kubectl describe nodes
        kubectl -n kube-system logs -l k8s-app=kube-dns

    - name: Deploy to Kubernetes
      run: |
        # Create namespace
        kubectl apply -f k8s/namespace.yaml
        
        # Apply network policy
        kubectl apply -f k8s/network-policy.yaml
        
        # Verify Network Policies
        echo "Verifying network policies..."
        kubectl describe networkpolicy -n fuzzing-system
        
        # Deploy services
        kubectl apply -f k8s/vampi-restler.yaml
        kubectl apply -f k8s/vampi-wuppiefuzz.yaml
        kubectl apply -f k8s/vampi-evomaster.yaml
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/vampi-restler -n fuzzing-system
        kubectl wait --for=condition=available --timeout=300s deployment/vampi-wuppiefuzz -n fuzzing-system
        kubectl wait --for=condition=available --timeout=300s deployment/vampi-evomaster -n fuzzing-system
        
    - name: Verify deployment
      id: verify
      run: |
        echo "Checking deployment status..."
        kubectl get all -n fuzzing-system
        
        echo "Checking service endpoints..."
        kubectl get services -n fuzzing-system
        
        echo "Checking pod logs..."
        for pod in $(kubectl get pods -n fuzzing-system -o name); do
          echo "Logs for $pod:"
          kubectl logs -n fuzzing-system $pod
        done
        
        # Verify all components are ready
        if kubectl get namespace fuzzing-system &>/dev/null && \
           kubectl get pods -n fuzzing-system -l app=vampi-restler &>/dev/null && \
           kubectl get pods -n fuzzing-system -l app=vampi-wuppiefuzz &>/dev/null && \
           kubectl get pods -n fuzzing-system -l app=vampi-evomaster &>/dev/null && \
           [[ $(kubectl get pods -n fuzzing-system -o jsonpath='{.items[*].status.phase}' | tr ' ' '\n' | grep -v "Running" | wc -l) -eq 0 ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
