name: API Fuzzing Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  DOCKER_NETWORK_NAME: cicd_network
  VAMPI_RESTLER_PORT: 5012
  VAMPI_WUPPIEFUZZ_PORT: 5022
  VAMPI_EVOMASTER_PORT: 5032
  BASE_DIR: ${{ github.workspace }}
  # List of fuzzers
  FUZZERS: restler wuppiefuzz evomaster

jobs:
  initialize_environment:
    runs-on: self-hosted
    outputs:
      swarm-manager-ip: ${{ steps.set-outputs.outputs.swarm-manager-ip }}
      swarm-worker-token: ${{ steps.set-outputs.outputs.swarm-worker-token }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Base Directories
        run: |
          mkdir -p ${{ env.BASE_DIR }}/services/vampi
          mkdir -p ${{ env.BASE_DIR }}/workspace
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_workspace
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_bin
          mkdir -p $HOME/.cargo $HOME/.rustup

      - name: Cleanup Previous Containers
        if: always()
        run: |
          echo "Cleaning up previous containers..."
          docker ps -q | xargs -r docker rm -f || true
          echo "Cleanup complete"

      - name: Setup Docker Swarm
        run: |
          echo "Setting up Docker Swarm..."

          # Force leave any existing swarm
          docker swarm leave -f || true
          sleep 2

          # Get the IP address
          IP=$(hostname -I | awk '{print $1}')
          echo "Using IP: $IP"

          # Initialize swarm
          if ! docker swarm init --advertise-addr $IP; then
            echo "Failed to initialize swarm"
            exit 1
          fi

          # Get and store tokens
          MANAGER_TOKEN=$(docker swarm join-token manager -q)
          WORKER_TOKEN=$(docker swarm join-token worker -q)

          # Create network
          echo "Creating overlay network..."
          docker network create --driver overlay --attachable ${{ env.DOCKER_NETWORK_NAME }} || {
            echo "Failed to create network"
            docker network ls
            exit 1
          }

          echo "Swarm and network created successfully."
          
          # Print info
          echo "=== Swarm Status ==="
          docker info | grep -A5 "Swarm:"
          echo "=== Node List ==="
          docker node ls
          echo "=== Network List ==="
          docker network ls
          
          # Store outputs for downstream jobs
          echo "swarm-manager-ip=$IP" >> $GITHUB_OUTPUT
          echo "swarm-worker-token=$WORKER_TOKEN" >> $GITHUB_OUTPUT

      - name: Verify Environment
        run: |
          echo "=== Docker Info ==="
          docker info
          echo "=== Process List ==="
          ps aux | grep docker

      - name: Verify Network
        run: |
          echo "Network details:"
          docker network inspect ${{ env.DOCKER_NETWORK_NAME }}

      # A placeholder step to produce outputs
      - id: set-outputs
        run: |
          # No-op step, outputs already set above
          echo "Swarm outputs set."


  setup_target_application:
    runs-on: self-hosted
    needs: [initialize_environment]
    env:
      SWARM_MANAGER_IP: ${{ needs.initialize_environment.outputs.swarm-manager-ip }}
      SWARM_WORKER_TOKEN: ${{ needs.initialize_environment.outputs.swarm-worker-token }}
    strategy:
      matrix:
        fuzzer: [restler, wuppiefuzz, evomaster]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Directory Structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of services directory:"
          ls -la services || echo "services directory not found"

      - name: Set VAMPI_PORT
        run: |
          if [ "${{ matrix.fuzzer }}" = "restler" ]; then
            echo "VAMPI_PORT=${{ env.VAMPI_RESTLER_PORT }}" >> $GITHUB_ENV
          elif [ "${{ matrix.fuzzer }}" = "wuppiefuzz" ]; then
            echo "VAMPI_PORT=${{ env.VAMPI_WUPPIEFUZZ_PORT }}" >> $GITHUB_ENV
          else
            echo "VAMPI_PORT=${{ env.VAMPI_EVOMASTER_PORT }}" >> $GITHUB_ENV
          fi

      - name: Start VAmPI Container
        run: |
          cd services/vampi
          
          # Cleanup any existing containers
          echo "Cleaning up existing containers..."
          docker compose down -v || true
          
          # Ensure we're in the swarm
          if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q "active"; then
            echo "Node not in swarm, joining..."
            docker swarm join --token ${{ env.SWARM_WORKER_TOKEN }} ${{ env.SWARM_MANAGER_IP }}:2377 || {
              echo "Failed to join swarm"
              exit 1
            }
          fi
          
          # Verify network exists
          if ! docker network ls | grep -q ${{ env.DOCKER_NETWORK_NAME }}; then
            echo "Network not found, waiting for it..."
            for i in {1..30}; do
              if docker network ls | grep -q ${{ env.DOCKER_NETWORK_NAME }}; then
                echo "Network is now available"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "Network never became available"
                exit 1
              fi
              echo "Waiting for network... attempt $i/30"
              sleep 1
            done
          fi
          
          echo "Starting VAmPI for ${{ matrix.fuzzer }} on port $VAMPI_PORT"
          export PORT=$VAMPI_PORT
          export DOCKER_NETWORK_NAME=${{ env.DOCKER_NETWORK_NAME }}
          
          # Try to start containers with retry
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if docker compose up -d; then
              # Wait for containers to be healthy
              for i in {1..30}; do
                if curl -s http://localhost:$VAMPI_PORT/api/v1/docs > /dev/null; then
                  echo "VAmPI is up and running"
                  docker compose ps
                  exit 0
                fi
                echo "Waiting for VAmPI to be ready... attempt $i/30"
                sleep 1
              done
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Failed to start/verify containers, attempt $RETRY_COUNT of $MAX_RETRIES"
            docker compose down -v
            sleep 5
          done
          
          echo "Failed to start containers after $MAX_RETRIES attempts"
          docker compose logs
          exit 1


  prepare_fuzzers:
    runs-on: self-hosted
    needs: [initialize_environment]
    env:
      SWARM_MANAGER_IP: ${{ needs.initialize_environment.outputs.swarm-manager-ip }}
      SWARM_WORKER_TOKEN: ${{ needs.initialize_environment.outputs.swarm-worker-token }}
    strategy:
      matrix:
        fuzzer: [restler, wuppiefuzz, evomaster]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup RESTler
        if: matrix.fuzzer == 'restler'
        run: |
          echo "Setting up RESTler..."
          # RESTler setup steps here

      - name: Setup WuppieFuzz
        if: matrix.fuzzer == 'wuppiefuzz'
        run: |
          echo "Setting up WuppieFuzz..."
          # WuppieFuzz setup steps here

      - name: Setup EvoMaster
        if: matrix.fuzzer == 'evomaster'
        run: |
          echo "Setting up EvoMaster..."
          mkdir -p tools/evomaster
          cd tools/evomaster
          echo "Downloading EvoMaster..."
          curl -L -o evomaster.jar https://github.com/WebFuzzing/EvoMaster/releases/download/v3.3.0/evomaster.jar
          if [ ! -f evomaster.jar ]; then
            echo "Failed to download EvoMaster"
            exit 1
          fi
          echo "Testing EvoMaster installation..."
          java -jar evomaster.jar --version
          echo "Creating EvoMaster configuration..."
          cat > evomaster.yml <<EOL
blackBox: true
testTargetUrl: http://localhost:${{ env.VAMPI_EVOMASTER_PORT }}
openApiUrl: ./openapi3.yml
outputFormat: JAVA_JUNIT_5
maxTime: 1h
EOL
          echo "EvoMaster setup complete"

      - name: Upload Fuzzer Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fuzzer-${{ matrix.fuzzer }}-artifacts
          path: tools
          retention-days: 1


  prepare_openapi_specs:
    runs-on: self-hosted
    needs: [setup_target_application]
    if: always() && !contains(needs.*.result, 'failure')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate OpenAPI Specs
        run: |
          for fuzzer in restler wuppiefuzz evomaster; do
            case $fuzzer in
              restler)
                PORT=${{ env.VAMPI_RESTLER_PORT }}
                OUTPUT_DIR="${{ env.BASE_DIR }}/workspace/restler"
                ;;
              wuppiefuzz)
                PORT=${{ env.VAMPI_WUPPIEFUZZ_PORT }}
                OUTPUT_DIR="${{ env.BASE_DIR }}/wuppiefuzz_workspace"
                ;;
              evomaster)
                PORT=${{ env.VAMPI_EVOMASTER_PORT }}
                OUTPUT_DIR="${{ env.BASE_DIR }}/workspace/evomaster"
                ;;
            esac
            
            mkdir -p "$OUTPUT_DIR"
            cp ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml "$OUTPUT_DIR/openapi3.yml"
            sed -i "s|http://localhost:5000|http://localhost:$PORT|g" "$OUTPUT_DIR/openapi3.yml"
          done

      - name: Upload OpenAPI Specs
        uses: actions/upload-artifact@v3
        with:
          name: openapi-specs
          path: |
            ${{ env.BASE_DIR }}/workspace/restler/openapi3.yml
            ${{ env.BASE_DIR }}/workspace/evomaster/openapi3.yml
            ${{ env.BASE_DIR }}/wuppiefuzz_workspace/openapi3.yml
          retention-days: 1


  run_fuzzing:
    runs-on: self-hosted
    needs: [prepare_fuzzers, prepare_openapi_specs, setup_target_application]
    strategy:
      matrix:
        fuzzer: [restler, wuppiefuzz, evomaster]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Fuzzer Artifacts
        uses: actions/download-artifact@v3
        with:
          name: fuzzer-${{ matrix.fuzzer }}-artifacts
          path: tools

      - name: Download OpenAPI Specs
        uses: actions/download-artifact@v3
        with:
          name: openapi-specs
          path: openapi_specs

      - name: Set VAMPI_PORT
        run: |
          if [ "${{ matrix.fuzzer }}" = "restler" ]; then
            echo "VAMPI_PORT=${{ env.VAMPI_RESTLER_PORT }}" >> $GITHUB_ENV
          elif [ "${{ matrix.fuzzer }}" = "wuppiefuzz" ]; then
            echo "VAMPI_PORT=${{ env.VAMPI_WUPPIEFUZZ_PORT }}" >> $GITHUB_ENV
          else
            echo "VAMPI_PORT=${{ env.VAMPI_EVOMASTER_PORT }}" >> $GITHUB_ENV
          fi

      - name: Run RESTler
        if: matrix.fuzzer == 'restler'
        run: |
          echo "Running RESTler..."
          # RESTler execution steps here

      - name: Run WuppieFuzz
        if: matrix.fuzzer == 'wuppiefuzz'
        run: |
          echo "Running WuppieFuzz..."
          # WuppieFuzz execution steps here

      - name: Run EvoMaster
        if: matrix.fuzzer == 'evomaster'
        run: |
          echo "Running EvoMaster..."
          cd tools/evomaster
          chmod +x evomaster.jar
          mkdir -p results
          
          echo "Starting EvoMaster with configuration:"
          cat evomaster.yml
          
          java -jar evomaster.jar \
            --blackBox true \
            --testTargetUrl http://localhost:${{ env.VAMPI_EVOMASTER_PORT }} \
            --openApiUrl ../../openapi_specs/openapi3.yml \
            --outputFormat JAVA_JUNIT_5 \
            --maxTime 1h \
            --outputFolder ./results \
            --problemType REST
          
          echo "EvoMaster execution completed"
          if [ -d "results" ]; then
            echo "Test results generated successfully"
            ls -la results/
          else
            echo "No results directory found"
            exit 1
          fi

      - name: Upload Fuzzing Results
        uses: actions/upload-artifact@v3
        with:
          name: fuzzing-results-${{ matrix.fuzzer }}
          path: |
            tools/**/results
            tools/**/output
          retention-days: 1


  summarize_results:
    runs-on: self-hosted
    needs: run_fuzzing
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Download and summarize results for all fuzzers
      - name: Download RESTler Results
        uses: actions/download-artifact@v4
        with:
          name: fuzzing-results-restler
          path: all_results/restler-results
          if-no-files-found: warn

      - name: Download WuppieFuzz Results
        uses: actions/download-artifact@v4
        with:
          name: fuzzing-results-wuppiefuzz
          path: all_results/wuppiefuzz-results
          if-no-files-found: warn

      - name: Download EvoMaster Results
        uses: actions/download-artifact@v4
        with:
          name: fuzzing-results-evomaster
          path: all_results/evomaster-results
          if-no-files-found: warn

      - name: List Downloaded Artifacts
        run: |
          echo "Listing RESTler Results:"
          ls -la all_results/restler-results || echo "No RESTler results found."
          echo "Listing WuppieFuzz Results:"
          ls -la all_results/wuppiefuzz-results || echo "No WuppieFuzz results found."
          echo "Listing EvoMaster Results:"
          ls -la all_results/evomaster-results || echo "No EvoMaster results found."

      - name: Final Cleanup
        if: always()
        run: |
          echo "Pruning Docker containers..."
          docker container prune -f || echo "Failed to prune Docker containers."
          echo "Pruning Docker networks..."
          docker network prune -f || echo "Failed to prune Docker networks."
