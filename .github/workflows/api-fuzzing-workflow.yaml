name: API Fuzzing Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

env:
  DOCKER_NETWORK_NAME: cicd_network
  VAMPI_RESTLER_PORT: 5012
  VAMPI_WUPPIEFUZZ_PORT: 5022
  VAMPI_EVOMASTER_PORT: 5032
  BASE_DIR: ${{ github.workspace }}

jobs:
  initialize_environment:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Base Directories
        run: |
          mkdir -p ${{ env.BASE_DIR }}/services/vampi
          mkdir -p ${{ env.BASE_DIR }}/workspace
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_workspace
          mkdir -p $HOME/.cargo $HOME/.rustup
        shell: bash

      - name: Cleanup Previous Containers
        if: always()
        run: |
          # Force remove the network first
          sudo docker network rm ${{ env.DOCKER_NETWORK_NAME }} 2>/dev/null || true
          
          # Kill all containers (more aggressive than stop)
          sudo docker ps -q | xargs -r sudo docker kill 2>/dev/null || true
          
          # Force remove all containers without stopping
          sudo docker ps -aq | xargs -r sudo docker rm -f 2>/dev/null || true
          
          # Final cleanup of any dangling resources
          sudo docker system prune -f --volumes 2>/dev/null || true
          
          # Sleep to allow system to settle
          sleep 5
        shell: bash

      - name: Create Docker Network
        run: |
          if ! sudo docker network inspect $DOCKER_NETWORK_NAME >/dev/null 2>&1; then
            for i in {1..3}; do
              if sudo docker network create --subnet=172.20.0.0/16 $DOCKER_NETWORK_NAME; then
                echo "Network created successfully"
                break
              fi
              if [ $i -eq 3 ]; then
                echo "Failed to create network after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying..."
              sleep 2
            done
          fi
        shell: bash

  setup_target_application:
    runs-on: self-hosted
    needs: initialize_environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build VAmPI Docker Images
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          # Cleanup existing containers
          sudo docker compose -f docker-compose.yaml down --remove-orphans || true
          # Build fresh images
          sudo docker compose -f docker-compose.yaml build --force-rm
        shell: bash

  prepare_fuzzers:
    runs-on: self-hosted
    needs: initialize_environment
    strategy:
      matrix:
        fuzzer: [restler, wuppiefuzz, evomaster]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Fuzzer Environment
        run: |
          case "${{ matrix.fuzzer }}" in
            "restler")
              mkdir -p ${{ env.BASE_DIR }}/workspace/restler/{config,output}
              ;;
            "wuppiefuzz")
              mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_workspace
              mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_bin
              ;;
            "evomaster")
              mkdir -p ${{ env.BASE_DIR }}/workspace/evomaster/evomaster_results
              ;;
          esac
        shell: bash

      - name: Get WuppieFuzz Latest Commit
        if: matrix.fuzzer == 'wuppiefuzz'
        id: get-commit
        run: |
          LATEST_COMMIT=$(git ls-remote https://github.com/TNO-S3/WuppieFuzz.git HEAD | cut -f1)
          echo "commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache WuppieFuzz Binary
        if: matrix.fuzzer == 'wuppiefuzz'
        id: cache-wuppiefuzz
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/wuppiefuzz_bin
          key: wuppiefuzz-${{ steps.get-commit.outputs.commit }}
          restore-keys: |
            wuppiefuzz-

      - name: Setup Rust for WuppieFuzz
        if: matrix.fuzzer == 'wuppiefuzz' && steps.cache-wuppiefuzz.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Build Dependencies
        if: matrix.fuzzer == 'wuppiefuzz' && steps.cache-wuppiefuzz.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
        shell: bash

      - name: Build WuppieFuzz
        if: matrix.fuzzer == 'wuppiefuzz' && steps.cache-wuppiefuzz.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/TNO-S3/WuppieFuzz.git ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cd ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cargo build --release
          cp target/release/wuppiefuzz ${{ env.BASE_DIR }}/wuppiefuzz_bin/
          cd ${{ env.BASE_DIR }}
          rm -rf wuppiefuzz_temp
        shell: bash

      - name: Upload WuppieFuzz Binary
        if: matrix.fuzzer == 'wuppiefuzz'
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: ${{ env.BASE_DIR }}/wuppiefuzz_bin/wuppiefuzz
          if-no-files-found: error
          retention-days: 1

  prepare_openapi_specs:
    runs-on: self-hosted
    needs: initialize_environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate OpenAPI Specs
        run: |
          for fuzzer in "restler" "wuppiefuzz" "evomaster"; do
            case $fuzzer in
              "restler")
                PORT=${{ env.VAMPI_RESTLER_PORT }}
                OUTPUT_DIR="${{ env.BASE_DIR }}/workspace/restler"
                ;;
              "wuppiefuzz")
                PORT=${{ env.VAMPI_WUPPIEFUZZ_PORT }}
                OUTPUT_DIR="${{ env.BASE_DIR }}/wuppiefuzz_workspace"
                ;;
              "evomaster")
                PORT=${{ env.VAMPI_EVOMASTER_PORT }}
                OUTPUT_DIR="${{ env.BASE_DIR }}/workspace/evomaster"
                ;;
            esac
            
            mkdir -p "$OUTPUT_DIR"
            cp ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml "$OUTPUT_DIR/openapi3.yml"
            sed -i "s|http://localhost:5000|http://localhost:$PORT|g" "$OUTPUT_DIR/openapi3.yml"
          done
        shell: bash

  run_fuzzing:
    runs-on: self-hosted
    needs: [prepare_fuzzers, prepare_openapi_specs]
    strategy:
      matrix:
        fuzzer: [restler, wuppiefuzz, evomaster]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Workspace Directories
        run: |
          case "${{ matrix.fuzzer }}" in
            "restler")
              mkdir -p ${{ env.BASE_DIR }}/workspace/restler/{config,output}
              ;;
            "wuppiefuzz")
              mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_workspace/{bin,reports,corpus_directory}
              ;;
            "evomaster")
              mkdir -p ${{ env.BASE_DIR }}/workspace/evomaster/evomaster_results
              ;;
          esac
        shell: bash

      - name: Create RESTler Config
        if: matrix.fuzzer == 'restler'
        run: |
          cat > ${{ env.BASE_DIR }}/workspace/restler/config/engine_settings.json << 'EOF'
          {
            "max_combinations": 20,
            "max_request_execution_time": 10,
            "max_async_resource_creation_time": 20,
            "global_producer_timing_delay": 2,
            "dyn_objects_cache_size": 10,
            "fuzzing_mode": "directed-smoke-test",
            "test_all_combinations": false,
            "test_combinations_settings": {
              "max_combinations": 20
            }
          }
          EOF
        shell: bash

      - name: Configure Fuzzer
        run: |
          case "${{ matrix.fuzzer }}" in
            "restler")
              # Copy RESTler files
              cp -r ${{ env.BASE_DIR }}/services/restler/config/* ${{ env.BASE_DIR }}/workspace/restler/config/
              cp ${{ env.BASE_DIR }}/services/restler/docker-compose.restler.yml ${{ env.BASE_DIR }}/workspace/restler/
              cp ${{ env.BASE_DIR }}/services/restler/Dockerfile.restler ${{ env.BASE_DIR }}/workspace/restler/
              cp ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml ${{ env.BASE_DIR }}/workspace/restler/openapi3.yml
              ;;
            "wuppiefuzz")
              # Copy OpenAPI spec to WuppieFuzz workspace
              cp ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml ${{ env.BASE_DIR }}/wuppiefuzz_workspace/
              echo "VAMPI_URL=http://localhost:5002" >> $GITHUB_ENV
              ;;
            "evomaster")
              # Copy OpenAPI spec to EvoMaster workspace
              cp ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml ${{ env.BASE_DIR }}/workspace/evomaster/
              echo "VAMPI_URL=http://localhost:5002" >> $GITHUB_ENV
              ;;
          esac
        shell: bash

      - name: Start VAmPI Container
        run: |
          case "${{ matrix.fuzzer }}" in
            "restler")
              cd ${{ env.BASE_DIR }}/services/vampi
              PORT=5012 COMPOSE_PROJECT_NAME=vampi_restler docker compose up -d vampi-vulnerable
              
              echo "Waiting for VAmPI RESTler instance..."
              for i in {1..30}; do
                if curl -s http://localhost:5012/health >/dev/null; then
                  echo "VAmPI RESTler instance is ready!"
                  break
                fi
                if [ $i -eq 30 ]; then
                  echo "VAmPI failed to start. Container logs:"
                  docker logs vampi_restler-vampi-vulnerable
                  exit 1
                fi
                echo "Waiting for VAmPI to be ready (attempt $i/30)..."
                sleep 2
              done
              
              # Start RESTler with its own docker compose
              cd ${{ env.BASE_DIR }}/services/restler
              docker compose -f docker-compose.restler.yml up --build
              ;;
              
            "wuppiefuzz")
              cd ${{ env.BASE_DIR }}/services/vampi
              PORT=5022 COMPOSE_PROJECT_NAME=vampi_wuppiefuzz docker compose up -d vampi-vulnerable
              
              echo "Waiting for VAmPI WuppieFuzz instance..."
              for i in {1..30}; do
                if curl -s http://localhost:5022/health >/dev/null; then
                  echo "VAmPI WuppieFuzz instance is ready!"
                  break
                fi
                if [ $i -eq 30 ]; then
                  echo "VAmPI failed to start. Container logs:"
                  docker logs vampi_wuppiefuzz-vampi-vulnerable
                  exit 1
                fi
                echo "Waiting for VAmPI to be ready (attempt $i/30)..."
                sleep 2
              done
              ;;
              
            "evomaster")
              cd ${{ env.BASE_DIR }}/services/vampi
              PORT=5032 COMPOSE_PROJECT_NAME=vampi_evomaster docker compose up -d vampi-vulnerable
              
              echo "Waiting for VAmPI EvoMaster instance..."
              for i in {1..30}; do
                if curl -s http://localhost:5032/health >/dev/null; then
                  echo "VAmPI EvoMaster instance is ready!"
                  break
                fi
                if [ $i -eq 30 ]; then
                  echo "VAmPI failed to start. Container logs:"
                  docker logs vampi_evomaster-vampi-vulnerable
                  exit 1
                fi
                echo "Waiting for VAmPI to be ready (attempt $i/30)..."
                sleep 2
              done
              
              # Start EvoMaster with its own docker compose
              cd ${{ env.BASE_DIR }}/services/evomaster
              docker compose -f docker-compose.evomaster.yml up --build
              ;;
          esac
        shell: bash

      - name: Download WuppieFuzz Binary
        if: matrix.fuzzer == 'wuppiefuzz'
        uses: actions/download-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: ${{ env.BASE_DIR }}/wuppiefuzz_workspace/bin

      - name: Run Fuzzer
        run: |
          case "${{ matrix.fuzzer }}" in
            "restler")
              cd ${{ env.BASE_DIR }}/workspace/restler
              docker compose -f docker-compose.restler.yaml up --build
              ;;
            
            "wuppiefuzz")
              cd ${{ env.BASE_DIR }}/wuppiefuzz_workspace
              chmod +x bin/wuppiefuzz

              # Update OpenAPI spec with correct port
              sed -i 's|http://localhost:5000|http://localhost:5022|g' openapi3.yml

              # Run WuppieFuzz
              ./bin/wuppiefuzz output-corpus \
                --report \
                --log-level=info \
                --initial-corpus=corpus_directory \
                --coverage-host=localhost:5022 \
                --timeout=60 \
                openapi3.yml
              ;;
            
            "evomaster")
              cd ${{ env.BASE_DIR }}/workspace/evomaster
              # Start EvoMaster container
              sudo docker run --rm --network ${{ env.DOCKER_NETWORK_NAME }} \
                -v $(pwd)/evomaster_results:/evomaster_results \
                -e VAMPI_URL=http://localhost:5032/openapi3.yml \
                evomaster:latest \
                --blackBox true \
                --bbSwaggerUrl http://localhost:5032/openapi3.yml \
                --outputFormat JAVA_JUNIT_4 \
                --maxTime 1m \
                --ratePerMinute 100
              ;;
          esac
        shell: bash

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.fuzzer }}-results
          path: |
            ${{ env.BASE_DIR }}/workspace/restler/output/**
            ${{ env.BASE_DIR }}/wuppiefuzz_workspace/reports/**
            ${{ env.BASE_DIR }}/workspace/evomaster/evomaster_results/**
          if-no-files-found: warn

      - name: Cleanup
        if: always()
        run: |
          cd ${{ env.BASE_DIR }}/services/vampi
          
          # Clean up all docker compose files and their containers
          for file in docker-compose.*.yaml; do
            if [ -f "$file" ]; then
              echo "Cleaning up $file"
              docker compose -f "$file" down --remove-orphans
            fi
          done
          
          # Additional cleanup of any stray containers
          docker ps -a | grep 'vampi-' | awk '{print $1}' | xargs -r docker rm -f
        shell: bash

  summarize_results:
    runs-on: self-hosted
    needs: run_fuzzing
    steps:
      - name: Download Fuzzer Results
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.fuzzer }}-results
          path: all_results/${{ matrix.fuzzer }}-results
          if-no-files-found: warn

      - name: List Downloaded Artifacts
        run: |
          echo "Listing ${{ matrix.fuzzer }} Results:"
          ls -la all_results/${{ matrix.fuzzer }}-results || echo "${{ matrix.fuzzer }} results directory not found."
        shell: bash
        continue-on-error: true

      - name: Final Cleanup
        if: always()
        run: |
          echo "Pruning Docker containers..."
          sudo docker container prune -f || echo "Failed to prune Docker containers."
          echo "Pruning Docker networks..."
          sudo docker network prune -f || echo "Failed to prune Docker networks."
        shell: bash

  cleanup_all:
    runs-on: self-hosted
    needs: summarize_results
    if: always()
    steps:
      - name: Cleanup Docker Resources
        run: |
          echo "Cleaning up Docker resources..."
          # Clean up containers
          sudo docker compose -f ${{ env.BASE_DIR }}/services/vampi/docker-compose.yaml down --remove-orphans || true
          sudo docker compose -f ${{ env.BASE_DIR }}/workspace/restler/docker-compose.restler.yaml down --remove-orphans || true
          sudo docker compose -f ${{ env.BASE_DIR }}/workspace/evomaster/docker-compose.evomaster.yaml down --remove-orphans || true
          
          # Remove network if it exists
          if sudo docker network inspect $DOCKER_NETWORK_NAME >/dev/null 2>&1; then
            sudo docker network rm $DOCKER_NETWORK_NAME || true
          fi
        shell: bash

      - name: Cleanup Workspace
        run: |
          echo "Cleaning up workspace..."
          rm -rf ${{ env.BASE_DIR }}/workspace/restler/output/* || true
          rm -rf ${{ env.BASE_DIR }}/wuppiefuzz_workspace/reports/* || true
          rm -rf ${{ env.BASE_DIR }}/workspace/evomaster/evomaster_results/* || true
        shell: bash
