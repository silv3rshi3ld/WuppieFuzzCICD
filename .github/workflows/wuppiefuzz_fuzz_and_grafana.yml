name: WuppieFuzz Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_fuzz (Wuppiefuzz):
    runs-on: self-hosted

    steps:
      - name: Clean up Docker networks and containers
        if: always()
        run: |
          docker-compose down --remove-orphans
          docker network rm wuppycicd_network || true
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false

      - name: Manually clean untracked files
        run: |
          sudo rm -rf reports/
          git clean -ffdx
      - name: Get WuppieFuzz commit hash
        id: wuppiefuzz_commit
        run: |
          git ls-remote https://github.com/TNO-S3/WuppieFuzz.git HEAD | awk '{print $1}' > wuppiefuzz_commit.txt
          echo "commit_hash=$(cat wuppiefuzz_commit.txt)" >> $GITHUB_ENV
      - name: Clone WuppieFuzz repository
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      - name: Cache Rust dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            WuppieFuzz/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('WuppieFuzz/Cargo.lock') }}-${{ env.commit_hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and run services with Docker Compose
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
        run: |
          docker network inspect wuppycicd_network >/dev/null 2>&1 || docker network create wuppycicd_network
          docker-compose up -d --build

      - name: Wait for services to start
        run: sleep 15

      - name: Test API Connectivity
        run: curl -I http://localhost:3001

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies for WuppieFuzz
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      
      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release
          cd ..

      - name: Add WuppieFuzz to PATH
        run: |
          echo "${{ github.workspace }}/WuppieFuzz/target/release" >> $GITHUB_PATH

      - name: Generate initial corpus
        run: wuppiefuzz output-corpus --openapi-spec=openapi.yaml corpus_directory

      - name: Run WuppieFuzz
        env:
          RUST_BACKTRACE: 1
        run: |
          if [ -f "login.yaml" ]; then
            wuppiefuzz fuzz --report=true --log-level=info --initial-corpus=corpus_directory --timeout=60 --authentication login.yaml openapi.yaml
          else
            wuppiefuzz fuzz --report=true --log-level=info --initial-corpus=corpus_directory --timeout=60 openapi.yaml
          fi

      - name: Upload report directory
        uses: actions/upload-artifact@v4
        with:
          name: report-directory
          path: reports/

      - name: Adjust permissions of workspace
        if: always()
        run: |
          sudo chown -R $(id -u):$(id -g) $GITHUB_WORKSPACE
          sudo chmod -R u+rwX $GITHUB_WORKSPACE


  grafana_setup:
    runs-on: self-hosted
    needs: build_and_fuzz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false

      - name: Clone WuppieFuzz-dashboard repository
        run: git clone https://github.com/TNO-S3/WuppieFuzz-dashboard.git

      - name: Download report directory
        uses: actions/download-artifact@v4
        with:
          name: report-directory
          path: reports/

      - name: Install unzip
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

      - name: Extract report.db from artifact
        run: |
          mkdir -p reports/grafana
          unzip reports/report-directory.zip '*/report.db' -d reports/grafana
          mv reports/grafana/*/report.db reports/grafana/report.db
          rm -rf reports/grafana/*/

      - name: Adjust permissions of workspace
        if: always()
        run: |
          sudo chown -R $(id -u):$(id -g) $GITHUB_WORKSPACE
          sudo chmod -R u+rwX $GITHUB_WORKSPACE
