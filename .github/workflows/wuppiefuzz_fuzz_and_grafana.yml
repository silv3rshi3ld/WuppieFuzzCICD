name: WuppieFuzz Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_fuzz:
    runs-on: self-hosted

    steps:
      # Clean up Docker networks and containers
      - name: Clean up Docker networks and containers
        if: always()
        run: |
          docker-compose down --remove-orphans
          docker network rm wuppycicd_network || true

      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false

      # Manually clean untracked files
      - name: Manually clean untracked files
        run: |
          sudo rm -rf reports/
          git clean -ffdx

      # Get WuppieFuzz commit hash
      - name: Get WuppieFuzz commit hash
        id: wuppiefuzz_commit
        run: |
          git ls-remote https://github.com/TNO-S3/WuppieFuzz.git HEAD | awk '{print $1}' > wuppiefuzz_commit.txt
          echo "commit_hash=$(cat wuppiefuzz_commit.txt)" >> $GITHUB_ENV

      # Clone WuppieFuzz repository
      - name: Clone WuppieFuzz repository
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      # Cache Rust dependencies and build artifacts
      - name: Cache Rust dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            WuppieFuzz/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('WuppieFuzz/Cargo.lock') }}-${{ env.commit_hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and run services with Docker Compose
      - name: Build and run services with Docker Compose
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
        run: |
          docker network inspect wuppycicd_network >/dev/null 2>&1 || docker network create wuppycicd_network
          docker-compose up -d --build

      # Wait for services to start
      - name: Wait for services to start
        run: sleep 15

      # Test API Connectivity
      - name: Test API Connectivity
        run: curl -I http://localhost:3001

      # Install Rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # Install dependencies for WuppieFuzz
      - name: Install dependencies for WuppieFuzz
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      # Build WuppieFuzz
      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release
          cd ..

      # Add WuppieFuzz to PATH
      - name: Add WuppieFuzz to PATH
        run: |
          echo "${{ github.workspace }}/WuppieFuzz/target/release" >> $GITHUB_PATH

      # Generate initial corpus
      - name: Generate initial corpus
        run: wuppiefuzz output-corpus --openapi-spec=openapi.yaml corpus_directory

      # Run WuppieFuzz
      - name: Run WuppieFuzz
        env:
          RUST_BACKTRACE: 1
        run: |
          if [ -f "login.yaml" ]; then
            wuppiefuzz fuzz --report=true --log-level=info --initial-corpus=corpus_directory --timeout=60 --authentication login.yaml openapi.yaml
          else
            wuppiefuzz fuzz --report=true --log-level=info --initial-corpus=corpus_directory --timeout=60 openapi.yaml
          fi

      # Upload report directory
      - name: Upload report directory
        uses: actions/upload-artifact@v4
        with:
          name: report-directory
          path: reports/

      # Adjust permissions of workspace
      - name: Adjust permissions of workspace
        if: always()
        run: |
          sudo chown -R $(id -u):$(id -g) $GITHUB_WORKSPACE
          sudo chmod -R u+rwX $GITHUB_WORKSPACE

  triage_reports:
    runs-on: self-hosted
    needs: build_and_fuzz

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false

      # Download report directory
      - name: Download report directory
        uses: actions/download-artifact@v4
        with:
          name: report-directory
          path: reports/

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install --upgrade pip
          pip3 install requests

      # Create API Fuzz Wrapper Script
      - name: Create API Fuzz Wrapper Script
        run: |
          cat <<EOF > api_fuzz_wrapper.py
          #!/usr/bin/env python3
          import sys
          import requests
          def main():
              if len(sys.argv) != 2:
                  print("Usage: api_fuzz_wrapper.py <input_file>")
                  sys.exit(1)
              input_file = sys.argv[1]
              with open(input_file, 'r') as f:
                  data = f.read()
              url = "http://localhost:3001/your_endpoint"
              headers = {
                  'Content-Type': 'application/json',
              }
              try:
                  response = requests.post(url, headers=headers, data=data)
                  print(response.status_code)
                  print(response.text)
              except Exception as e:
                  print(f"Error: {e}", file=sys.stderr)
                  sys.exit(1)
          if __name__ == "__main__":
              main()
          EOF
          chmod +x api_fuzz_wrapper.py

      # Check for crashes
      - name: Check for crashes
        id: check_crashes
        run: |
          if [ -d "reports/crashes" ] && [ "$(ls -A reports/crashes)" ]; then
            echo "crashes_found=true" >> $GITHUB_OUTPUT
          else
            echo "crashes_found=false" >> $GITHUB_OUTPUT
          fi

      # Start API Service
      - name: Start API Service
        run: |
          docker-compose up -d api_service

      # Build AFLTriage Docker Image
      - name: Build AFLTriage Docker Image
        run: |
          docker build -f Dockerfile.afltriage -t afltriage .

      # Run AFLTriage in Docker Container
      - name: Run AFLTriage in Docker Container
        if: steps.check_crashes.outputs.crashes_found == 'true'
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}/reports:/app/reports \
            -v ${{ github.workspace }}/triaged_reports:/app/triaged_reports \
            afltriage \
            -i /app/reports/crashes/ \
            -o /app/triaged_reports/ \
            python3 /app/api_fuzz_wrapper.py @@

      # Upload triaged reports
      - name: Upload triaged reports
        if: steps.check_crashes.outputs.crashes_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: triaged-reports
          path: triaged_reports/

      # Stop API Service
      - name: Stop API Service
        if: always()
        run: |
          docker-compose down

      # Adjust permissions of workspace
      - name: Adjust permissions of workspace
        if: always()
        run: |
          sudo chown -R $(id -u):$(id -g) $GITHUB_WORKSPACE
          sudo chmod -R u+rwX $GITHUB_WORKSPACE

  grafana_setup:
    runs-on: self-hosted
    needs: triage_reports

    steps:
      # Clean up Docker networks and containers
      - name: Clean up Docker networks and containers
        if: always()
        run: |
          docker-compose -f docker-compose-grafana.yml down --remove-orphans
          docker network rm wuppycicd_network || true

      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false

      # Download report directory
      - name: Download report directory
        uses: actions/download-artifact@v4
        with:
          name: report-directory
          path: reports/

      # Download triaged reports
      - name: Download triaged reports
        uses: actions/download-artifact@v4
        with:
          name: triaged-reports
          path: triaged_reports/

      # Prepare provisioning files
      - name: Prepare provisioning files
        run: |
          mkdir -p provisioning/dashboards
          mkdir -p provisioning/datasources
          cp WuppieFuzz-dashboard/provisioning/dashboards.yaml provisioning/dashboards/
          cp WuppieFuzz-dashboard/provisioning/datasources.yaml provisioning/datasources/
          cp WuppieFuzz-dashboard/grafana.ini ./grafana.ini
          cp -r WuppieFuzz-dashboard/dashboards/*.json provisioning/dashboards/

      # Adjust permissions for Grafana files
      - name: Adjust permissions for Grafana files
        run: |
          sudo chown -R 472:472 reports
          sudo chown -R 472:472 triaged_reports
          sudo chown -R 472:472 provisioning
          sudo chown 472:472 grafana.ini

      # Build custom Grafana image with SQLite plugin
      - name: Build custom Grafana image with SQLite plugin
        run: |
          echo 'FROM grafana/grafana-enterprise
          RUN grafana-cli plugins install frser-sqlite-datasource
          ' > Dockerfile
          docker build -t custom-grafana .

      # Set up Grafana
      - name: Set up Grafana
        env:
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        run: |
          docker network inspect wuppycicd_network >/dev/null 2>&1 || docker network create wuppycicd_network
          docker-compose -f docker-compose-grafana.yml up -d
          docker ps -a

      # Wait for Grafana to start
      - name: Wait for Grafana to start
        run: |
          for i in {1..10}; do
            if docker inspect -f '{{.State.Running}}' grafana-dashboard | grep true; then
              echo "Grafana is running"
              break
            else
              echo "Waiting for Grafana to start..."
              sleep 10
            fi
          done

      # Output Grafana logs
      - name: Output Grafana logs
        run: docker logs grafana-dashboard

      # Adjust permissions of workspace
      - name: Adjust permissions of workspace
        if: always()
        run: |
          sudo chown -R $(id -u):$(id -g) $GITHUB_WORKSPACE
          sudo chmod -R u+rwX $GITHUB_WORKSPACE
