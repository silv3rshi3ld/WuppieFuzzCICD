name: Fuzz VAmPI with WuppieFuzz and EvoMaster

on:
  push:
    branches: [ Less-dependent-build]
  pull_request:
    branches: [ Less-dependent-build]

jobs:
  evomaster:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Start VAmPI with Docker
      - name: Start VAmPI Container
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      # 3. Initialize VAmPI Database
      - name: Initialize VAmPI Database
        run: |
          curl -s http://localhost:5000/createdb

      # 4. Set up Java and Build Driver
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Create EvoMaster Driver
        run: |
          mkdir -p evomaster-driver/src/main/java/org/vampi
          cat > evomaster-driver/pom.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>
              <groupId>org.vampi</groupId>
              <artifactId>evomaster-driver</artifactId>
              <version>1.0-SNAPSHOT</version>
              <dependencies>
                  <dependency>
                      <groupId>org.evomaster</groupId>
                      <artifactId>evomaster-client-java-controller</artifactId>
                      <version>3.4.0</version>
                  </dependency>
              </dependencies>
              <build>
                  <plugins>
                      <plugin>
                          <groupId>org.apache.maven.plugins</groupId>
                          <artifactId>maven-shade-plugin</artifactId>
                          <version>3.5.1</version>
                          <executions>
                              <execution>
                                  <phase>package</phase>
                                  <goals>
                                      <goal>shade</goal>
                                  </goals>
                                  <configuration>
                                      <transformers>
                                          <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                              <mainClass>org.vampi.VAmPIDriver</mainClass>
                                          </transformer>
                                      </transformers>
                                  </configuration>
                              </execution>
                          </executions>
                      </plugin>
                  </plugins>
              </build>
              <properties>
                  <maven.compiler.source>11</maven.compiler.source>
                  <maven.compiler.target>11</maven.compiler.target>
              </properties>
          </project>
          EOF

          cat > evomaster-driver/src/main/java/org/vampi/VAmPIDriver.java << 'EOF'
          package org.vampi;

          import org.evomaster.client.java.controller.EmbeddedSutController;
          import org.evomaster.client.java.controller.api.dto.AuthenticationDto;
          import org.evomaster.client.java.controller.api.dto.SutInfoDto;
          import org.evomaster.client.java.controller.problem.ProblemInfo;
          import org.evomaster.client.java.controller.problem.RestProblem;

          import java.util.List;

          public class VAmPIDriver extends EmbeddedSutController {
              public static void main(String[] args) {
                  VAmPIDriver controller = new VAmPIDriver();
                  controller.startSut();
              }

              @Override
              public String startSut() {
                  return "http://localhost:5000";
              }

              @Override
              public void stopSut() {}

              @Override
              public String getPackagePrefixesToCover() {
                  return "org.vampi.";
              }

              @Override
              public void resetStateOfSUT() {
                  // Reset database
                  try {
                      Runtime.getRuntime().exec("curl -s http://localhost:5000/createdb");
                  } catch (Exception e) {
                      e.printStackTrace();
                  }
              }

              @Override
              public List<AuthenticationDto> getInfoForAuthentication() {
                  return null;
              }

              @Override
              public ProblemInfo getProblemInfo() {
                  return new RestProblem(
                      "http://localhost:5000/openapi_specs/openapi3.yml"
                  );
              }

              @Override
              public SutInfoDto.OutputFormat getPreferredOutputFormat() {
                  return SutInfoDto.OutputFormat.PYTHON_UNITTEST;
              }
          }
          EOF

      - name: Build Driver
        run: |
          cd evomaster-driver
          mvn clean package

      # 5. Start Driver and Download EvoMaster
      - name: Start Driver
        run: |
          nohup java -jar evomaster-driver/target/evomaster-driver-1.0-SNAPSHOT.jar &
          sleep 10

      - name: Download EvoMaster
        run: |
          curl -L -o evomaster.jar https://github.com/EMResearch/EvoMaster/releases/download/v3.4.0/evomaster.jar

      - name: Run EvoMaster White-Box Testing
        run: |
          java -jar evomaster.jar \
            --maxTime 1h \
            --outputFolder generated_tests \
            --sutControllerHost localhost \
            --sutControllerPort 40100

      # 6. Upload EvoMaster-generated files as an artifact
      - name: Upload EvoMaster Results
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: generated_tests

  wuppiefuzz:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Run VAmPI via Docker in vulnerable mode.
      - name: Start VAmPI Container (Vulnerable Mode)
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      # 3. Initialize the VAmPI database.
      - name: Initialize VAmPI Database
        run: |
          curl -s http://localhost:5000/createdb

      # 4. Set up the Rust toolchain.
      - name: Set up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 5. Clone the WuppieFuzz repository.
      - name: Clone WuppieFuzz
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      # 6. Build WuppieFuzz.
      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release

      # 7. Generate an initial corpus from the OpenAPI specification.
      - name: Generate Initial Corpus for Fuzzing
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz output-corpus --openapi-spec ../services/vampi/openapi_specs/openapi3.yml corpus_directory

      # 8. Run the fuzzing campaign.
      - name: Run WuppieFuzz Fuzzing Campaign
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz fuzz \
            --report \
            --log-level info \
            --initial-corpus corpus_directory \
            --timeout 60 \
            ../services/vampi/openapi_specs/openapi3.yml

      # 9. Upload the generated fuzzing reports as an artifact.
      - name: Upload Fuzzing Report
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-report
          path: WuppieFuzz/reports/
