name: Fuzz VAmPI with WuppieFuzz and EvoMaster

on:
  push:
    branches: [ Less-dependent-build ]
  pull_request:
    branches: [ Less-dependent-build ]

jobs:
  whitebox:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Java (using Temurin Java 11; adjust if necessary).
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '11'

      # 3. Build the SUT and the white-box driver.
      - name: Build SUT and Whitebox Driver
        run: mvn clean package

      # 4. Start the white-box SUT driver.
      #    Your driver jar (e.g., target/your-sut-driver.jar) should start your instrumented SUT,
      #    open a controller server (by default on port 40100) and expose the API schema.
      - name: Start Whitebox SUT Driver
        run: |
          nohup java -jar target/your-sut-driver.jar &
          # Allow time for the SUT to start and be instrumented.
          sleep 10

      # 5. Run EvoMaster in white-box mode.
      #    Do not use --blackBox nor --bbSwaggerUrl. Instead, specify the SUT controller host/port,
      #    and set a valid output format (e.g., JAVA_JUNIT_5).
      - name: Run EvoMaster in Whitebox Mode
        run: |
          java -jar evomaster.jar \
            --maxTime 1h \
            --outputFolder generated_tests \
            --sutControllerHost localhost \
            --sutControllerPort 40100 \
            --outputFormat JAVA_JUNIT_5

      # 6. Upload EvoMaster-generated test files as an artifact.
      - name: Upload EvoMaster Results
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: generated_tests

  wuppiefuzz:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Run VAmPI via Docker in vulnerable mode.
      - name: Start VAmPI Container (Vulnerable Mode)
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      # 3. Initialize the VAmPI database.
      - name: Initialize VAmPI Database
        run: |
          curl -s http://localhost:5000/createdb

      # 4. Set up the Rust toolchain.
      - name: Set up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 5. Clone the WuppieFuzz repository.
      - name: Clone WuppieFuzz
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      # 6. Build WuppieFuzz.
      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release

      # 7. Generate an initial corpus from the OpenAPI specification.
      - name: Generate Initial Corpus for Fuzzing
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz output-corpus --openapi-spec ../services/vampi/openapi_specs/openapi3.yml corpus_directory

      # 8. Run the fuzzing campaign.
      - name: Run WuppieFuzz Fuzzing Campaign
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz fuzz \
            --report \
            --log-level info \
            --initial-corpus corpus_directory \
            --timeout 60 \
            ../services/vampi/openapi_specs/openapi3.yml

      # 9. Upload the generated fuzzing reports as an artifact.
      - name: Upload Fuzzing Report
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-report
          path: WuppieFuzz/reports/
