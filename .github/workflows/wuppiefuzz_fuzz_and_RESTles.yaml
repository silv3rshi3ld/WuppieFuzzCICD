name: Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup_environment:
    runs-on: self-hosted
    outputs:
      commit_hash_wuppiefuzz: ${{ steps.get_commit_hash_wuppiefuzz.outputs.commit_hash }}
    steps:
      - name: Clean up Docker resources
        if: always()
        run: |
          docker container prune -f
          docker network prune -f
          docker network rm cicd_network || true

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version

      - name: Checkout Main Repository
        uses: actions/checkout@v4

      - name: Get WuppieFuzz commit hash
        id: get_commit_hash_wuppiefuzz
        run: |
          commit_hash=$(git ls-remote https://github.com/TNO-S3/WuppieFuzz.git HEAD | awk '{print $1}')
          echo "commit_hash=${commit_hash}" >> $GITHUB_OUTPUT

  prepare_wuppiefuzz:
    runs-on: self-hosted
    needs: setup_environment
    steps:
      - name: Checkout WuppieFuzz Repository
        uses: actions/checkout@v4
        with:
          repository: TNO-S3/WuppieFuzz
          path: wuppiefuzz

      - name: Cache WuppieFuzz Binary
        id: cache-wuppiefuzz-binary
        uses: actions/cache@v4
        with:
          path: wuppiefuzz/target/release/wuppiefuzz
          key: wuppiefuzz-binary-${{ needs.setup_environment.outputs.commit_hash_wuppiefuzz }}

      - name: Setup Rust and Build WuppieFuzz
        if: steps.cache-wuppiefuzz-binary.outputs.cache-hit != 'true'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
          cd wuppiefuzz
          cargo build --release

      - name: Upload WuppieFuzz Binary
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: wuppiefuzz/target/release/wuppiefuzz

  prepare_restler:
    runs-on: self-hosted
    needs: setup_environment
    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v4

      - name: Setup Restler Config
        run: |
          mkdir -p restler
          cp -r restler_config restler/

      - name: Upload Restler Config
        uses: actions/upload-artifact@v4
        with:
          name: restler-config
          path: restler/

  prepare_api:
    runs-on: self-hosted
    needs: setup_environment
    steps:
      - name: Checkout API Repository
        uses: actions/checkout@v4
        with:
          repository: silv3rshi3ld/WuppieFuzzCICD
          path: api

      - name: Upload API
        uses: actions/upload-artifact@v4
        with:
          name: vulnerable-api
          path: api/

  run_wuppiefuzz:
    runs-on: self-hosted
    needs: [prepare_wuppiefuzz, prepare_api]
    env:
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
    steps:
      - name: Create Workspace
        run: |
          mkdir -p wuppiefuzz_workspace
          cd wuppiefuzz_workspace
          mkdir -p wuppiefuzz api

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: wuppiefuzz_workspace

      - name: Setup Directory Structure
        run: |
          cd wuppiefuzz_workspace
          chmod +x wuppiefuzz-binary/wuppiefuzz
          mkdir -p wuppiefuzz/target/release/
          mv wuppiefuzz-binary/wuppiefuzz wuppiefuzz/target/release/
          mv vulnerable-api/* api/

      - name: Start API Service
        run: |
          cd wuppiefuzz_workspace
          docker network create wuppiefuzz_network || true
          docker-compose -f api/docker-compose.base.yml up -d --build

      - name: Wait for API
        timeout-minutes: 2
        run: |
          cd wuppiefuzz_workspace
          echo "Waiting for API to become available..."
          for i in {1..30}; do
            if curl -s http://localhost:3001 > /dev/null; then
              echo "API is up!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "API failed to start"
              exit 1
            fi
            echo "Attempt $i: API not ready yet. Retrying in 5 seconds..."
            sleep 5
          done

      - name: Run WuppieFuzz
        run: |
          cd wuppiefuzz_workspace
          export PATH="$PWD/wuppiefuzz/target/release:$PATH"
          
          # Generate initial corpus
          wuppiefuzz output-corpus --openapi-spec=api/openapi.yaml corpus_directory
          
          # Run fuzzing
          wuppiefuzz fuzz \
            --report=true \
            --log-level=info \
            --initial-corpus=corpus_directory \
            --timeout=60 \
            api/openapi.yaml

      - name: Upload WuppieFuzz Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results-${{ github.run_id }}
          path: wuppiefuzz_workspace/wuppiefuzz/reports/

      - name: Cleanup WuppieFuzz
        if: always()
        run: |
          cd wuppiefuzz_workspace
          docker-compose -f api/docker-compose.base.yml down --remove-orphans || true
          docker network rm wuppiefuzz_network || true
          cd ..
          sudo rm -rf wuppiefuzz_workspace

  run_restler:
    runs-on: self-hosted
    needs: [prepare_restler, prepare_api]
    env:
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
    steps:
      - name: Create Workspace
        run: |
          mkdir -p restler_workspace
          cd restler_workspace
          mkdir -p restler api

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: restler_workspace

      - name: Debug Directory Structure
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Restler workspace contents:"
          ls -la restler_workspace || true

      - name: Setup Directory Structure
        run: |
          cd restler_workspace
          mv vulnerable-api/* api/ || true
          mv restler-config/* restler/ || true
          
          echo "Final directory structure:"
          ls -la
          echo "API directory:"
          ls -la api/
          echo "Restler directory:"
          ls -la restler/

      - name: Start API Service
        run: |
          cd restler_workspace
          docker network create restler_network || true
          docker-compose -f api/docker-compose.base.yml up -d --build

      - name: Wait for API
        timeout-minutes: 2
        run: |
          cd restler_workspace
          echo "Waiting for API to become available..."
          for i in {1..30}; do
            if curl -s http://localhost:3001 > /dev/null; then
              echo "API is up!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "API failed to start"
              exit 1
            fi
            echo "Attempt $i: API not ready yet. Retrying in 5 seconds..."
            sleep 5
          done

      - name: Run Restler
        run: |
          cd restler_workspace
          
          # Ensure the OpenAPI spec is available
          cp api/openapi.yaml ./openapi.yaml || {
            echo "Failed to copy openapi.yaml"
            exit 1
          }
          
          # Convert YAML to JSON for Restler
          docker run --rm -v $(pwd):/data mikefarah/yq eval -j /data/openapi.yaml > openapi.json
          
          # Debug: Check files exist
          ls -la openapi.*
          
          # Fix entrypoint permissions
          chmod +x restler/restler_config/entrypoint.sh || true
          
          # Run Restler
          docker-compose -f restler/docker-compose-restler.yml \
            run --rm \
            -v $(pwd)/openapi.yaml:/workspace/openapi.yaml:ro \
            -v $(pwd)/openapi.json:/workspace/openapi.json:ro \
            restler

      - name: Upload Restler Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: restler-results-${{ github.run_id }}
          path: restler_workspace/restler/output/RestlerResults/

      - name: Cleanup Restler
        if: always()
        run: |
          cd restler_workspace
          docker-compose -f api/docker-compose.base.yml down --remove-orphans || true
          docker-compose -f restler/docker-compose-restler.yml down --remove-orphans || true
          docker network rm restler_network || true
          cd ..
          sudo rm -rf restler_workspace

  summarize_results:
    runs-on: self-hosted
    needs: [run_wuppiefuzz, run_restler]
    if: always()
    env:
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
    steps:
      - name: Final Cleanup
        run: |
          # Clean up any remaining Docker resources
          docker container prune -f
          docker network prune -f
          
          # Remove workspace directories if they exist
          sudo rm -rf restler_workspace wuppiefuzz_workspace || true

      - name: Download All Results
        uses: actions/download-artifact@v4
        with:
          path: all_results

      - name: Create Summary
        run: |
          echo "# Fuzzing Results Summary" > summary.md
          echo "## WuppieFuzz Results" >> summary.md
          ls -R all_results/wuppiefuzz-results-* >> summary.md 2>/dev/null || echo "No WuppieFuzz results found" >> summary.md
          echo "## Restler Results" >> summary.md
          ls -R all_results/restler-results-* >> summary.md 2>/dev/null || echo "No Restler results found" >> summary.md

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-summary
          path: summary.md