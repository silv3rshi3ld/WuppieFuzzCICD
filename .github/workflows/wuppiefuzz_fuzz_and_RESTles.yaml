name: Build and Fuzz

on:
  push:
    branches:
      - Vampi
  pull_request:
    branches:
      - Vampi

jobs:
  prepare_wuppiefuzz:
    runs-on: self-hosted
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"

      - name: Checkout WuppieFuzz Repository
        uses: actions/checkout@v4
        with:
          repository: TNO-S3/WuppieFuzz
          path: wuppiefuzz

      - name: Cache WuppieFuzz Build
        id: cache-wuppiefuzz-build
        uses: actions/cache@v4
        with:
          path: wuppiefuzz/target
          key: wuppiefuzz-target-${{ hashFiles('wuppiefuzz/Cargo.lock') }}

      - name: Build WuppieFuzz
        if: steps.cache-wuppiefuzz-build.outputs.cache-hit != 'true'
        run: |
          cd wuppiefuzz
          cargo build --release

      - name: Upload WuppieFuzz Binary
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: wuppiefuzz/target/release/wuppiefuzz

  prepare_api:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Upload VamPI
        uses: actions/upload-artifact@v4
        with:
          name: vampi-api
          path: VAmPI-master/

  run_wuppiefuzz:
    runs-on: self-hosted
    needs: [prepare_wuppiefuzz, prepare_api]
    steps:
      - name: Create Workspace
        run: mkdir -p wuppiefuzz_workspace

      - name: Download WuppieFuzz Binary
        uses: actions/download-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: wuppiefuzz_workspace/wuppiefuzz

      - name: Download VamPI
        uses: actions/download-artifact@v4
        with:
          name: vampi-api
          path: wuppiefuzz_workspace/vampi

      - name: Make WuppieFuzz Executable
        run: chmod +x wuppiefuzz_workspace/wuppiefuzz/wuppiefuzz

      - name: Start VamPI Service
        run: |
          cd wuppiefuzz_workspace/vampi
          docker run -d -p 5000:5000 -e vulnerable=1 erev0s/vampi:latest

      - name: Wait for VamPI
        run: |
          echo "Waiting for VamPI to become available..."
          until curl -s http://localhost:5000/ > /dev/null; do
            echo "VamPI not ready. Retrying in 5 seconds..."
            sleep 5
          done
          echo "VamPI is up!"

      - name: Run WuppieFuzz
        run: |
          cd wuppiefuzz_workspace
          ./wuppiefuzz/wuppiefuzz output-corpus --openapi-spec=vampi/openapi_specs/openapi.yml corpus_directory
          ./wuppiefuzz/wuppiefuzz fuzz \
            --report=true \
            --log-level=info \
            --initial-corpus=corpus_directory \
            --timeout=60 \
            vampi/openapi_specs/openapi3.yml

      - name: Upload WuppieFuzz Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: wuppiefuzz_workspace/wuppiefuzz/reports/

      - name: Cleanup
        if: always()
        run: |
          docker stop $(docker ps -q --filter ancestor=erev0s/vampi) || true
          docker rm $(docker ps -aq --filter ancestor=erev0s/vampi) || true
          rm -rf wuppiefuzz_workspace

  run_restler:
    runs-on: self-hosted
    needs: [prepare_api]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Workspace
        run: mkdir -p restler_workspace

      - name: Download VamPI
        uses: actions/download-artifact@v4
        with:
          name: vampi-api
          path: restler_workspace/vampi

      - name: Copy RESTler Files
        run: |
          cp -r restler/restler_config restler_workspace/
          cp restler/docker-compose-restler.yml restler_workspace/
          cp restler/Dockerfile.restler restler_workspace/
          cp restler_workspace/vampi/openapi_specs/openapi.yml restler_workspace/openapi.yaml

      - name: Start VamPI Service
        run: |
          cd restler_workspace
          docker run -d -p 5000:5000 -e vulnerable=1 erev0s/vampi:latest

      - name: Wait for VamPI
        run: |
          echo "Waiting for VamPI to become available..."
          until curl -s http://localhost:5000/ > /dev/null; do
            echo "VamPI not ready. Retrying in 5 seconds..."
            sleep 5
          done
          echo "VamPI is up!"

      - name: Run RESTler
        run: |
          cd restler_workspace
          docker-compose -f docker-compose-restler.yml up --build

      - name: Upload RESTler Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: restler-results
          path: restler_workspace/output/

      - name: Cleanup
        if: always()
        run: |
          docker stop $(docker ps -q --filter ancestor=erev0s/vampi) || true
          docker rm $(docker ps -aq --filter ancestor=erev0s/vampi) || true
          rm -rf restler_workspace

  summarize_results:
    runs-on: self-hosted
    needs: [run_wuppiefuzz, run_restler]
    steps:
      - name: Final Cleanup
        run: |
          docker container prune -f
          docker network prune -f

      - name: Download Results
        uses: actions/download-artifact@v4
        with:
          name: '**'
          path: all_results

      - name: Create Summary
        run: |
          echo "# Fuzzing Results Summary" > summary.md
          echo "## WuppieFuzz Results" >> summary.md
          if [ -d "all_results/wuppiefuzz-results" ]; then
            issues_found=$(grep -c 'Issue' all_results/wuppiefuzz-results/report.txt || echo "0")
            echo "Number of issues found: $issues_found" >> summary.md
            if [ -f "all_results/wuppiefuzz-results/report.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/wuppiefuzz-results/report.txt" >> summary.md
            fi
          else
            echo "No WuppieFuzz results found" >> summary.md
          fi

          echo "## RESTler Results" >> summary.md
          if [ -d "all_results/restler-results" ]; then
            bugs_found=$(grep -c 'Bug' all_results/restler-results/bug_buckets/BugBuckets.txt || echo "0")
            echo "Number of bugs found: $bugs_found" >> summary.md
            if [ -f "all_results/restler-results/bug_buckets/BugBuckets.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/restler-results/bug_buckets/BugBuckets.txt" >> summary.md
            fi
          else
            echo "No RESTler results found" >> summary.md
          fi

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-summary
          path: summary.md
