name: Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

env:
  DOCKER_NETWORK_NAME: cicd_network
  VAMPI_RESTLER_PORT: 5003
  VAMPI_WUPPIEFUZZ_PORT: 5002
  BASE_DIR: ${{ github.workspace }}

jobs:
  cleanup:
    runs-on: self-hosted
    steps:
      - name: Initial Cleanup
        run: |
          # Clean up existing files
          rm -rf ${{ github.workspace }}/*
          rm -rf workspace/ wuppiefuzz_workspace/
        shell: bash

  prepare_docker_network:
    needs: cleanup
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup directories
        run: |
          mkdir -p $BASE_DIR/services/vampi
          mkdir -p $BASE_DIR/workspace
          mkdir -p $BASE_DIR/wuppiefuzz_workspace
          mkdir -p $HOME/.cargo $HOME/.rustup
        shell: bash

      - name: Validate Docker Compose Files
        run: |
          docker-compose -f $BASE_DIR/services/vampi/docker-compose.vampi.yml config -q
          docker-compose -f $BASE_DIR/services/restler/docker-compose.restler.yml config -q
        shell: bash

      - name: Check if Docker Network Exists
        id: check_network
        run: |
          if docker network inspect $DOCKER_NETWORK_NAME >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Docker Network if Not Exists
        if: steps.check_network.outputs.exists == 'false'
        run: docker network create --subnet=172.18.0.0/16 $DOCKER_NETWORK_NAME
        shell: bash

  prepare_vampi:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Remove Any Existing VAmPI Containers
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml down --remove-orphans || true
        shell: bash

      - name: Build VAmPI Images
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml build --force-rm
        shell: bash

  prepare_wuppiefuzz:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Calculate cache key date
        id: cache-key
        run: echo "date=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Check WuppieFuzz Binary Cache
        id: cache-binary
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/wuppiefuzz_bin
          key: wuppiefuzz-binary-${{ steps.cache-key.outputs.date }}
          restore-keys: |
            wuppiefuzz-binary-

      - name: Setup Rust
        if: steps.cache-binary.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt, clippy

      - name: Build WuppieFuzz if needed
        if: steps.cache-binary.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_bin
          git clone https://github.com/TNO-S3/WuppieFuzz.git ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cd ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cargo build --release
          cp target/release/wuppiefuzz ${{ env.BASE_DIR }}/wuppiefuzz_bin/
          cd ${{ env.BASE_DIR }}
          rm -rf wuppiefuzz_temp
        shell: bash

      - name: Upload WuppieFuzz Binary
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: ${{ env.BASE_DIR }}/wuppiefuzz_bin/wuppiefuzz
          if-no-files-found: error

  run_restler:
    runs-on: self-hosted
    needs: [prepare_vampi, prepare_docker_network]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Workspace
        run: |
          mkdir -p ${{ env.BASE_DIR }}/workspace/restler
          mkdir -p ${{ env.BASE_DIR }}/workspace/restler/output
        shell: bash

      - name: Copy RESTler Files
        run: |
          mkdir -p ${{ env.BASE_DIR }}/workspace/restler/config
          cp -r ${{ env.BASE_DIR }}/services/restler/config/* ${{ env.BASE_DIR }}/workspace/restler/config/
          cp ${{ env.BASE_DIR }}/services/restler/docker-compose.restler.yml ${{ env.BASE_DIR }}/workspace/restler/
          cp ${{ env.BASE_DIR }}/services/restler/Dockerfil