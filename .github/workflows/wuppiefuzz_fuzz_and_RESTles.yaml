name: Build and Fuzz

on:
  push:
    branches:
      - working
  pull_request:
    branches:
      - working

permissions:
  contents: read

env:
  DOCKER_NETWORK_NAME: cicd_network
  VAMPI_RESTLER_PORT: 5003
  VAMPI_WUPPIEFUZZ_PORT: 5002
  VAMPI_EVOMASTER_PORT: 5000
  BASE_DIR: ${{ github.workspace }}

jobs:
  cleanup_restlerresults:
    runs-on: manager-runner
    steps:
      - name: Remove RestlerResults Directory
        run: |
          echo "Attempting to remove RestlerResults directory..."
          sudo rm -rf "$BASE_DIR/workspace/restler/output/" || echo "Directory not found or already removed."

  prepare_docker_network:
    runs-on: manager-runner
    needs: cleanup_restlerresults
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup directories
        run: |
          mkdir -p $BASE_DIR/services/vampi
          mkdir -p $BASE_DIR/workspace
          mkdir -p $BASE_DIR/wuppiefuzz_workspace
          mkdir -p $HOME/.cargo $HOME/.rustup

      - name: Validate Docker Compose Files
        run: |
          docker-compose -f $BASE_DIR/services/vampi/docker-compose.vampi.yml config -q
          docker-compose -f $BASE_DIR/services/restler/docker-compose.restler.yml config -q

      - name: Check and create cicd_network
        run: |
          if ! docker network inspect $DOCKER_NETWORK_NAME >/dev/null 2>&1; then
            docker network create --subnet=172.18.0.0/16 $DOCKER_NETWORK_NAME
          fi

      - name: Check and create evomaster_network
        run: |
          if ! docker network inspect evomaster_network >/dev/null 2>&1; then
            docker network create --subnet=172.19.0.0/16 evomaster_network
          fi

  prepare_vampi:
    runs-on: manager-runner
    needs: prepare_docker_network
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Remove Any Existing VAmPI Containers
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml down --remove-orphans || true

      - name: Build VAmPI Images
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml build --force-rm

  prepare_vampi_evomaster:
    runs-on: manager-runner
    needs: prepare_docker_network
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start Dedicated VAmPI for EvoMaster
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          docker-compose -f docker-compose.vampi.yml -p vampi_evomaster up -d --build
          
      - name: Wait for VAmPI EvoMaster Instance
        run: |
          echo "Waiting for VAmPI EvoMaster instance..."
          for i in {1..30}; do
            if curl -s http://localhost:${VAMPI_EVOMASTER_PORT}/health >/dev/null; then
              echo "VAmPI EvoMaster is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "VAmPI EvoMaster failed to become ready"
              docker logs vampi_evomaster-vampi-vulnerable-1
              exit 1
            fi
            echo "Waiting for VAmPI EvoMaster... (attempt $i/30)"
            sleep 2
          done

  prepare_wuppiefuzz:
    runs-on: manager-runner
    needs: prepare_docker_network
    steps:
      - name: Calculate cache key date
        id: cache-key
        run: echo "date=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Check WuppieFuzz Binary Cache
        id: cache-binary
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/wuppiefuzz_bin
          key: wuppiefuzz-binary-${{ steps.cache-key.outputs.date }}
          restore-keys: |
            wuppiefuzz-binary-

      - name: Setup Rust
        if: steps.cache-binary.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Build WuppieFuzz if needed
        if: steps.cache-binary.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_bin
          git clone https://github.com/TNO-S3/WuppieFuzz.git ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cd ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cargo build --release
          cp target/release/wuppiefuzz ${{ env.BASE_DIR }}/wuppiefuzz_bin/
          rm -rf ${{ env.BASE_DIR }}/wuppiefuzz_temp

  run_restler:
    runs-on: manager-runner
    needs: [prepare_vampi, prepare_docker_network]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create RESTler Workspace
        run: |
          mkdir -p ${{ env.BASE_DIR }}/workspace/restler/output

      - name: Start VAmPI RESTler Instance
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          docker-compose -f docker-compose.vampi.yml -p vampi_restler up -d vampi-vulnerable-restler

      - name: Wait for VAmPI RESTler
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:${{ env.VAMPI_RESTLER_PORT }}/health; then
              echo "VAmPI RESTler ready"
              break
            fi
            sleep 2
          done

      - name: Run RESTler
        working-directory: ${{ env.BASE_DIR }}/workspace/restler
        run: |
          docker-compose -f ${{ env.BASE_DIR }}/services/restler/docker-compose.restler.yml up --build

      - name: Upload RESTler Results
        uses: actions/upload-artifact@v4
        with:
          name: restler-results
          path: ${{ env.BASE_DIR }}/workspace/restler/output

  run_wuppiefuzz:
    runs-on: manager-runner
    needs: [prepare_vampi, prepare_wuppiefuzz]
    steps:
      - name: Start VAmPI WuppieFuzz Instance
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          docker-compose -f docker-compose.vampi.yml -p vampi_wuppiefuzz up -d vampi-vulnerable-wuppiefuzz

      - name: Run WuppieFuzz
        run: |
          ${{ env.BASE_DIR }}/wuppiefuzz_bin/wuppiefuzz fuzz \
            --openapi-spec=${{ env.BASE_DIR }}/services/vampi/openapi_specs/wuppiefuzz.openapi3.yml \
            --report-dir=${{ env.BASE_DIR }}/wuppiefuzz_workspace/reports \
            --timeout=60

      - name: Upload WuppieFuzz Results
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: ${{ env.BASE_DIR }}/wuppiefuzz_workspace/reports

  run_evomaster:
    runs-on: manager-runner
    needs: [prepare_vampi_evomaster, prepare_docker_network]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build EvoMaster Image
        working-directory: ${{ env.BASE_DIR }}/services/evomaster
        run: |
          docker build -t evomaster:latest -f Dockerfile.evomaster .

      - name: Run EvoMaster
        run: |
          docker run --rm \
            --network evomaster_network \
            -v ${{ env.BASE_DIR }}/workspace/evomaster/results:/evomaster/results \
            -e SPEC_PATH="/specs/openapi3.yml" \
            -e OUTPUT_DIR="/evomaster/results" \
            -e TARGET_URL="http://vampi_evomaster-vampi-vulnerable-1:$VAMPI_EVOMASTER_PORT" \
            -e TIME_BUDGET="3600" \
            evomaster:latest

      - name: Upload EvoMaster Results
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: ${{ env.BASE_DIR }}/workspace/evomaster/results

  summarize_results:
    runs-on: manager-runner
    needs: [run_restler, run_wuppiefuzz, run_evomaster]
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_results

      - name: List Results
        run: |
          echo "=== RESTler Results ==="
          ls -la all_results/restler-results || echo "No RESTler results"
          
          echo "=== WuppieFuzz Results ==="
          ls -la all_results/wuppiefuzz-results || echo "No WuppieFuzz results"
          
          echo "=== EvoMaster Results ==="
          ls -la all_results/evomaster-results || echo "No EvoMaster results"

      - name: Cleanup Docker
        if: always()
        run: |
          docker container prune -f
          docker network prune -f
          docker image prune -af