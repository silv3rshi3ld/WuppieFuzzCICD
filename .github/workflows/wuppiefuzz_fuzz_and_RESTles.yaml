name: Fuzz VAmPI with WuppieFuzz and EvoMaster

on:
  push:
    branches: [ Less-dependent-build ]
  pull_request:
    branches: [ Less-dependent-build ]

jobs:
  evomaster:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Start VAmPI with Docker
      - name: Start VAmPI Container
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      # 3. Initialize VAmPI Database
      - name: Initialize VAmPI Database
        run: |
          curl -s http://localhost:5000/createdb

      # 4. Set up Java and Download Tools
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # 5. Download and Setup Tools
      - name: Download and Setup Tools
        run: |
          # Download EvoMaster
          curl -L -o evomaster.jar https://github.com/EMResearch/EvoMaster/releases/download/v3.4.0/evomaster.jar
          
          # Download controller library
          curl -L -o evomaster-controller.jar https://repo1.maven.org/maven2/org/evomaster/evomaster-client-java-controller/3.4.0/evomaster-client-java-controller-3.4.0.jar
          
          # Create driver directory
          mkdir -p driver/org/vampi
          
          # Create driver class
          cat > driver/org/vampi/VAmPIDriver.java << 'EOF'
          package org.vampi;
          
          import org.evomaster.client.java.controller.EmbeddedSutController;
          import org.evomaster.client.java.controller.api.dto.AuthenticationDto;
          import org.evomaster.client.java.controller.api.dto.SutInfoDto;
          import org.evomaster.client.java.controller.problem.ProblemInfo;
          import org.evomaster.client.java.controller.problem.RestProblem;
          import java.util.List;
          
          public class VAmPIDriver extends EmbeddedSutController {
              public static void main(String[] args) {
                  int port = 40100;
                  if (args.length > 0) {
                      port = Integer.parseInt(args[0]);
                  }
                  VAmPIDriver controller = new VAmPIDriver();
                  controller.setControllerPort(port);
                  controller.startTheControllerServer();
              }
          
              @Override
              public String startSut() {
                  return "http://localhost:5000";
              }
          
              @Override
              public void stopSut() {}
          
              @Override
              public String getPackagePrefixesToCover() {
                  return "org.vampi";
              }
          
              @Override
              public void resetStateOfSUT() {
                  try {
                      Runtime.getRuntime().exec("curl -s http://localhost:5000/createdb");
                      Thread.sleep(1000); // Wait for reset to complete
                  } catch (Exception e) {
                      e.printStackTrace();
                  }
              }
          
              @Override
              public List<AuthenticationDto> getInfoForAuthentication() {
                  return null;
              }
          
              @Override
              public ProblemInfo getProblemInfo() {
                  return new RestProblem("http://localhost:5000/openapi_specs/openapi3.yml");
              }
          
              @Override
              public SutInfoDto.OutputFormat getPreferredOutputFormat() {
                  return SutInfoDto.OutputFormat.PYTHON_UNITTEST;
              }
          }
          EOF
          
          # Compile driver
          javac -cp evomaster-controller.jar driver/org/vampi/VAmPIDriver.java
          
          # Start driver
          cd driver
          nohup java -cp ".:../evomaster-controller.jar" org.vampi.VAmPIDriver 40100 &
          sleep 10

      - name: Run EvoMaster White-Box Testing
        run: |
          java -jar evomaster.jar \
            --maxTime 1h \
            --outputFolder generated_tests \
            --sutControllerHost localhost \
            --sutControllerPort 40100

      # 6. Upload EvoMaster-generated files as an artifact
      - name: Upload EvoMaster Results
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: generated_tests

  wuppiefuzz:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your repository.
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Run VAmPI via Docker in vulnerable mode.
      - name: Start VAmPI Container (Vulnerable Mode)
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      # 3. Initialize the VAmPI database.
      - name: Initialize VAmPI Database
        run: |
          curl -s http://localhost:5000/createdb

      # 4. Set up the Rust toolchain.
      - name: Set up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 5. Clone the WuppieFuzz repository.
      - name: Clone WuppieFuzz
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      # 6. Build WuppieFuzz.
      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release

      # 7. Generate an initial corpus from the OpenAPI specification.
      - name: Generate Initial Corpus for Fuzzing
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz output-corpus --openapi-spec ../services/vampi/openapi_specs/openapi3.yml corpus_directory

      # 8. Run the fuzzing campaign.
      - name: Run WuppieFuzz Fuzzing Campaign
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz fuzz \
            --report \
            --log-level info \
            --initial-corpus corpus_directory \
            --timeout 60 \
            ../services/vampi/openapi_specs/openapi3.yml

      # 9. Upload the generated fuzzing reports as an artifact.
      - name: Upload Fuzzing Report
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-report
          path: WuppieFuzz/reports/
