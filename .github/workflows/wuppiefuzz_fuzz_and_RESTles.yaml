name: Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

env:
  DOCKER_NETWORK_NAME: cicd_network
  VAMPI_RESTLER_PORT: 5003
  VAMPI_WUPPIEFUZZ_PORT: 5002
  BASE_DIR: ${{ github.workspace }}

jobs:
  cleanup_restlerresults:
    runs-on: self-hosted
    steps:
      - name: Remove RestlerResults Directory
        run: |
          echo "Attempting to remove RestlerResults directory..."
          sudo rm -rf "$BASE_DIR/workspace/restler/output/" || echo "Directory not found or already removed."
        shell: bash

  prepare_docker_network:
    runs-on: self-hosted
    needs: cleanup_restlerresults  # Establishes dependency
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup directories
        run: |
          mkdir -p $BASE_DIR/services/vampi
          mkdir -p $BASE_DIR/workspace
          mkdir -p $BASE_DIR/wuppiefuzz_workspace
          mkdir -p $HOME/.cargo $HOME/.rustup
        shell: bash

      - name: Validate Docker Compose Files
        run: |
          docker-compose -f $BASE_DIR/services/vampi/docker-compose.vampi.yml config -q
          docker-compose -f $BASE_DIR/services/restler/docker-compose.restler.yml config -q
        shell: bash

      - name: Check if Docker Network Exists
        id: check_network
        run: |
          if docker network inspect $DOCKER_NETWORK_NAME >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Docker Network if Not Exists
        if: steps.check_network.outputs.exists == 'false'
        run: docker network create --subnet=172.18.0.0/16 $DOCKER_NETWORK_NAME
        shell: bash

  prepare_vampi:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Remove Any Existing VAmPI Containers
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml down --remove-orphans || true
        shell: bash

      - name: Build VAmPI Images
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml build --force-rm
        shell: bash

  prepare_wuppiefuzz:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Calculate cache key date
        id: cache-key
        run: echo "date=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Check WuppieFuzz Binary Cache
        id: cache-binary
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/wuppiefuzz_bin
          key: wuppiefuzz-binary-${{ steps.cache-key.outputs.date }}
          restore-keys: |
            wuppiefuzz-binary-

      - name: Setup Rust
        if: steps.cache-binary.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Build WuppieFuzz if needed
        if: steps.cache-binary.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_bin
          git clone https://github.com/TNO-S3/WuppieFuzz.git ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cd ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cargo build --release
          cp target/release/wuppiefuzz ${{ env.BASE_DIR }}/wuppiefuzz_bin/
          cd ${{ env.BASE_DIR }}
          rm -rf wuppiefuzz_temp
        shell: bash

      - name: Upload WuppieFuzz Binary
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: ${{ env.BASE_DIR }}/wuppiefuzz_bin/wuppiefuzz
          if-no-files-found: error

  run_restler:
    runs-on: self-hosted
    needs: [prepare_vampi, prepare_docker_network]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Workspace
        run: |
          mkdir -p ${{ env.BASE_DIR }}/workspace/restler
          mkdir -p ${{ env.BASE_DIR }}/workspace/restler/output
        shell: bash

      - name: Copy RESTler Files
        run: |
          mkdir -p ${{ env.BASE_DIR }}/workspace/restler/config
          cp -r ${{ env.BASE_DIR }}/services/restler/config/* ${{ env.BASE_DIR }}/workspace/restler/config/
          cp ${{ env.BASE_DIR }}/services/restler/docker-compose.restler.yml ${{ env.BASE_DIR }}/workspace/restler/
          cp ${{ env.BASE_DIR }}/services/restler/Dockerfile.restler ${{ env.BASE_DIR }}/workspace/restler/
          cp ${{ env.BASE_DIR }}/services/vampi/openapi_specs/restler.openapi3.yml ${{ env.BASE_DIR }}/workspace/restler/openapi3.yml
        shell: bash

      - name: Start VAmPI RESTler Instance
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        env:
          VAMPI_RESTLER_PORT: ${{ env.VAMPI_RESTLER_PORT }}
        run: docker-compose -f docker-compose.vampi.yml -p vampi_restler up -d vampi-vulnerable-restler
        shell: bash

      - name: Wait for VAmPI
        run: |
          echo "Waiting for VAmPI RESTler instance..."
          for i in {1..30}; do
            if curl -s http://localhost:${{ env.VAMPI_RESTLER_PORT }}/health >/dev/null; then
              echo "VAmPI is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "VAmPI failed to become ready"
              docker logs vampi-vulnerable-restler
              exit 1
            fi
            echo "Waiting for VAmPI to be ready... (attempt $i/30)"
            sleep 2
          done
        shell: bash

      - name: Run RESTler
        working-directory: ${{ env.BASE_DIR }}/workspace/restler
        env:
          TARGET_PORT: "5000"
          TARGET_HOST: "vampi-vulnerable-restler"
        run: docker-compose -f docker-compose.restler.yml up --build
        shell: bash

      - name: Upload RESTler Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: restler-results
          path: ${{ env.BASE_DIR }}/workspace/restler/output
          if-no-files-found: warn

  run_wuppiefuzz:
    runs-on: self-hosted
    needs: [prepare_vampi, prepare_wuppiefuzz]
    steps:
      - name: Download WuppieFuzz Binary
        uses: actions/download-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: ${{ env.BASE_DIR }}/wuppiefuzz_workspace

      - name: Setup WuppieFuzz Environment
        run: |
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_workspace
          chmod +x ${{ env.BASE_DIR }}/wuppiefuzz_workspace/wuppiefuzz
        shell: bash

      - name: Start VAmPI WuppieFuzz Instance
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          docker-compose -f docker-compose.vampi.yml -p vampi_wuppiefuzz up -d vampi-vulnerable-wuppiefuzz
        shell: bash

      - name: Wait for WuppieFuzz Instance to Initialize
        run: |
          echo "Waiting for WuppieFuzz instance to become healthy..."
          for i in {1..30}; do
            if curl -s http://localhost:${VAMPI_WUPPIEFUZZ_PORT}/health >/dev/null; then
              echo "WuppieFuzz instance is healthy."
              break
            fi
            if [ $i -eq 30 ]; then
              echo "WuppieFuzz instance failed to become healthy in time."
              docker logs vampi-vulnerable-wuppiefuzz
              exit 1
            fi
            echo "Attempt $i of 30: WuppieFuzz instance not ready yet..."
            sleep 5
          done
        shell: bash

      - name: Run WuppieFuzz
        working-directory: ${{ env.BASE_DIR }}/wuppiefuzz_workspace
        run: |
          mkdir -p reports
          ./wuppiefuzz output-corpus \
            --openapi-spec=${{ env.BASE_DIR }}/services/vampi/openapi_specs/wuppiefuzz.openapi3.yml \
            corpus_directory
          ./wuppiefuzz fuzz \
            --report \
            --log-level=info \
            --initial-corpus=corpus_directory \
            --coverage-host=localhost:${VAMPI_WUPPIEFUZZ_PORT} \
            --timeout=60 \
            ${{ env.BASE_DIR }}/services/vampi/openapi_specs/wuppiefuzz.openapi3.yml
        shell: bash

      - name: Upload WuppieFuzz Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: ${{ env.BASE_DIR }}/wuppiefuzz_workspace/reports/
          if-no-files-found: warn

  summarize_results:
    runs-on: self-hosted
    needs: [run_restler, run_wuppiefuzz]
    steps:
      - name: Download All Results
        uses: actions/download-artifact@v4
        with:
          path: all_results
          if-no-files-found: warn

      - name: List Downloaded Artifacts
        run: |
          echo "Listing WuppieFuzz Results:"
          ls -la all_results/wuppiefuzz-results || echo "WuppieFuzz results directory not found."
          
          echo "Listing RESTler Results:"
          ls -la all_results/restler-results/bug_buckets || echo "RESTler BugBuckets directory not found."
        shell: bash
        continue-on-error: true

      - name: Final Cleanup
        if: always()
        run: |
          echo "Pruning Docker containers..."
          docker container prune -f || echo "Failed to prune Docker containers."
          echo "Pruning Docker networks..."
          docker network prune -f || echo "Failed to prune Docker networks."
        shell: bash
