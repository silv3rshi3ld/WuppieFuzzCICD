name: Fuzz VAmPI with WuppieFuzz and EvoMaster

on:
  push:
    branches: [Less-dependent-build]
  pull_request:
    branches: [Less-dependent-build]

jobs:
  evomaster-whitebox:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Java (using Temurin Java 11)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '11'

      # 3. Start the white-box SUT driver (prebuilt driver JAR).
      #    Your driver should start your instrumented Vampi SUT, open the controller server (default port 40100)
      #    and expose the API schema.
      - name: Start Whitebox SUT Driver
        run: |
          nohup java -jar services/vampi/your-sut-driver.jar &
          # Allow time for the SUT to start and instrument itself.
          sleep 10

      # 4. Run EvoMaster in white-box mode.
      #    Here we override the API schema location to point to the local OpenAPI file.
      - name: Run EvoMaster in Whitebox Mode
        run: |
          java -jar evomaster.jar \
            --maxTime 1h \
            --outputFolder generated_tests \
            --sutControllerHost localhost \
            --sutControllerPort 40100 \
            --overrideOpenAPIUrl services/vampi/openapi_specs/openapi3.yml \
            --outputFormat JAVA_JUNIT_5

      # 5. Upload EvoMaster-generated tests as an artifact.
      - name: Upload EvoMaster Results
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: generated_tests

  wuppiefuzz:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Start Vampi container (vulnerable mode) using Docker.
      - name: Start VAmPI Container (Vulnerable Mode)
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      # 3. Initialize Vampi database.
      - name: Initialize VAmPI Database
        run: |
          curl -s http://localhost:5000/createdb

      # 4. Set up the Rust toolchain.
      - name: Set up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 5. Clone the WuppieFuzz repository.
      - name: Clone WuppieFuzz
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      # 6. Build WuppieFuzz.
      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release

      # 7. Generate an initial corpus from the local OpenAPI specification.
      - name: Generate Initial Corpus for Fuzzing
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz output-corpus --openapi-spec ../services/vampi/openapi_specs/openapi3.yml corpus_directory

      # 8. Run the WuppieFuzz fuzzing campaign.
      - name: Run WuppieFuzz Fuzzing Campaign
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz fuzz \
            --report \
            --log-level info \
            --initial-corpus corpus_directory \
            --timeout 60 \
            ../services/vampi/openapi_specs/openapi3.yml

      # 9. Upload the generated fuzzing reports as an artifact.
      - name: Upload Fuzzing Report
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-report
          path: WuppieFuzz/reports/
