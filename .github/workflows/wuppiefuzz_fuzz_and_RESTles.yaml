name: Fuzz VAmPI with WuppieFuzz and EvoMaster

on:
  push:
    branches: [ Less-dependent-build ]
  pull_request:
    branches: [ Less-dependent-build ]

jobs:
  evomaster:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      # 2. Start VAmPI with Docker Compose for EvoMaster
      - name: Start Docker Compose for EvoMaster
        run: docker compose -f services/evomaster/docker-compose.evomaster.yml up -d --build

      # 3. Wait for VAmPI to initialize
      - name: Wait for VAmPI to Initialize
        run: sleep 10

      # 4. Run EvoMaster using the GitHub Action
      - name: Run EvoMaster Action
        uses: webfuzzing/evomaster-action@v1.0.0
        with:
          args: >-
            --writeWFCReport true
            --blackBox true
            --bbSwaggerUrl http://localhost:5000/v3/api-docs
            --maxTime 20s
            --showProgress false
          failOnErrors: "true"

      # 5. Upload EvoMaster-generated files as an artifact
      - name: Upload EvoMaster Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: ./generated_tests

      # 6. Shut down Docker Compose to stop VAmPI
      - name: Stop Docker Compose for EvoMaster
        if: always()
        run: docker compose -f services/evomaster/docker-compose.evomaster.yml down

  wuppiefuzz:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout your repository.
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      # 2. Run VAmPI via Docker in vulnerable mode.
      - name: Start VAmPI Container (Vulnerable Mode)
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      # 3. Initialize the VAmPI database.
      - name: Initialize VAmPI Database
        run: |
          curl -s http://localhost:5000/createdb

      # 4. Set up the Rust toolchain.
      - name: Set up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 5. Clone the WuppieFuzz repository.
      - name: Clone WuppieFuzz
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      # 6. Build WuppieFuzz.
      - name: Build WuppieFuzz
        run: |
          cd WuppieFuzz
          cargo build --release

      # 7. Generate an initial corpus from the OpenAPI specification.
      - name: Generate Initial Corpus for Fuzzing
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz output-corpus --openapi-spec ../services/vampi/openapi_specs/openapi3.yml corpus_directory

      # 8. Run the fuzzing campaign.
      - name: Run WuppieFuzz Fuzzing Campaign
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz fuzz \
            --report \
            --log-level info \
            --initial-corpus corpus_directory \
            --timeout 60 \
            ../services/vampi/openapi_specs/openapi3.yml

      # 9. Upload the generated fuzzing reports as an artifact.
      - name: Upload Fuzzing Report
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-report
          path: WuppieFuzz/reports/
