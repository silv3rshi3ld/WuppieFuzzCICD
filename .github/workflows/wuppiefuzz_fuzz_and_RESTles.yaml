name: Fuzz VAmPI with WuppieFuzz, EvoMaster, RESTler

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  evomaster:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start VAmPI Container
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      - name: Initialize VAmPI Database
        run: curl -s http://localhost:5000/createdb

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '11'

      - name: Download EvoMaster
        run: |
          curl -L -o evomaster.jar https://github.com/EMResearch/EvoMaster/releases/download/v3.4.0/evomaster.jar

      - name: Run EvoMaster in Blackbox Mode
        run: |
          java -jar evomaster.jar \
            --blackBox true \
            --bbSwaggerUrl services/vampi/openapi_specs/openapi3.yml \
            --outputFormat PYTHON_UNITTEST \
            --maxTime 60s \
            --outputFolder generated_tests \
            --ratePerMinute 60

      - name: Upload EvoMaster Results
        uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: generated_tests

  wuppiefuzz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Rust Toolchain first so cargo is available
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          override: true

      # Clone WuppieFuzz Repository before caching
      - name: Clone WuppieFuzz Repository
        run: git clone https://github.com/TNO-S3/WuppieFuzz.git

      # Add caching for Rust dependencies and build artifacts
      - name: Cache Rust dependencies and build artifacts
        id: cache-cargo
        uses: actions/cache@v4.2.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            WuppieFuzz/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('WuppieFuzz/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Build WuppieFuzz only if cache miss
      - name: Build WuppieFuzz
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: |
          cd WuppieFuzz
          cargo build --release
          # Touch a file to indicate the build is complete
          touch target/release/.build-complete

      # Verify build artifacts exist
      - name: Verify WuppieFuzz Build
        run: |
          if [ ! -f "WuppieFuzz/target/release/wuppiefuzz" ]; then
            echo "WuppieFuzz binary not found, building..."
            cd WuppieFuzz
            cargo build --release
          else
            echo "Using cached WuppieFuzz binary"
          fi

      - name: Start VAmPI Container (Vulnerable Mode)
        run: |
          docker run -d --name vampi -e vulnerable=1 -p 5000:5000 erev0s/vampi:latest
          sleep 10

      - name: Initialize VAmPI Database
        run: curl -s http://localhost:5000/createdb

      # Add caching for WuppieFuzz corpus
      - name: Cache WuppieFuzz corpus
        uses: actions/cache@v4.2.2
        with: 
          path: WuppieFuzz/corpus_directory
          key: ${{ runner.os }}-corpus-${{ hashFiles('services/vampi/openapi_specs/openapi3.yml') }}

      - name: Generate Initial Corpus for Fuzzing
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz output-corpus --openapi-spec ../services/vampi/openapi_specs/openapi3.yml corpus_directory

      - name: Run WuppieFuzz Fuzzing Campaign
        run: |
          cd WuppieFuzz
          ./target/release/wuppiefuzz fuzz \
            --report \
            --log-level info \
            --initial-corpus corpus_directory \
            --timeout 60 \
            ../services/vampi/openapi_specs/openapi3.yml

      - name: Upload Fuzzing Report
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-report
          path: WuppieFuzz/reports/

  restler:
    runs-on: ubuntu-latest
    env:
      BASE_DIR: ${{ github.workspace }}
      # Enable Docker BuildKit
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Add caching for RESTler builds
      - name: Cache RESTler builds
        uses: actions/cache@v4.2.2
        with:
          path: |
            ${{ github.workspace }}/services/restler/output/**
            ${{ github.workspace }}/services/restler/config/*.json
          key: ${{ runner.os }}-restler-${{ hashFiles('services/restler/config/compile-config.json') }}
          restore-keys: |
            ${{ runner.os }}-restler-

      # Set up Docker Buildx for better caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4.2.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Prepare Environment
        run: |
          mkdir -p $BASE_DIR/services/restler/output
          chmod -R 777 $BASE_DIR/services/restler/output
          echo "=== Initial output directory structure ==="
          ls -la $BASE_DIR/services/restler/output

      - name: Fix script permissions
        run: |
          chmod +x services/restler/config/run-restler.sh
          chmod +x services/restler/config/*.sh  # Ensure all scripts are executable

      - name: Run RESTler and VAmPI
        run: |
          cd services/restler
          # Export BuildKit environment variables
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1
          # Run docker compose
          docker compose -f docker-compose.restler.yml up --abort-on-container-exit
          echo "=== Listing output directory structure ==="
          ls -R $BASE_DIR/services/restler/output || true
          echo "=== Detailed output directory listing ==="
          find $BASE_DIR/services/restler/output -type f -exec ls -l {} \; || true

      - name: Check Container Logs
        if: always()
        run: |
          docker compose -f services/restler/docker-compose.restler.yml logs vampi || true
          docker compose -f services/restler/docker-compose.restler.yml logs restler || true
          docker compose -f services/restler/docker-compose.restler.yml logs init-vampi || true

      - name: Upload RESTler Test Results
        uses: actions/upload-artifact@v4
        with:
          name: restler-test-results
          path: ${{ github.workspace }}/services/restler/output/Test/

      - name: Upload RESTler Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: restler-coverage-report
          path: |
            ${{ github.workspace }}/services/restler/output/**/coverage_failures_to_investigate.txt
          if-no-files-found: warn

      - name: Upload RESTler FuzzLean Results
        uses: actions/upload-artifact@v4
        with:
          name: restler-fuzzlean-results
          path: ${{ github.workspace }}/services/restler/output/FuzzLean/

      - name: Upload RESTler Fuzz Results
        uses: actions/upload-artifact@v4
        with:
          name: restler-fuzz-results
          path: ${{ github.workspace }}/services/restler/output/Fuzz/

  # New job for dashboard generation
  generate-dashboard:
    needs: [evomaster, wuppiefuzz, restler]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Download artifacts from previous jobs
      - name: Download EvoMaster Results
        uses: actions/download-artifact@v4
        with:
          name: evomaster-results
          path: output-fuzzers/evomaster-results

      - name: Download WuppieFuzz Results
        uses: actions/download-artifact@v4
        with:
          name: fuzzing-report
          path: output-fuzzers/fuzzing-report

      - name: Download RESTler Results
        uses: actions/download-artifact@v4
        with:
          name: restler-fuzz-results
          path: output-fuzzers/restler-fuzz-results

      # Organize files
      - name: Organize Files
        run: |
          # Create necessary directories
          mkdir -p output-fuzzers/{Evomaster,Wuppiefuzz,Restler}
          
          # Move evomaster results
          if [ -d "output-fuzzers/evomaster-results" ]; then
            mkdir -p output-fuzzers/Evomaster/evomaster-results
            cp -r output-fuzzers/evomaster-results/* output-fuzzers/Evomaster/evomaster-results/
            # Create zip file for parser
            cd output-fuzzers/Evomaster
            zip -r evomaster-results.zip evomaster-results/
            cd ../.. 
          fi
          
          # Move wuppiefuzz results
          if [ -d "output-fuzzers/fuzzing-report" ]; then
            mkdir -p output-fuzzers/Wuppiefuzz/fuzzing-report
            cp -r output-fuzzers/fuzzing-report/* output-fuzzers/Wuppiefuzz/fuzzing-report/
            # Create zip file for parser
            cd output-fuzzers/Wuppiefuzz
            zip -r fuzzing-report.zip fuzzing-report/
            cd ../.. 
          fi
          
          # Move restler results
          if [ -d "output-fuzzers/restler-fuzz-results" ]; then
            mkdir -p output-fuzzers/Restler/restler-fuzz-results
            cp -r output-fuzzers/restler-fuzz-results/* output-fuzzers/Restler/restler-fuzz-results/
            # Create zip file for parser
            cd output-fuzzers/Restler
            zip -r restler-fuzz-results.zip restler-fuzz-results/
            cd ../.. 
          fi
          
          # Cleanup temporary directories
          rm -rf output-fuzzers/evomaster-results
          rm -rf output-fuzzers/fuzzing-report
          rm -rf output-fuzzers/restler-fuzz-results
          
          # List the organized files for debugging
          find output-fuzzers -type f | sort

      # Parse results and generate dashboard
      - name: Parse Results
        run: |
          # Run all parsers
          python -m parsers
          
          # List generated data files for debugging
          find dashboard/data -type f | sort

      - name: Generate Dashboard
        run: |
          python generate_dashboard.py
          
          # List generated dashboard files for debugging
          find dashboard -type f -name "*.html" | sort

      - name: Package Dashboard
        run: |
          zip -r fuzzing-dashboard.zip dashboard/

      - name: Upload Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-dashboard
          path: fuzzing-dashboard.zip
          retention-days: 90
          
      # New step to upload the processed JSON files
      - name: Package Processed Data Files
        run: |
          # Create a zip file with all the processed data files
          zip -r processed-data.zip dashboard/data/
          
          # List the contents of the zip file for debugging
          unzip -l processed-data.zip

      - name: Upload Processed Data Files
        uses: actions/upload-artifact@v4
        with:
          name: processed-data-files
          path: processed-data.zip
          retention-days: 90
