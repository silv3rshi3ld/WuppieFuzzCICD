name: Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_NETWORK_NAME: cicd_network
  VAMPI_RESTLER_PORT: 5003
  VAMPI_WUPPIEFUZZ_PORT: 5002
  BASE_DIR: /home/michiel/actions-runner/_work/WuppieFuzzCICD/WuppieFuzzCICD

jobs:
  prepare_docker_network:
    runs-on: self-hosted
    steps:
      - name: Check if Docker Network Exists
        id: check_network
        run: |
          if docker network inspect ${{ env.DOCKER_NETWORK_NAME }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Docker Network if Not Exists
        if: steps.check_network.outputs.exists == 'false'
        run: docker network create ${{ env.DOCKER_NETWORK_NAME }}

  prepare_vampi:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fix File Permissions
        run: |
          sudo chown -R $USER:$USER ${{ env.BASE_DIR }}
          sudo chmod -R u+rwX ${{ env.BASE_DIR }}
        shell: bash

      - name: Remove Any Existing VAmPI Containers
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml down --remove-orphans || true
        shell: bash

      - name: Build VAmPI Images
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml build --force-rm
        shell: bash

  prepare_wuppiefuzz:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt, clippy

      - name: Checkout WuppieFuzz Repository
        uses: actions/checkout@v4
        with:
          repository: TNO-S3/WuppieFuzz
          path: ${{ env.BASE_DIR }}/wuppiefuzz

      - name: Cache Cargo Registry and Git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('wuppiefuzz/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache WuppieFuzz Build
        uses: actions/cache@v4
        with:
          path: wuppiefuzz/target
          key: wuppiefuzz-target-${{ hashFiles('wuppiefuzz/Cargo.lock') }}
          restore-keys: |
            wuppiefuzz-target-

      - name: Build WuppieFuzz
        working-directory: ${{ env.BASE_DIR }}/wuppiefuzz
        run: cargo build --release
        shell: bash

      - name: Upload WuppieFuzz Binary
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: ${{ env.BASE_DIR }}/wuppiefuzz/target/release/wuppiefuzz

  run_restler:
    runs-on: self-hosted
    needs: prepare_vampi
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Workspace
        run: mkdir -p ${{ env.BASE_DIR }}/workspace
        shell: bash

      - name: Copy RESTler Files
        run: |
          cp -r ${{ env.BASE_DIR }}/services/restler/config ${{ env.BASE_DIR }}/workspace/
          cp ${{ env.BASE_DIR }}/services/restler/docker-compose.restler.yml ${{ env.BASE_DIR }}/workspace/
          cp ${{ env.BASE_DIR }}/services/restler/Dockerfile.restler ${{ env.BASE_DIR }}/workspace/
        shell: bash

      - name: Cleanup existing containers
        run: |
          docker rm -f vampi-vulnerable-restler vampi-mongo restler || true
        shell: bash

      - name: Start VamPI RESTler Instance
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml -p vampi_restler up -d mongo vampi-vulnerable-restler --remove-orphans || exit 1
        shell: bash

      - name: Wait for VamPI RESTler
        run: |
          echo "Waiting for VamPI RESTler instance..."
          timeout=180
          elapsed=0
          while ! curl -s ${{ secrets.VAMPI_RESTLER_URL }}/ > /dev/null; do
            if [ $elapsed -ge $timeout ]; then
              echo "Timed out waiting for VAmPI RESTler instance."
              docker logs vampi-vulnerable-restler || true
              exit 1
            fi
            echo "VamPI not ready. Retrying in 5 seconds..."
            sleep 5
            elapsed=$((elapsed + 5))
          done
          echo "VamPI RESTler instance is up!"
        shell: bash

      - name: Start RESTler Service
        working-directory: ${{ env.BASE_DIR }}/workspace
        env:
          VAMPI_RESTLER_URL: ${{ secrets.VAMPI_RESTLER_URL }}
        run: docker-compose -f docker-compose.restler.yml up -d restler --remove-orphans || exit 1
        shell: bash

      - name: Run RESTler
        working-directory: ${{ env.BASE_DIR }}/workspace
        env:
          VAMPI_RESTLER_URL: ${{ secrets.VAMPI_RESTLER_URL }}
        run: docker-compose -f docker-compose.restler.yml up --build --remove-orphans
        shell: bash

      - name: Upload RESTler Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: restler-results
          path: ${{ env.BASE_DIR }}/workspace/output/**
          if-no-files-found: warn

      - name: Cleanup RESTler Environment
        if: always()
        run: |
          docker-compose -f ${{ env.BASE_DIR }}/services/vampi/docker-compose.vampi.yml -p vampi_restler down --remove-orphans
          docker-compose -f ${{ env.BASE_DIR }}/workspace/docker-compose.restler.yml down --remove-orphans
          rm -rf ${{ env.BASE_DIR }}/workspace
        shell: bash

  run_wuppiefuzz:
    runs-on: self-hosted
    needs: [prepare_vampi, prepare_wuppiefuzz]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download WuppieFuzz Binary
        uses: actions/download-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: ${{ env.BASE_DIR }}/wuppiefuzz_workspace

      - name: Setup WuppieFuzz Environment
        run: chmod +x ${{ env.BASE_DIR }}/wuppiefuzz_workspace/wuppiefuzz
        shell: bash

      - name: Cleanup existing containers
        run: |
          docker rm -f vampi-vulnerable-wuppiefuzz vampi-mongo wuppiefuzz || true
        shell: bash

      - name: Start VamPI WuppieFuzz Instance
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: docker-compose -f docker-compose.vampi.yml -p vampi_wuppiefuzz up -d mongo vampi-vulnerable-wuppiefuzz --remove-orphans || exit 1
        shell: bash

      - name: Wait for VamPI WuppieFuzz
        run: |
          echo "Waiting for VamPI WuppieFuzz instance..."
          timeout=180
          elapsed=0
          while ! curl -s ${{ secrets.VAMPI_WUPPIEFUZZ_URL }}/ > /dev/null; do
            if [ $elapsed -ge $timeout ]; then
              echo "Timed out waiting for VamPI WuppieFuzz instance."
              docker logs vampi-vulnerable-wuppiefuzz || true
              exit 1
            fi
            echo "VamPI not ready. Retrying in 5 seconds..."
            sleep 5
            elapsed=$((elapsed + 5))
          done
          echo "VamPI WuppieFuzz instance is up!"
        shell: bash

      - name: Run WuppieFuzz
        working-directory: ${{ env.BASE_DIR }}/wuppiefuzz_workspace
        env:
          VAMPI_WUPPIEFUZZ_URL: ${{ secrets.VAMPI_WUPPIEFUZZ_URL }}
        run: |
          mkdir -p reports
          ./wuppiefuzz output-corpus \
            --openapi-spec=${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml \
            corpus_directory
          ./wuppiefuzz fuzz \
            --report=true \
            --log-level=info \
            --initial-corpus=corpus_directory \
            --timeout=60 \
            --base-url=${{ secrets.VAMPI_WUPPIEFUZZ_URL }} \
            ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml
        shell: bash

      - name: Upload WuppieFuzz Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: ${{ env.BASE_DIR }}/wuppiefuzz_workspace/reports/
          if-no-files-found: warn

      - name: Cleanup WuppieFuzz Environment
        if: always()
        run: |
          docker-compose -f ${{ env.BASE_DIR }}/services/vampi/docker-compose.vampi.yml -p vampi_wuppiefuzz down --remove-orphans
          rm -rf ${{ env.BASE_DIR }}/wuppiefuzz_workspace
        shell: bash

  summarize_results:
    runs-on: self-hosted
    needs: [run_restler, run_wuppiefuzz]
    steps:
      - name: Download All Results
        uses: actions/download-artifact@v4
        with:
          name: '**'
          path: all_results

      - name: Create Summary
        run: |
          echo "# Fuzzing Results Summary" > summary.md
          echo "Generated on $(date)" >> summary.md
          echo "## WuppieFuzz Results" >> summary.md
          if [ -d "all_results/wuppiefuzz-results" ]; then
            issues_found=$(grep -c 'Issue' all_results/wuppiefuzz-results/report.txt || echo "0")
            echo "Number of issues found: $issues_found" >> summary.md
            if [ -f "all_results/wuppiefuzz-results/report.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/wuppiefuzz-results/report.txt" >> summary.md
            fi
          else
            echo "No WuppieFuzz results found" >> summary.md
          fi
          echo "## RESTler Results" >> summary.md
          if [ -d "all_results/restler-results" ]; then
            bugs_found=$(grep -c 'Bug' all_results/restler-results/bug_buckets/BugBuckets.txt || echo "0")
            echo "Number of bugs found: $bugs_found" >> summary.md
            if [ -f "all_results/restler-results/bug_buckets/BugBuckets.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/restler-results/bug_buckets/BugBuckets.txt" >> summary.md
            fi
          else
            echo "No RESTler results found" >> summary.md
          fi
        shell: bash

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-summary
          path: summary.md
          if-no-files-found: warn

      - name: Final Cleanup
        if: always()
        run: |
          docker container prune -f
          docker network prune -f
        shell: bash
