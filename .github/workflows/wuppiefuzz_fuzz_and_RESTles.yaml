name: Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_NETWORK_NAME: cicd_network
  VAMPI_RESTLER_PORT: 5003
  VAMPI_WUPPIEFUZZ_PORT: 5002
  BASE_DIR: ${{ github.workspace }}

jobs:
  prepare_docker_network:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup directories
        run: |
          mkdir -p $BASE_DIR/services/vampi
          mkdir -p $BASE_DIR/workspace
          mkdir -p $BASE_DIR/wuppiefuzz_workspace
          mkdir -p $HOME/.cargo $HOME/.rustup
        shell: bash

      - name: Validate Docker Compose Files
        run: |
          docker-compose -f $BASE_DIR/services/vampi/docker-compose.vampi.yml config -q
          docker-compose -f $BASE_DIR/services/restler/docker-compose.restler.yml config -q
        shell: bash

      - name: Check if Docker Network Exists
        id: check_network
        run: |
          if docker network inspect $DOCKER_NETWORK_NAME >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Docker Network if Not Exists
        if: steps.check_network.outputs.exists == 'false'
        run: |
          docker network create --subnet=172.18.0.0/16 $DOCKER_NETWORK_NAME
        shell: bash

  prepare_vampi:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Remove Any Existing VAmPI Containers
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          docker-compose -f docker-compose.vampi.yml down --remove-orphans || true
        shell: bash

      - name: Build VAmPI Images
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          docker-compose -f docker-compose.vampi.yml build --force-rm
        shell: bash

  prepare_wuppiefuzz:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Setup temporary HOME
        run: mkdir -p $RUNNER_TEMP/home

      - name: Set HOME environment variable
        run: echo "HOME=$RUNNER_TEMP/home" >> $GITHUB_ENV

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      - name: Verify Rust Installation
        run: rustc --version
        shell: bash

      - name: Checkout WuppieFuzz Repository
        uses: actions/checkout@v4
        with:
          repository: TNO-S3/WuppieFuzz
          path: ${{ env.BASE_DIR }}/wuppiefuzz

      - name: Cache Cargo Registry and Git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache WuppieFuzz Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BASE_DIR }}/wuppiefuzz/target
            ${{ env.BASE_DIR }}/wuppiefuzz/Cargo.lock
          key: ${{ runner.os }}-wuppiefuzz-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-wuppiefuzz-

  run_restler:
    runs-on: self-hosted
    needs: prepare_vampi
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Copy RESTler Files
        run: |
          cp -r ${{ env.BASE_DIR }}/services/restler/config ${{ env.BASE_DIR }}/workspace/
          cp ${{ env.BASE_DIR }}/services/restler/docker-compose.restler.yml ${{ env.BASE_DIR }}/workspace/
          cp ${{ env.BASE_DIR }}/services/restler/Dockerfile.restler ${{ env.BASE_DIR }}/workspace/
        shell: bash

      - name: Validate RESTler Docker Compose
        run: |
          docker-compose -f ${{ env.BASE_DIR }}/workspace/docker-compose.restler.yml config -q
        shell: bash

      - name: Cleanup existing containers
        run: |
          docker rm -f vampi-vulnerable-restler vampi-mongo restler || true
        shell: bash

      - name: Start VAmPI RESTler Instance
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          # Start MongoDB first
          docker-compose -f docker-compose.vampi.yml -p vampi_restler up -d mongo
          # Wait for MongoDB to be healthy
          echo "Waiting for MongoDB to initialize..."
          until docker-compose -f docker-compose.vampi.yml -p vampi_restler exec -T mongo mongo --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
            sleep 2
          done
          # Start VAmPI service
          docker-compose -f docker-compose.vampi.yml -p vampi_restler up -d vampi-vulnerable-restler
        shell: bash

      - name: Wait for RESTler Services to Initialize
        run: |
          echo "Waiting for RESTler services to become healthy..."
          for i in {1..30}; do
            if curl -s http://localhost:${VAMPI_RESTLER_PORT}/health >/dev/null; then
              echo "RESTler service is healthy."
              exit 0
            fi
            echo "RESTler service not ready yet. Waiting..."
            sleep 5
          done
          echo "RESTler service failed to become healthy in time."
          docker logs vampi-vulnerable-restler
          exit 1
        shell: bash

      - name: Start RESTler Service
        working-directory: ${{ env.BASE_DIR }}/workspace
        run: |
          export VAMPI_RESTLER_URL="http://localhost:${VAMPI_RESTLER_PORT}"
          docker-compose -f docker-compose.restler.yml up -d restler --remove-orphans || exit 1
        shell: bash

      - name: Run RESTler
        working-directory: ${{ env.BASE_DIR }}/workspace
        env:
          VAMPI_RESTLER_URL: "http://localhost:${VAMPI_RESTLER_PORT}"
        run: |
          docker-compose -f docker-compose.restler.yml up --build --remove-orphans

      - name: Upload RESTler Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: restler-results
          path: ${{ env.BASE_DIR }}/workspace/output/**
          if-no-files-found: warn

      - name: Cleanup RESTler Environment
        if: always()
        run: |
          docker-compose -f ${{ env.BASE_DIR }}/services/vampi/docker-compose.vampi.yml -p vampi_restler down --remove-orphans
          docker-compose -f ${{ env.BASE_DIR }}/workspace/docker-compose.restler.yml down --remove-orphans
          rm -rf ${{ env.BASE_DIR }}/workspace
        shell: bash

  run_wuppiefuzz:
    runs-on: self-hosted
    needs: [prepare_vampi, prepare_wuppiefuzz]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download WuppieFuzz Binary
        uses: actions/download-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: ${{ env.BASE_DIR }}/wuppiefuzz_workspace

      - name: Setup WuppieFuzz Environment
        run: |
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_workspace
          chmod +x ${{ env.BASE_DIR }}/wuppiefuzz_workspace/wuppiefuzz
        shell: bash

      - name: Validate WuppieFuzz Docker Compose
        run: |
          docker-compose -f ${{ env.BASE_DIR }}/services/vampi/docker-compose.vampi.yml config -q
        shell: bash

      - name: Cleanup existing containers
        run: |
          docker rm -f vampi-vulnerable-wuppiefuzz vampi-mongo wuppiefuzz || true
        shell: bash

      - name: Start VAmPI WuppieFuzz Instance
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          # Start MongoDB first
          docker-compose -f docker-compose.vampi.yml -p vampi_wuppiefuzz up -d mongo
          # Wait for MongoDB to be healthy
          echo "Waiting for MongoDB to initialize..."
          until docker-compose -f docker-compose.vampi.yml -p vampi_wuppiefuzz exec -T mongo mongo --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
            sleep 2
          done
          # Start VAmPI service
          docker-compose -f docker-compose.vampi.yml -p vampi_wuppiefuzz up -d vampi-vulnerable-wuppiefuzz
        shell: bash

      - name: Wait for WuppieFuzz Services to Initialize
        run: |
          echo "Waiting for WuppieFuzz services to become healthy..."
          for i in {1..30}; do
            if curl -s http://localhost:${VAMPI_WUPPIEFUZZ_PORT}/health >/dev/null; then
              echo "WuppieFuzz service is healthy."
              exit 0
            fi
            echo "WuppieFuzz service not ready yet. Waiting..."
            sleep 5
          done
          echo "WuppieFuzz service failed to become healthy in time."
          docker logs vampi-vulnerable-wuppiefuzz
          exit 1
        shell: bash

      - name: Run WuppieFuzz
        working-directory: ${{ env.BASE_DIR }}/wuppiefuzz_workspace
        env:
          VAMPI_WUPPIEFUZZ_URL: "http://localhost:5002"
        run: |
          mkdir -p reports
          # First generate the corpus
          ./wuppiefuzz output-corpus \
            --openapi-spec=${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml \
            corpus_directory

          # Then run the fuzzer with the fuzz subcommand
          ./wuppiefuzz fuzz \
            --report \
            --log-level=info \
            --initial-corpus=corpus_directory \
            --timeout=60 \
            ${{ env.BASE_DIR }}/services/vampi/openapi_specs/openapi3.yml

      - name: Upload WuppieFuzz Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: ${{ env.BASE_DIR }}/wuppiefuzz_workspace/reports/
          if-no-files-found: warn

      - name: Cleanup WuppieFuzz Environment
        if: always()
        run: |
          docker-compose -f ${{ env.BASE_DIR }}/services/vampi/docker-compose.vampi.yml -p vampi_wuppiefuzz down --remove-orphans
          rm -rf ${{ env.BASE_DIR }}/wuppiefuzz_workspace
        shell: bash

  summarize_results:
    runs-on: self-hosted
    needs: [run_restler, run_wuppiefuzz]
    steps:
      - name: Download All Results
        uses: actions/download-artifact@v4
        with:
          path: all_results

      - name: Create Summary
        run: |
          echo "# Fuzzing Results Summary" > summary.md
          echo "Generated on $(date)" >> summary.md
          echo "## WuppieFuzz Results" >> summary.md
          if [ -d "all_results/wuppiefuzz-results" ]; then
            issues_found=$(grep -c 'Issue' all_results/wuppiefuzz-results/report.txt || echo "0")
            echo "Number of issues found: $issues_found" >> summary.md
            if [ -f "all_results/wuppiefuzz-results/report.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/wuppiefuzz-results/report.txt" >> summary.md
            fi
          else
            echo "No WuppieFuzz results found" >> summary.md
          fi
          echo "## RESTler Results" >> summary.md
          if [ -d "all_results/restler-results" ]; then
            bugs_found=$(grep -c 'Bug' all_results/restler-results/bug_buckets/BugBuckets.txt || echo "0")
            echo "Number of bugs found: $bugs_found" >> summary.md
            if [ -f "all_results/restler-results/bug_buckets/BugBuckets.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/restler-results/bug_buckets/BugBuckets.txt" >> summary.md
            fi
          else
            echo "No RESTler results found" >> summary.md
          fi
        shell: bash

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-summary
          path: summary.md
          if-no-files-found: warn

      - name: Final Cleanup
        if: always()
        run: |
          docker container prune -f
          docker network prune -f
        shell: bash