name: Build and Fuzz

on:
  push:
    branches:
      - working
  pull_request:
    branches:
      - working

env:
  VAMPI_RESTLER_PORT: 5003
  VAMPI_WUPPIEFUZZ_PORT: 5002
  VAMPI_EVOMASTER_PORT: 5000
  BASE_DIR: ${{ github.workspace }}
  NETWORK_SUFFIX: ${{ github.run_id }}

jobs:
  cleanup:
    runs-on: manager-runner
    steps:
      - name: Clean previous artifacts
        run: |
          sudo rm -rf "$BASE_DIR/workspace/restler/output" || true
          sudo rm -rf "$BASE_DIR/wuppiefuzz_workspace" || true
          sudo rm -rf "$BASE_DIR/workspace/evomaster" || true

  prepare_networks:
    runs-on: manager-runner
    needs: cleanup
    steps:
      - name: Create networks
        run: |
          docker network create --subnet=172.18.0.0/16 "wuppiefuzz_network_$NETWORK_SUFFIX" || true
          docker network create --subnet=172.19.0.0/16 "evomaster_network_$NETWORK_SUFFIX" || true
          docker network create --subnet=172.20.0.0/16 "restler_network_$NETWORK_SUFFIX" || true

  setup_vampi:
    runs-on: manager-runner
    needs: prepare_networks
    strategy:
      matrix:
        instance: [restler, wuppiefuzz, evomaster]
    steps:
      - uses: actions/checkout@v4
      - name: Start VAmPI for ${{ matrix.instance }}
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          docker-compose -f docker-compose.vampi.yml -p vampi_${{ matrix.instance }} up -d vampi-vulnerable-${{ matrix.instance }}
          sleep 10  # Initial buffer before health check

      - name: Health check ${{ matrix.instance }}
        run: |
          port=$(jq -nr --arg i "${{ matrix.instance }}" \
            '$i | 
            if . == "restler" then 5003
            elif . == "wuppiefuzz" then 5002
            else 5000 end')
          
          for i in {1..15}; do
            if curl -sSf http://localhost:$port/health; then
              echo "VAmPI ${{ matrix.instance }} ready"
              break
            fi
            sleep 4
            echo "Waiting for VAmPI ${{ matrix.instance }}... ($i/15)"
          done

  run_restler:
    runs-on: manager-runner
    needs: [setup_vampi, prepare_networks]
    steps:
      - uses: actions/checkout@v4
      - name: Run RESTler
        working-directory: ${{ env.BASE_DIR }}/services/restler
        env:
          TARGET_HOST: vampi-vulnerable-restler
          TARGET_PORT: ${{ env.VAMPI_RESTLER_PORT }}
        run: |
          docker-compose -f docker-compose.restler.yml up --build
      - uses: actions/upload-artifact@v4
        with:
          name: restler-results
          path: ${{ env.BASE_DIR }}/workspace/restler/output

  run_wuppiefuzz:
    runs-on: manager-runner
    needs: [setup_vampi, prepare_networks]
    steps:
      - uses: actions/checkout@v4
      - name: Build WuppieFuzz
        run: |
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_bin
          docker build -t wuppiefuzz-builder -f ${{ env.BASE_DIR }}/services/wuppiefuzz/Dockerfile.wuppiefuzz .
          docker create -it --name wuppie_temp wuppiefuzz-builder
          docker cp wuppie_temp:/app/wuppiefuzz ${{ env.BASE_DIR }}/wuppiefuzz_bin/
          docker rm wuppie_temp

      - name: Execute WuppieFuzz
        working-directory: ${{ env.BASE_DIR }}/services/wuppiefuzz
        run: |
          docker-compose -f docker-compose.wuppiefuzz.yml up --build
      - uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: ${{ env.BASE_DIR }}/wuppiefuzz_workspace/reports

  run_evomaster:
    runs-on: manager-runner
    needs: [setup_vampi, prepare_networks]
    steps:
      - uses: actions/checkout@v4
      - name: Build EvoMaster
        working-directory: ${{ env.BASE_DIR }}/services/evomaster
        run: docker-compose -f docker-compose.evomaster.yml build

      - name: Run EvoMaster
        working-directory: ${{ env.BASE_DIR }}/services/evomaster
        run: |
          docker-compose -f docker-compose.evomaster.yml up --build
      - uses: actions/upload-artifact@v4
        with:
          name: evomaster-results
          path: ${{ env.BASE_DIR }}/workspace/evomaster/results

  post_process:
    runs-on: manager-runner
    needs: [run_restler, run_wuppiefuzz, run_evomaster]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: all_results
      - name: Generate summary
        run: |
          echo "Security Test Results Summary" > report.md
          echo "============================" >> report.md
          
          # RESTler results
          echo "### RESTler Findings" >> report.md
          find all_results/restler-results -name 'bug_buckets.json' -exec jq '.bugs[].message' {} + >> report.md || echo "No RESTler findings" >> report.md
          
          # WuppieFuzz results
          echo "### WuppieFuzz Findings" >> report.md
          find all_results/wuppiefuzz-results -name '*.json' -exec jq '.vulnerabilities[]?.description' {} + >> report.md || echo "No WuppieFuzz findings" >> report.md
          
          # EvoMaster results
          echo "### EvoMaster Findings" >> report.md
          find all_results/evomaster-results -name '*.txt' -exec cat {} + >> report.md || echo "No EvoMaster findings" >> report.md
          
          cat report.md
      - uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: report.md

  cleanup_final:
    runs-on: manager-runner
    needs: post_process
    if: always()
    steps:
      - name: Remove networks
        run: |
          docker network rm "wuppiefuzz_network_$NETWORK_SUFFIX" || true
          docker network rm "evomaster_network_$NETWORK_SUFFIX" || true
          docker network rm "restler_network_$NETWORK_SUFFIX" || true
      - name: Prune system
        run: |
          docker system prune -af
          docker volume prune -f