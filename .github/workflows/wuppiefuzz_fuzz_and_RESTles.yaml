name: Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  setup_docker_wuppiefuzz:
    runs-on: self-hosted
    outputs:
      docker_cache_key: ${{ steps.set_cache_key.outputs.docker_cache_key }}
    steps:
      - name: Clean up Docker networks and containers
        if: always()
        run: |
          docker-compose -f wuppiefuzz/docker-compose-wuppiefuzz.yml down --remove-orphans -p wuppiefuzz || true
          docker network rm wuppycicd_network || true

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version

      - name: Set Cache Key
        id: set_cache_key
        run: echo "docker_cache_key=docker-cache-${{ github.sha }}" >> $GITHUB_ENV

      - name: Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-wuppiefuzz
          key: ${{ env.docker_cache_key }}
          restore-keys: |
            docker-cache-

  checkout_repos_wuppiefuzz:
    runs-on: self-hosted
    needs: setup_docker_wuppiefuzz
    steps:
      - name: Checkout WuppieFuzz repository
        uses: actions/checkout@v4
        with:
          repository: TNO-S3/WuppieFuzz
          path: wuppiefuzz

      - name: Manually clean untracked files
        run: |
          sudo rm -rf wuppiefuzz/reports/
          git -C wuppiefuzz clean -ffdx

      - name: Get WuppieFuzz commit hash
        run: |
          git ls-remote https://github.com/TNO-S3/WuppieFuzz.git HEAD | awk '{print $1}' > wuppiefuzz/wuppiefuzz_commit.txt
          echo "commit_hash=$(cat wuppiefuzz/wuppiefuzz_commit.txt)" >> $GITHUB_ENV

      - name: Upload WuppieFuzz repository as artifact
        uses: actions/upload-artifact@v4
        with:
          name: WuppieFuzz
          path: wuppiefuzz

  cache_dependencies_wuppiefuzz:
    runs-on: self-hosted
    needs: checkout_repos_wuppiefuzz
    steps:
      - name: Restore Rust and Git caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            wuppiefuzz/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('wuppiefuzz/Cargo.lock') }}-${{ env.commit_hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-

  build_and_run_wuppiefuzz:
    runs-on: self-hosted
    needs: cache_dependencies_wuppiefuzz
    steps:
      - name: Download WuppieFuzz repository artifact
        uses: actions/download-artifact@v4
        with:
          name: WuppieFuzz
          path: .

      - name: Build and run services with Docker Compose (WuppieFuzz)
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
        run: |
          docker network inspect wuppycicd_network >/dev/null 2>&1 || docker network create wuppycicd_network
          docker-compose -f wuppiefuzz/docker-compose-wuppiefuzz.yml up -d --build -p wuppiefuzz

  test_connectivity_wuppiefuzz:
    runs-on: self-hosted
    needs: build_and_run_wuppiefuzz
    steps:
      - name: Wait for services to start
        run: sleep 15

      - name: Test API Connectivity
        run: curl -I http://localhost:3001

  run_fuzz_wuppiefuzz:
    runs-on: self-hosted
    needs: test_connectivity_wuppiefuzz
    steps:
      - name: Download WuppieFuzz repository artifact
        uses: actions/download-artifact@v4
        with:
          name: WuppieFuzz
          path: .

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies for WuppieFuzz
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Build WuppieFuzz
        run: |
          cd wuppiefuzz
          cargo build --release
          cd ..

      - name: Add WuppieFuzz to PATH
        run: |
          echo "${{ github.workspace }}/wuppiefuzz/target/release" >> $GITHUB_PATH

      - name: Generate initial corpus
        run: wuppiefuzz output-corpus --openapi-spec=openapi.yaml corpus_directory

      - name: Run WuppieFuzz
        env:
          RUST_BACKTRACE: 1
        run: |
          if [ -f "login.yaml" ]; then
            wuppiefuzz fuzz --report=true --log-level=info --initial-corpus=corpus_directory --timeout=60 --authentication login.yaml openapi.yaml
          else
            wuppiefuzz fuzz --report=true --log-level=info --initial-corpus=corpus_directory --timeout=60 openapi.yaml
          fi

  finalize_wuppiefuzz:
    runs-on: self-hosted
    needs: run_fuzz_wuppiefuzz
    steps:
      - name: Upload report directory
        uses: actions/upload-artifact@v4
        with:
          name: report-directory
          path: wuppiefuzz/reports/

      - name: Adjust permissions of workspace
        if: always()
        run: |
          sudo chown -R $(id -u):$(id -g) $GITHUB_WORKSPACE
          sudo chmod -R u+rwX $GITHUB_WORKSPACE

      - name: Clean up Docker networks and containers
        if: always()
        run: |
          docker-compose -f wuppiefuzz/docker-compose-wuppiefuzz.yml down --remove-orphans -p wuppiefuzz || true
          docker network rm wuppycicd_network || true

  setup_docker_restler:
    runs-on: self-hosted
    needs: finalize_wuppiefuzz
    steps:
      - name: Clean up Docker networks and containers
        if: always()
        run: |
          docker-compose -f restler/docker-compose-restler.yml down --remove-orphans -p restler || true
          docker network rm restler_network || true

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version

  build_and_run_restler:
    runs-on: self-hosted
    needs: setup_docker_restler
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set execute permissions for entrypoint.sh
        run: |
          chmod +x restler/restler_config/entrypoint.sh

      - name: Build and run services with Docker Compose (RESTler)
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
        run: |
          docker network inspect restler_network >/dev/null 2>&1 || docker network create restler_network
          docker-compose -f restler/docker-compose-restler.yml up -d --build -p restler

      - name: Wait for services to start
        run: sleep 15

      - name: Test API Connectivity
        run: curl -I http://localhost:3001

  run_fuzz_restler:
    runs-on: self-hosted
    needs: build_and_run_restler
    steps:
      - name: Run RESTler Fuzzing via Docker Compose
        run: |
          docker-compose -f restler/docker-compose-restler.yml run --rm restler
        env:
          RUST_BACKTRACE: 1

  finalize_restler:
    runs-on: self-hosted
    needs: run_fuzz_restler
    steps:
      - name: Upload RESTler report directory
        uses: actions/upload-artifact@v4
        with:
          name: restler-report-directory
          path: restler/RestlerResults/

      - name: Adjust permissions of workspace
        if: always()
        run: |
          sudo chown -R $(id -u):$(id -g) $GITHUB_WORKSPACE
          sudo chmod -R u+rwX $GITHUB_WORKSPACE

      - name: Clean up Docker networks and containers
        if: always()
        run: |
          docker-compose -f restler/docker-compose-restler.yml down --remove-orphans -p restler || true
          docker network rm restler_network || true
