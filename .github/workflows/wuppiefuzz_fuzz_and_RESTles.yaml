name: Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  prepare_docker_network:
    runs-on: self-hosted
    steps:
      - name: Check if Docker Network Exists
        id: check_network
        run: |
          if docker network inspect cicd_network >/dev/null 2>&1; then
            echo "Network cicd_network already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Docker Network if Not Exists
        if: steps.check_network.outputs.exists == 'false'
        run: |
          docker network create cicd_network
        shell: bash

      - name: Confirm Docker Network Status
        run: |
          docker network ls
        shell: bash

  prepare_vampi:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # Using default checkout path

      - name: List Repository Contents
        run: |
          echo "Listing root directory after checkout:"
          ls -la

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build VamPI Images
        run: |
          cd VAmPI-master
          docker-compose -f docker-compose.yml build --force-rm
        shell: bash

  prepare_wuppiefuzz:
    runs-on: self-hosted
    needs: prepare_docker_network
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"
        shell: bash

      - name: Checkout WuppieFuzz Repository
        uses: actions/checkout@v4
        with:
          repository: TNO-S3/WuppieFuzz
          path: wuppiefuzz

      - name: List WuppieFuzz Repository Contents
        run: |
          echo "Listing WuppieFuzz repository contents:"
          ls -la wuppiefuzz
        shell: bash

      - name: Cache WuppieFuzz Build
        uses: actions/cache@v4
        with:
          path: wuppiefuzz/target
          key: wuppiefuzz-target-${{ hashFiles('wuppiefuzz/Cargo.lock') }}
          restore-keys: |
            wuppiefuzz-target-
      
      - name: Build WuppieFuzz
        run: |
          cd wuppiefuzz
          cargo build --release
        shell: bash

      - name: Upload WuppieFuzz Binary
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: wuppiefuzz/target/release/wuppiefuzz

  run_restler:
    runs-on: self-hosted
    needs: [prepare_vampi, prepare_docker_network]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # Using default checkout path

      - name: List Repository Contents for run_restler
        run: |
          echo "Listing repository contents in run_restler job:"
          ls -la
        shell: bash

      - name: Set Up Workspace
        run: mkdir -p workspace
        shell: bash

      - name: Copy RESTler Files
        run: |
          cp -r restler/restler_config workspace/
          cp restler/docker-compose-restler.yml workspace/
          cp restler/Dockerfile.restler workspace/
          echo "Files in workspace:"
          ls -la workspace/
        shell: bash

      - name: Verify openapi3.yml
        run: |
          if [ ! -f "VAmPI-master/openapi_specs/openapi3.yml" ]; then
            echo "openapi3.yml is missing or not a file."
            ls -la VAmPI-master/openapi_specs/
            exit 1
          fi
          echo "openapi3.yml exists and is a file."
        shell: bash

      - name: Remove Existing RESTler Containers (If Any)
        run: |
          docker-compose -f workspace/docker-compose-restler.yml down --remove-orphans || true
        shell: bash

      - name: Start VamPI RESTler Instance
        run: |
          cd workspace
          docker-compose -f docker-compose-restler.yml up -d restler --remove-orphans || { echo "Failed to start RESTler"; exit 1; }
        shell: bash

      - name: Wait for VamPI RESTler
        run: |
          echo "Waiting for VamPI RESTler instance..."
          until curl -s http://localhost:5003/ > /dev/null; do
            echo "VamPI not ready. Retrying in 5 seconds..."
            sleep 5
          done
          echo "VamPI RESTler instance is up!"
        shell: bash

      - name: Run RESTler
        run: |
          cd workspace
          docker-compose -f docker-compose-restler.yml up --build --remove-orphans
        shell: bash

      - name: Upload RESTler Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: restler-results
          path: workspace/restler/output/**
          # If RESTler outputs to a different directory, adjust the path accordingly

      - name: Cleanup RESTler Environment
        if: always()
        run: |
          cd workspace
          docker-compose -f docker-compose-restler.yml down --remove-orphans
          rm -rf workspace
        shell: bash

  run_wuppiefuzz:
    runs-on: self-hosted
    needs: [prepare_wuppiefuzz, prepare_vampi, prepare_docker_network]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # Using default checkout path

      - name: List Repository Contents for run_wuppiefuzz
        run: |
          echo "Listing repository contents in run_wuppiefuzz job:"
          ls -la
        shell: bash

      - name: Download WuppieFuzz Binary
        uses: actions/download-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: wuppiefuzz_workspace

      - name: List WuppieFuzz Workspace Contents
        run: |
          echo "Listing wuppiefuzz_workspace contents:"
          ls -la wuppiefuzz_workspace
        shell: bash

      - name: Setup WuppieFuzz Environment
        run: |
          chmod +x wuppiefuzz_workspace/wuppiefuzz
          # Removed the redundant mv command
          ls -la wuppiefuzz_workspace
        shell: bash

      - name: Remove Existing WuppieFuzz Containers (If Any)
        run: |
          docker-compose -f VAmPI-master/docker-compose.yml down --remove-orphans || true
        shell: bash

      - name: Start VamPI Instance
        run: |
          cd VAmPI-master
          docker-compose -f docker-compose.yml up -d vampi-vulnerable-wuppiefuzz --remove-orphans || { echo "Failed to start VamPI WuppieFuzz instance"; exit 1; }
        shell: bash

      - name: Wait for VamPI WuppieFuzz
        run: |
          echo "Waiting for VamPI WuppieFuzz instance..."
          until curl -s http://localhost:5002/ > /dev/null; do
            echo "VamPI not ready. Retrying in 5 seconds..."
            sleep 5
          done
          echo "VamPI WuppieFuzz instance is up!"
        shell: bash

      - name: Run WuppieFuzz
        run: |
          cd wuppiefuzz_workspace
          mkdir -p reports
          ./wuppiefuzz output-corpus \
            --openapi-spec=VAmPI-master/openapi_specs/openapi3.yml \
            corpus_directory
          ./wuppiefuzz fuzz \
            --report=true \
            --log-level=info \
            --initial-corpus=corpus_directory \
            --timeout=60 \
            --base-url=http://localhost:5002 \
            VAmPI-master/openapi_specs/openapi3.yml
        shell: bash

      - name: Upload WuppieFuzz Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: wuppiefuzz_workspace/reports/
          # Ensure that WuppieFuzz outputs reports to this directory

      - name: Cleanup WuppieFuzz Environment
        if: always()
        run: |
          cd VAmPI-master
          docker-compose -f docker-compose.yml down --remove-orphans
          rm -rf wuppiefuzz_workspace
        shell: bash

  summarize_results:
    runs-on: self-hosted
    needs: [run_wuppiefuzz, run_restler]
    steps:
      - name: Download All Results
        uses: actions/download-artifact@v4
        with:
          name: '**'
          path: all_results

      - name: Create Summary
        run: |
          echo "# Fuzzing Results Summary" > summary.md
          echo "## WuppieFuzz Results" >> summary.md
          if [ -d "all_results/wuppiefuzz-results" ]; then
            issues_found=$(grep -c 'Issue' all_results/wuppiefuzz-results/report.txt || echo "0")
            echo "Number of issues found: $issues_found" >> summary.md
            if [ -f "all_results/wuppiefuzz-results/report.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/wuppiefuzz-results/report.txt" >> summary.md
            fi
          else
            echo "No WuppieFuzz results found" >> summary.md
          fi
          echo "## RESTler Results" >> summary.md
          if [ -d "all_results/restler-results" ]; then
            bugs_found=$(grep -c 'Bug' all_results/restler-results/bug_buckets/BugBuckets.txt || echo "0")
            echo "Number of bugs found: $bugs_found" >> summary.md
            if [ -f "all_results/restler-results/bug_buckets/BugBuckets.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/restler-results/bug_buckets/BugBuckets.txt" >> summary.md
            fi
          else
            echo "No RESTler results found" >> summary.md
          fi
        shell: bash

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-summary
          path: summary.md

      - name: Final Cleanup
        if: always()
        run: |
          docker container prune -f
          docker network prune -f
        shell: bash
