name: Build and Fuzz

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to prepare WuppieFuzz
  prepare_wuppiefuzz:
    runs-on: self-hosted
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source "$HOME/.cargo/env"

      - name: Checkout WuppieFuzz Repository
        uses: actions/checkout@v4
        with:
          repository: TNO-S3/WuppieFuzz
          path: wuppiefuzz

      - name: Cache WuppieFuzz Build
        id: cache-wuppiefuzz-build
        uses: actions/cache@v4
        with:
          path: wuppiefuzz/target
          key: wuppiefuzz-target-${{ hashFiles('wuppiefuzz/Cargo.lock') }}

      - name: Build WuppieFuzz
        if: steps.cache-wuppiefuzz-build.outputs.cache-hit != 'true'
        run: |
          cd wuppiefuzz
          cargo build --release

      - name: Upload WuppieFuzz Binary
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: wuppiefuzz/target/release/wuppiefuzz

  # Job to prepare the API
  prepare_api:
    runs-on: self-hosted
    steps:
      - name: Checkout API Repository
        uses: actions/checkout@v4
        with:
          repository: silv3rshi3ld/WuppieFuzzCICD
          path: api

      - name: Upload API
        uses: actions/upload-artifact@v4
        with:
          name: vulnerable-api
          path: api/

  # Job to run WuppieFuzz
  run_wuppiefuzz:
    runs-on: self-hosted
    needs: [prepare_wuppiefuzz, prepare_api]
    steps:
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Setup Docker Network
        run: |
          docker network create --driver bridge cicd_network || true

      - name: Create Workspace
        run: mkdir -p wuppiefuzz_workspace

      - name: Download WuppieFuzz Binary
        uses: actions/download-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: wuppiefuzz_workspace/wuppiefuzz

      - name: Download API
        uses: actions/download-artifact@v4
        with:
          name: vulnerable-api
          path: wuppiefuzz_workspace/api

      - name: Make WuppieFuzz Executable
        run: chmod +x wuppiefuzz_workspace/wuppiefuzz/wuppiefuzz

      - name: Start API Service
        run: |
          cd wuppiefuzz_workspace/api
          docker-compose -f docker-compose.base.yml up -d --build

      - name: Wait for API
        run: |
          echo "Waiting for API to become available..."
          until curl -s http://localhost:3001 > /dev/null; do
            echo "API not ready. Retrying in 5 seconds..."
            sleep 5
          done
          echo "API is up!"

      - name: Run WuppieFuzz
        run: |
          cd wuppiefuzz_workspace
          # Generate initial corpus
          ./wuppiefuzz/wuppiefuzz output-corpus --openapi-spec=api/openapi.yaml corpus_directory
          # Run fuzzing
          ./wuppiefuzz/wuppiefuzz fuzz \
            --report=true \
            --log-level=info \
            --initial-corpus=corpus_directory \
            --timeout=60 \
            api/openapi.yaml

      - name: Upload WuppieFuzz Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-results
          path: wuppiefuzz_workspace/wuppiefuzz/reports/

      - name: Cleanup
        if: always()
        run: |
          cd wuppiefuzz_workspace/api
          docker-compose -f docker-compose.base.yml down --remove-orphans || true
          cd ../../
          rm -rf wuppiefuzz_workspace

  # Job to run RESTler
  run_restler:
      runs-on: self-hosted
      needs: [prepare_api]
      steps:
        - name: Install Docker Compose
          run: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

        - name: Setup Docker Network
          run: |
            docker network create --driver bridge cicd_network || true

        - name: Create Workspace
          run: mkdir -p restler_workspace

        - name: Download API
          uses: actions/download-artifact@v4
          with:
            name: vulnerable-api
            path: restler_workspace/api

        - name: Start API Service
          env:
            SMTP_USER: ${{ secrets.SMTP_USER }}
            SMTP_PASS: ${{ secrets.SMTP_PASS }}
            SMTP_HOST: ${{ secrets.SMTP_HOST }}
            SMTP_PORT: ${{ secrets.SMTP_PORT }}
          run: |
            cd restler_workspace/api
            chmod +x server/wait-for
            chmod +x server/docker-entrypoint.sh
            docker-compose -f docker-compose.base.yml up -d --build

        - name: Wait for API
          run: |
            echo "Waiting for API to become available..."
            until curl -s http://localhost:3001/health > /dev/null; do
              echo "API not ready. Retrying in 5 seconds..."
              sleep 5
            done
            echo "API is up!"

        - name: Run RESTler
          run: |
            cd restler_workspace
            cp api/openapi.yaml ./
            cp -r api/restler/restler_config .
            cp api/restler/Dockerfile.restler .
            cp api/restler/docker-compose-restler.yml .
            docker-compose -f docker-compose-restler.yml up --build

        - name: Upload RESTler Results
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: restler-results
            path: restler_workspace/restler_output/

        - name: Cleanup
          if: always()
          run: |
            cd restler_workspace/api
            docker-compose -f docker-compose.base.yml down --remove-orphans || true
            cd ../../
            rm -rf restler_workspace

  # Job to summarize results
  summarize_results:
    runs-on: self-hosted
    needs: [run_wuppiefuzz, run_restler]
    steps:
      - name: Final Cleanup
        run: |
          docker container prune -f
          docker network prune -f

      - name: Download Results
        uses: actions/download-artifact@v4
        with:
          name: '**'
          path: all_results

      - name: Create Summary
        run: |
          echo "# Fuzzing Results Summary" > summary.md
          echo "## WuppieFuzz Results" >> summary.md
          if [ -d "all_results/wuppiefuzz-results" ]; then
            issues_found=$(grep -c 'Issue' all_results/wuppiefuzz-results/report.txt || echo "0")
            echo "Number of issues found: $issues_found" >> summary.md
            if [ -f "all_results/wuppiefuzz-results/report.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/wuppiefuzz-results/report.txt" >> summary.md
            fi
          else
            echo "No WuppieFuzz results found" >> summary.md
          fi

          echo "## RESTler Results" >> summary.md
          if [ -d "all_results/restler-results" ]; then
            bugs_found=$(grep -c 'Bug' all_results/restler-results/bug_buckets/BugBuckets.txt || echo "0")
            echo "Number of bugs found: $bugs_found" >> summary.md
            if [ -f "all_results/restler-results/bug_buckets/BugBuckets.txt" ]; then
              echo "### Detailed Findings" >> summary.md
              cat "all_results/restler-results/bug_buckets/BugBuckets.txt" >> summary.md
            fi
          else
            echo "No RESTler results found" >> summary.md
          fi

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: fuzzing-summary
          path: summary.md
