name: API Fuzzing Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

env:
  DOCKER_NETWORK_NAME: cicd_network
  VAMPI_RESTLER_PORT: 5003
  VAMPI_WUPPIEFUZZ_PORT: 5002
  VAMPI_EVOMASTER_PORT: 5001
  BASE_DIR: ${{ github.workspace }}

jobs:
  initialize_environment:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Base Directories
        run: |
          mkdir -p ${{ env.BASE_DIR }}/services/vampi
          mkdir -p ${{ env.BASE_DIR }}/workspace
          mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_workspace
          mkdir -p $HOME/.cargo $HOME/.rustup
        shell: bash

      - name: Create Docker Network
        run: |
          if ! docker network inspect $DOCKER_NETWORK_NAME >/dev/null 2>&1; then
            for i in {1..3}; do
              if docker network create --subnet=172.20.0.0/16 $DOCKER_NETWORK_NAME; then
                echo "Network created successfully"
                break
              fi
              if [ $i -eq 3 ]; then
                echo "Failed to create network after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying..."
              sleep 2
            done
          fi
        shell: bash

  setup_target_application:
    runs-on: self-hosted
    needs: initialize_environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build VAmPI Docker Images
        working-directory: ${{ env.BASE_DIR }}/services/vampi
        run: |
          # Cleanup existing containers
          docker compose -f docker-compose.vampi.yml down --remove-orphans || true
          # Build fresh images
          docker compose -f docker-compose.vampi.yml build --force-rm
        shell: bash

  prepare_fuzzers:
    runs-on: self-hosted
    needs: initialize_environment
    strategy:
      matrix:
        fuzzer: [restler, wuppiefuzz, evomaster]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Fuzzer Environment
        run: |
          case "${{ matrix.fuzzer }}" in
            "restler")
              mkdir -p ${{ env.BASE_DIR }}/workspace/restler/{config,output}
              ;;
            "wuppiefuzz")
              mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_workspace
              mkdir -p ${{ env.BASE_DIR }}/wuppiefuzz_bin
              ;;
            "evomaster")
              mkdir -p ${{ env.BASE_DIR }}/workspace/evomaster/evomaster_results
              ;;
          esac
        shell: bash

      - name: Get WuppieFuzz Latest Commit
        if: matrix.fuzzer == 'wuppiefuzz'
        id: get-commit
        run: |
          LATEST_COMMIT=$(git ls-remote https://github.com/TNO-S3/WuppieFuzz.git HEAD | cut -f1)
          echo "commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache WuppieFuzz Binary
        if: matrix.fuzzer == 'wuppiefuzz'
        id: cache-wuppiefuzz
        uses: actions/cache@v4
        with:
          path: ${{ env.BASE_DIR }}/wuppiefuzz_bin
          key: wuppiefuzz-${{ steps.get-commit.outputs.commit }}
          restore-keys: |
            wuppiefuzz-

      - name: Setup Rust for WuppieFuzz
        if: matrix.fuzzer == 'wuppiefuzz' && steps.cache-wuppiefuzz.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Build WuppieFuzz
        if: matrix.fuzzer == 'wuppiefuzz' && steps.cache-wuppiefuzz.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/TNO-S3/WuppieFuzz.git ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cd ${{ env.BASE_DIR }}/wuppiefuzz_temp
          cargo build --release
          cp target/release/wuppiefuzz ${{ env.BASE_DIR }}/wuppiefuzz_bin/
          cd ${{ env.BASE_DIR }}
          rm -rf wuppiefuzz_temp
        shell: bash

      - name: Upload WuppieFuzz Binary
        if: matrix.fuzzer == 'wuppiefuzz'
        uses: actions/upload-artifact@v4
        with:
          name: wuppiefuzz-binary
          path: ${{ env.BASE_DIR }}/wuppiefuzz_bin/wuppiefuzz
          if-no-files-found: error
          retention-days: 1

  prepare_openapi_specs:
    runs-on: self-hosted
    needs: initialize_environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate OpenAPI Specs
        run: |
          for fuzzer in "restler" "wuppiefuzz" "evomaster"; do
            case $fuzzer in
              "restler")
                PORT=${{ env.VAMPI_RESTLER_PORT }}
                OUTPUT_DIR="${{ env.BASE_DIR }}/workspace/restler"
                ;;
              "wuppiefuzz")
                PORT=${{ env.VAMPI_WUPPIEFUZZ_PORT }}
                OUTPUT_DIR="${{ env.BASE_DIR }}/wuppiefuzz_workspace"
                ;;
              "evomaster")
                PORT=${{ env.VAMPI_EVOMASTER_PORT }}
                OUTPUT_DIR="${{ env.BASE_DIR }}/workspace/evomaster"
                ;;
            esac
            
            mkdir -p "$OUTPUT_DIR"
            cp ${{ env.BASE_DIR }}/services/vampi/openapi_specs/vampi.openapi3.yml "$OUTPUT_DIR/openapi3.yml"
            sed -i "s|\${API_URL}|http://localhost:$PORT|g" "$OUTPUT_DIR/openapi3.yml"
          done
        shell: bash

  run_fuzzing:
    runs-on: self-hosted
    needs: [setup_target_application, prepare_fuzzers, prepare_openapi_specs]
    strategy:
      matrix:
        fuzzer: [restler, wuppiefuzz, evomaster]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup VAmPI for Fuzzer
        run: |
          # Set port based on fuzzer
          case "${{ matrix.fuzzer }}" in
            "restler")
              export VAMPI_PORT=${{ env.VAMPI_RESTLER_PORT }}
              ;;
            "wuppiefuzz")
              export VAMPI_PORT=${{ env.VAMPI_WUPPIEFUZZ_PORT }}
              ;;
            "evomaster")
              export VAMPI_PORT=${{ env.VAMPI_EVOMASTER_PORT }}
              ;;
          esac
          
          # Create docker-compose override file for network configuration
          cat > docker-compose.override.yml <<EOL
          networks:
            default:
              name: ${{ env.DOCKER_NETWORK_NAME }}
              external: true
          EOL
          
          # Start VAmPI instance
          docker compose -f ${{ env.BASE_DIR }}/services/vampi/docker-compose.vampi.yml \
            -f docker-compose.override.yml \
            -p vampi_${{ matrix.fuzzer }} \
            up -d vampi-vulnerable-${{ matrix.fuzzer }}
          
          # Wait for VAmPI to be healthy
          echo "Waiting for VAmPI instance..."
          for i in {1..30}; do
            if curl -s http://localhost:$VAMPI_PORT/health >/dev/null; then
              echo "VAmPI is healthy!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "VAmPI failed to become healthy"
              docker logs vampi-vulnerable-${{ matrix.fuzzer }}
              exit 1
            fi
            echo "Waiting... (attempt $i/30)"
            sleep 2
          done
        shell: bash

  summarize_results:
    runs-on: self-hosted
    needs: run_fuzzing
    steps:
      - name: Download Fuzzer Results
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.fuzzer }}-results
          path: all_results/${{ matrix.fuzzer }}-results
          if-no-files-found: warn

      - name: List Downloaded Artifacts
        run: |
          echo "Listing ${{ matrix.fuzzer }} Results:"
          ls -la all_results/${{ matrix.fuzzer }}-results || echo "${{ matrix.fuzzer }} results directory not found."
        shell: bash
        continue-on-error: true

      - name: Final Cleanup
        if: always()
        run: |
          echo "Pruning Docker containers..."
          docker container prune -f || echo "Failed to prune Docker containers."
          echo "Pruning Docker networks..."
          docker network prune -f || echo "Failed to prune Docker networks."
        shell: bash

  cleanup_all:
    runs-on: self-hosted
    needs: summarize_results
    if: always()
    steps:
      - name: Cleanup Docker Resources
        run: |
          echo "Cleaning up Docker resources..."
          # Clean up containers
          docker compose -f ${{ env.BASE_DIR }}/services/vampi/docker-compose.vampi.yml down --remove-orphans || true
          docker compose -f ${{ env.BASE_DIR }}/workspace/restler/docker-compose.restler.yml down --remove-orphans || true
          docker compose -f ${{ env.BASE_DIR }}/workspace/evomaster/docker-compose.evomaster.yml down --remove-orphans || true
          
          # Remove network if it exists
          if docker network inspect $DOCKER_NETWORK_NAME >/dev/null 2>&1; then
            docker network rm $DOCKER_NETWORK_NAME || true
          fi
        shell: bash

      - name: Cleanup Workspace
        run: |
          echo "Cleaning up workspace..."
          rm -rf ${{ env.BASE_DIR }}/workspace/restler/output/* || true
          rm -rf ${{ env.BASE_DIR }}/wuppiefuzz_workspace/reports/* || true
          rm -rf ${{ env.BASE_DIR }}/workspace/evomaster/evomaster_results/* || true
        shell: bash
