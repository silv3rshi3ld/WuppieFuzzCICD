#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2025-02-19T13:47:21.519150Z[Etc/UTC]
#  
#  The generated test suite contains 7 tests
#  
#  Covered targets: 25
#  
#  Used time: 0h 1m 19s
#  
#  Needed budget for current results: 72%
#  
#  This file contains test cases that represent successful calls.
class EvoMaster_successes_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:5000"
    
    
    
    
    
    
    
    
    
    
    # Calls:
    # (200) GET:/books/v1
    @timeout_decorator.timeout(60)
    def test_0(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/books/v1",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["Books"]) == 3
        assert res_0.json()["Books"][0]["book_title"] == "bookTitle40"
        assert res_0.json()["Books"][0]["user"] == "name1"
        assert res_0.json()["Books"][1]["book_title"] == "bookTitle54"
        assert res_0.json()["Books"][1]["user"] == "name2"
        assert res_0.json()["Books"][2]["book_title"] == "bookTitle21"
        assert res_0.json()["Books"][2]["user"] == "admin"
    
    
    # Calls:
    # (200) GET:/users/v1/_debug
    @timeout_decorator.timeout(60)
    def test_1(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/users/v1/_debug",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["users"]) == 3
        assert res_0.json()["users"][0]["admin"] == False
        assert res_0.json()["users"][0]["email"] == "mail1@mail.com"
        assert res_0.json()["users"][0]["password"] == "pass1"
        assert res_0.json()["users"][0]["username"] == "name1"
        assert res_0.json()["users"][1]["admin"] == False
        assert res_0.json()["users"][1]["email"] == "mail2@mail.com"
        assert res_0.json()["users"][1]["password"] == "pass2"
        assert res_0.json()["users"][1]["username"] == "name2"
        assert res_0.json()["users"][2]["admin"] == True
        assert res_0.json()["users"][2]["email"] == "admin@mail.com"
        assert res_0.json()["users"][2]["password"] == "pass1"
        assert res_0.json()["users"][2]["username"] == "admin"
    
    
    # Calls:
    # (200) GET:/users/v1
    @timeout_decorator.timeout(60)
    def test_2(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/users/v1",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["users"]) == 3
        assert res_0.json()["users"][0]["email"] == "mail1@mail.com"
        assert res_0.json()["users"][0]["username"] == "name1"
        assert res_0.json()["users"][1]["email"] == "mail2@mail.com"
        assert res_0.json()["users"][1]["username"] == "name2"
        assert res_0.json()["users"][2]["email"] == "admin@mail.com"
        assert res_0.json()["users"][2]["username"] == "admin"
    
    
    # Calls:
    # (200) GET:/
    @timeout_decorator.timeout(60)
    def test_3(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["message"] == "VAmPI the Vulnerable API"
        assert res_0.json()["help"] == "VAmPI is a vulnerable on purpose API. It was created in order to evaluate the efficiency of third party tools in identifying vulnerabilities in APIs but it can also be used in learning/teaching purposes."
        assert res_0.json()["vulnerable"] == 1.0
    
    
    # Calls:
    # (200) GET:/createdb
    @timeout_decorator.timeout(60)
    def test_4(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/createdb",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["message"] == "Database populated."
    
    
    # Calls:
    # (200) GET:/users/v1/{username}
    # Using 1 example:
    #   name1
    @timeout_decorator.timeout(60)
    def test_5(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/users/v1/name1",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["username"] == "name1"
        assert res_0.json()["email"] == "mail1@mail.com"
    
    
    # Calls:
    # (200) POST:/users/v1/login
    @timeout_decorator.timeout(60)
    def test_6(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"username\": \"qR\", " + \
            " \"password\": \"wp22sirx2YkPyT\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/users/v1/login",
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["status"] == "fail"
        assert res_0.json()["message"] == "Username does not exist"


if __name__ == '__main__':
    unittest.main()
