#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2025-02-19T13:47:21.481781Z[Etc/UTC]
#  
#  The generated test suite contains 7 tests
#  
#  Covered targets: 26
#  
#  Used time: 0h 1m 19s
#  
#  Needed budget for current results: 72%
#  
#  This file contains test cases that are likely to indicate faults.
class EvoMaster_faults_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:5000"
    
    
    
    
    
    
    
    
    
    
    # Calls:
    # (400) POST:/users/v1/register
    # Found 1 potential fault of type-code 200
    # Using 1 example:
    #   user@tempmail.com
    @timeout_decorator.timeout(60)
    def test_0(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/users/v1/register -> No response body is expected but one was found.
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"email\": \"user@tempmail.com\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/users/v1/register",
                    headers=headers, data=body)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["status"] == "fail"
        assert res_0.json()["message"] == "'username' is a required property"
    
    
    # Calls:
    # (401) GET:/books/v1/{book_title}
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_1(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/books/v1/{book_title} -> Response Content-Type header 'application/problem+json' does not match any allowed types. Must be one of: [application/json].
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/books/v1/uYUYPznHnHbzuaU",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/problem+json" in res_0.headers["content-type"]
        assert res_0.json()["detail"] == "No authorization token provided"
        assert res_0.json()["status"] == 401.0
        assert res_0.json()["title"] == "Unauthorized"
        assert res_0.json()["type"] == "about:blank"
    
    
    # Calls:
    # (401) GET:/me
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_2(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/me -> Response Content-Type header 'application/problem+json' does not match any allowed types. Must be one of: [application/json].
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/me",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/problem+json" in res_0.headers["content-type"]
        assert res_0.json()["detail"] == "No authorization token provided"
        assert res_0.json()["status"] == 401.0
        assert res_0.json()["title"] == "Unauthorized"
        assert res_0.json()["type"] == "about:blank"
    
    
    # Calls:
    # (401) POST:/books/v1
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_3(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/books/v1 -> Response Content-Type header 'application/problem+json' does not match any allowed types. Must be one of: [application/json].
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"book_title\": \"tg\", " + \
            " \"secret\": \"5q\" " + \
            " } "
        headers['Accept'] = "*/*"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/books/v1",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/problem+json" in res_0.headers["content-type"]
        assert res_0.json()["detail"] == "No authorization token provided"
        assert res_0.json()["status"] == 401.0
        assert res_0.json()["title"] == "Unauthorized"
        assert res_0.json()["type"] == "about:blank"
    
    
    # Calls:
    # (401) PUT:/users/v1/{username}/password
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_4(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/users/v1/{username}/password -> Response Content-Type header 'application/problem+json' does not match any allowed types. Must be one of: [application/json].
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"password\": \"C3kJwCH0Ik\" " + \
            " } "
        headers['Accept'] = "*/*"
        res_0 = requests \
                .put(self.baseUrlOfSut + "/users/v1/C3kJwCH0Ik/password",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/problem+json" in res_0.headers["content-type"]
        assert res_0.json()["detail"] == "No authorization token provided"
        assert res_0.json()["status"] == 401.0
        assert res_0.json()["title"] == "Unauthorized"
        assert res_0.json()["type"] == "about:blank"
    
    
    # Calls:
    # (401) PUT:/users/v1/{username}/email
    # Found 1 potential fault of type-code 200
    @timeout_decorator.timeout(60)
    def test_5(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/users/v1/{username}/email -> Response Content-Type header 'application/problem+json' does not match any allowed types. Must be one of: [application/json].
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"email\": \"pn_QKlE4S\" " + \
            " } "
        headers['Accept'] = "*/*"
        res_0 = requests \
                .put(self.baseUrlOfSut + "/users/v1/pn_QKlE4S/email",
                    headers=headers, data=body)
        
        assert res_0.status_code == 401
        assert "application/problem+json" in res_0.headers["content-type"]
        assert res_0.json()["detail"] == "No authorization token provided"
        assert res_0.json()["status"] == 401.0
        assert res_0.json()["title"] == "Unauthorized"
        assert res_0.json()["type"] == "about:blank"
    
    
    # Calls:
    # (401) DELETE:/users/v1/{username}
    # Found 1 potential fault of type-code 200
    # Using 1 example:
    #   name1
    @timeout_decorator.timeout(60)
    def test_6(self):
        
        # Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/users/v1/{username} -> Response Content-Type header 'application/problem+json' does not match any allowed types. Must be one of: [application/json].
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .delete(self.baseUrlOfSut + "/users/v1/name1",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/problem+json" in res_0.headers["content-type"]
        assert res_0.json()["detail"] == "No authorization token provided"
        assert res_0.json()["status"] == 401.0
        assert res_0.json()["title"] == "Unauthorized"
        assert res_0.json()["type"] == "about:blank"


if __name__ == '__main__':
    unittest.main()
