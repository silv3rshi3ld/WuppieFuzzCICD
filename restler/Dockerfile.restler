FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env
WORKDIR /workspace

# Install dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python 3.8.2
RUN apt-get update && apt-get install -y \
    software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.8 python3.8-dev python3.8-venv python3-pip && \
    rm -rf /var/lib/apt/lists/*

# Clone RESTler repository
RUN git clone https://github.com/microsoft/restler-fuzzer.git /restler-src

# Build RESTler
RUN cd /restler-src && python3.8 ./build-restler.py --dest_dir /restler_bin

# Stage 2: Setup Runtime Environment
FROM mcr.microsoft.com/dotnet/aspnet:6.0
WORKDIR /workspace

# Install dependencies
RUN apt-get update && apt-get install -y \
    software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.8 python3.8-dev python3.8-venv python3-pip python3-yaml curl && \
    rm -rf /var/lib/apt/lists/*

# Install Python packages
RUN pip3 install requests

# Copy built RESTler binaries from build-env
COPY --from=build-env /restler_bin /home/restler

# Copy restler_config directory into the image
COPY restler_config /restler_config

# Copy entrypoint script directly from restler_config
COPY restler_config/entrypoint.sh /restler_config/entrypoint.sh

# Ensure entrypoint script is executable
RUN chmod +x /restler_config/entrypoint.sh && \
    sed -i 's/\r$//' /restler_config/entrypoint.sh

# Entrypoint
SHELL ["/bin/bash", "-c"]
ENTRYPOINT ["sh", "/restler_config/entrypoint.sh"]