openapi: 3.0.0
info:
  title: Your API Title
  version: '1.0.0'
servers:
  - url: http://localhost:3001
paths:
  /api/authors:
    get:
      summary: Get a list of authors
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Create a new author
      requestBody:
        description: Author data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorCreate'
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /api/authors/{id}:
    get:
      summary: Get an author by ID
      parameters:
        - in: path
          name: id
          description: Author ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Author details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
    put:
      summary: Update an author by ID
      parameters:
        - in: path
          name: id
          description: Author ID
          required: true
          schema:
            type: string
      requestBody:
        description: Updated author data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorUpdate'
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
    delete:
      summary: Delete an author by ID
      parameters:
        - in: path
          name: id
          description: Author ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Author deleted successfully
        '404':
          description: Author not found

  /api/books:
    get:
      summary: Get a list of books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      requestBody:
        description: Book data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreate'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /api/books/{id}:
    get:
      summary: Get a book by ID
      parameters:
        - in: path
          name: id
          description: Book ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      summary: Update a book by ID
      parameters:
        - in: path
          name: id
          description: Book ID
          required: true
          schema:
            type: string
      requestBody:
        description: Updated book data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdate'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    delete:
      summary: Delete a book by ID
      parameters:
        - in: path
          name: id
          description: Book ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Book deleted successfully
        '404':
          description: Book not found

  /api/categories:
    get:
      summary: Get a list of categories
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      requestBody:
        description: Category data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /api/categories/{id}:
    get:
      summary: Get a category by ID
      parameters:
        - in: path
          name: id
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    put:
      summary: Update a category by ID
      parameters:
        - in: path
          name: id
          description: Category ID
          required: true
          schema:
            type: string
      requestBody:
        description: Updated category data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
    delete:
      summary: Delete a category by ID
      parameters:
        - in: path
          name: id
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found

  /api/users:
    get:
      summary: Get a list of users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  /api/auth:
    post:
      summary: User authentication
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /api/adminAuth:
    post:
      summary: Admin authentication
      requestBody:
        description: Admin login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogin'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized

  /api/system:
    get:
      summary: Get system information
      responses:
        '200':
          description: System information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'

  /api/logs:
    get:
      summary: Get system logs
      responses:
        '200':
          description: System logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogEntry'

  /api/me:
    get:
      summary: Get current user information
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        biography:
          type: string
        birthDate:
          type: string
          format: date
      required:
        - id
        - name

    AuthorCreate:
      type: object
      properties:
        name:
          type: string
        biography:
          type: string
        birthDate:
          type: string
          format: date
      required:
        - name

    AuthorUpdate:
      type: object
      properties:
        name:
          type: string
        biography:
          type: string
        birthDate:
          type: string
          format: date

    Book:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        authorId:
          type: string
        categoryId:
          type: string
      required:
        - id
        - title
        - authorId

    BookCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        authorId:
          type: string
        categoryId:
          type: string
      required:
        - title
        - authorId

    BookUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        authorId:
          type: string
        categoryId:
          type: string

    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name

    CategoryCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name

    CategoryUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        roles:
          type: array
          items:
            type: string
      required:
        - id
        - username
        - email

    UserCreate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - username
        - email
        - password

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      required:
        - username
        - password

    AdminLogin:
      type: object
      properties:
        adminCode:
          type: string
        password:
          type: string
          format: password
      required:
        - adminCode
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    SystemInfo:
      type: object
      properties:
        uptime:
          type: number
          format: float
        status:
          type: string
        version:
          type: string
      required:
        - uptime
        - status
        - version

    LogEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        level:
          type: string
        message:
          type: string
      required:
        - timestamp
        - level
        - message
