openapi: 3.0.0
info:
  title: Vulnerable REST API
  version: '1.0.0'
servers:
  - url: http://localhost:3001
paths:
  /users:
    get:
      summary: Retrieve a list of users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  /users/{id}:
    get:
      summary: Retrieve a single user by ID
      parameters:
        - in: path
          name: id
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update an existing user
      parameters:
        - in: path
          name: id
          description: ID of the user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: User object with updated information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete a user
      parameters:
        - in: path
          name: id
          description: ID of the user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
  /login:
    post:
      summary: Authenticate a user
      requestBody:
        description: Credentials for login
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
  /register:
    post:
      summary: Register a new user
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  /posts:
    get:
      summary: Retrieve a list of posts
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      requestBody:
        description: Post object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
  /posts/{id}:
    get:
      summary: Retrieve a single post by ID
      parameters:
        - in: path
          name: id
          description: ID of the post to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A single post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    put:
      summary: Update an existing post
      parameters:
        - in: path
          name: id
          description: ID of the post to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Post object with updated information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
    delete:
      summary: Delete a post
      parameters:
        - in: path
          name: id
          description: ID of the post to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Post deleted successfully
        '404':
          description: Post not found
  /comments:
    get:
      summary: Retrieve a list of comments
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      summary: Create a new comment
      requestBody:
        description: Comment object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
  /comments/{id}:
    get:
      summary: Retrieve a single comment by ID
      parameters:
        - in: path
          name: id
          description: ID of the comment to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A single comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
    put:
      summary: Update an existing comment
      parameters:
        - in: path
          name: id
          description: ID of the comment to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Comment object with updated information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found
    delete:
      summary: Delete a comment
      parameters:
        - in: path
          name: id
          description: ID of the comment to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Comment deleted successfully
        '404':
          description: Comment not found
  /upload:
    post:
      summary: Upload a file
      requestBody:
        description: File to upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: File uploaded successfully
        '400':
          description: Bad request
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
      required:
        - id
        - username
        - email
    UserCreate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - username
        - email
        - password
    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      required:
        - username
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
